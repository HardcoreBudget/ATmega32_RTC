
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000061c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000188  00800060  000061c6  0000625a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008001e8  008001e8  000063e2  2**0
                  ALLOC
  3 .stab         000063cc  00000000  00000000  000063e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024d8  00000000  00000000  0000c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ec88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ee28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f01a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011425  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000127ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013984  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000147a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__vector_1>
       8:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__vector_2>
       c:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__vector_3>
      10:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_4>
      14:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_5>
      18:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_10>
      2c:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_11>
      30:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__vector_12>
      34:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_13>
      38:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f1 e6       	ldi	r31, 0x61	; 97
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 30       	cpi	r26, 0x01	; 1
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <main>
      8a:	0c 94 e1 30 	jmp	0x61c2	; 0x61c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 30 	jmp	0x6154	; 0x6154 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e7       	ldi	r26, 0x7C	; 124
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 30 	jmp	0x618c	; 0x618c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 30 	jmp	0x616c	; 0x616c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 30 	jmp	0x616c	; 0x616c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 30 	jmp	0x6154	; 0x6154 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e7       	ldi	r24, 0x7C	; 124
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 30 	jmp	0x618c	; 0x618c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 30 	jmp	0x6164	; 0x6164 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e7       	ldi	r22, 0x7C	; 124
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ce 30 	jmp	0x619c	; 0x619c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b6 30 	jmp	0x616c	; 0x616c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b6 30 	jmp	0x616c	; 0x616c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b6 30 	jmp	0x616c	; 0x616c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ba 30 	jmp	0x6174	; 0x6174 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d6 30 	jmp	0x61ac	; 0x61ac <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b2 30 	jmp	0x6164	; 0x6164 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ce 30 	jmp	0x619c	; 0x619c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 57       	subi	r30, 0x7C	; 124
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_voidInit>:
static void (*Global_UDRECallBack)(void)= NULL;
static void (*Global_RXCCallBack)(void)= NULL;


void USART_voidInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if SPEED_OPERATION == USART_DOUBLE_SPEED_MODE
#define UBRR_VALUE (((f32)F_OSC/(8 * USART_BAUDRATE))-1)
	SET_BIT(UCSRA,UCSRA_U2X);    /* Configure UART double speed rate*/
     e36:	ab e2       	ldi	r26, 0x2B	; 43
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	eb e2       	ldi	r30, 0x2B	; 43
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	82 60       	ori	r24, 0x02	; 2
     e42:	8c 93       	st	X, r24
	 * UPM1:0 = 0 (Disable parity)
	 * USBS   = 0 (One bit stop bit)
	 * UCSZ1  = UCSZ0 = 1 (8-bit data size)
	 * UCPOL  = 0  (0 for Asynch. mode)
	 */
	SET_BIT(UCSRC, UCSRC_URSEL);
     e44:	a0 e4       	ldi	r26, 0x40	; 64
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e0 e4       	ldi	r30, 0x40	; 64
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 68       	ori	r24, 0x80	; 128
     e50:	8c 93       	st	X, r24

#if MODE_OF_OPERATION == USART_ASYNCHRONOUS
	CLR_BIT(UCSRC, UCSRC_UMSEL);
     e52:	a0 e4       	ldi	r26, 0x40	; 64
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e0 e4       	ldi	r30, 0x40	; 64
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7b       	andi	r24, 0xBF	; 191
     e5e:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UCPOL);
     e60:	a0 e4       	ldi	r26, 0x40	; 64
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e0 e4       	ldi	r30, 0x40	; 64
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8e 7f       	andi	r24, 0xFE	; 254
     e6c:	8c 93       	st	X, r24
#endif
#endif

#if FRAME_SIZE == 8
//	UCSRC |= (1<< UCSRC_URSEL| 1 << UCSRC_UCSZ0 | UCSRC, 1 << UCSRC_UCSZ1);
	SET_BIT(UCSRC, UCSRC_UCSZ0);
     e6e:	a0 e4       	ldi	r26, 0x40	; 64
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e0 e4       	ldi	r30, 0x40	; 64
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSRC_UCSZ1);
     e7c:	a0 e4       	ldi	r26, 0x40	; 64
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e0 e4       	ldi	r30, 0x40	; 64
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	8c 93       	st	X, r24
#endif

#if PARITY_MODE == USART_PARITY_DISABLED
	CLR_BIT(UCSRC, UCSRC_UPM1);
     e8a:	a0 e4       	ldi	r26, 0x40	; 64
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e0 e4       	ldi	r30, 0x40	; 64
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7d       	andi	r24, 0xDF	; 223
     e96:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UPM0);
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	8c 93       	st	X, r24
#endif

#if STOP_BIT_SELECT == USART_STOP_2BIT
	SET_BIT(UCSRC, UCSRC_USBS);
     ea6:	a0 e4       	ldi	r26, 0x40	; 64
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e0 e4       	ldi	r30, 0x40	; 64
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	8c 93       	st	X, r24
#elif STOP_BIT_SELECT == USART_STOP_1BIT
	CLR_BIT(UCSRC, UCSRC_USBS);
#endif

	/* Write data in UBRR*/
	CLR_BIT(UCSRC, UCSRC_URSEL);
     eb4:	a0 e4       	ldi	r26, 0x40	; 64
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e0 e4       	ldi	r30, 0x40	; 64
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 77       	andi	r24, 0x7F	; 127
     ec0:	8c 93       	st	X, r24

	UCSRC = 0; // writing to UBRRH
     ec2:	e0 e4       	ldi	r30, 0x40	; 64
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	10 82       	st	Z, r1
	UBRRL = UBRR_VALUE;
     ec8:	e9 e2       	ldi	r30, 0x29	; 41
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8f ec       	ldi	r24, 0xCF	; 207
     ece:	80 83       	st	Z, r24
	/* RXCIE = TXCIE = UDRIE = 0  (No interrupt Mode)
	 * RXEN = TXEN = 1 (Enable receive and transmit)
	 * UCSZ2 = 0 (8-bit data size)
	 * RXB8 & TXB8 not used
	 */
	SET_BIT(UCSRB, UCSRB_RXEN);
     ed0:	aa e2       	ldi	r26, 0x2A	; 42
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ea e2       	ldi	r30, 0x2A	; 42
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 61       	ori	r24, 0x10	; 16
     edc:	8c 93       	st	X, r24
	SET_BIT(UCSRB, UCSRB_TXEN);
     ede:	aa e2       	ldi	r26, 0x2A	; 42
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ea e2       	ldi	r30, 0x2A	; 42
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	88 60       	ori	r24, 0x08	; 8
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <USART_voidEnableUDREInterrupt>:


void USART_voidEnableUDREInterrupt(){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_UDRIE);
     efa:	aa e2       	ldi	r26, 0x2A	; 42
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ea e2       	ldi	r30, 0x2A	; 42
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 62       	ori	r24, 0x20	; 32
     f06:	8c 93       	st	X, r24
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <USART_voidDisableUDREInterrupt>:

void USART_voidDisableUDREInterrupt(){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_UDRIE);
     f16:	aa e2       	ldi	r26, 0x2A	; 42
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e2       	ldi	r30, 0x2A	; 42
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8f 7d       	andi	r24, 0xDF	; 223
     f22:	8c 93       	st	X, r24
}
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <USART_voidEnableRXCInterrupt>:

void USART_voidEnableRXCInterrupt(){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_RXCIE);
     f32:	aa e2       	ldi	r26, 0x2A	; 42
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ea e2       	ldi	r30, 0x2A	; 42
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	8c 93       	st	X, r24
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <USART_voidDisableRXCInterrupt>:

void USART_voidDisableRXCInterrupt(){
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_RXCIE);
     f4e:	aa e2       	ldi	r26, 0x2A	; 42
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ea e2       	ldi	r30, 0x2A	; 42
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <USART_voidSendByte>:

void USART_voidSendByte(const u8 data)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE is 1 once UDR register is empty*/
	while(!GET_BIT(UCSRA,UCSRA_UDRE));
     f6e:	eb e2       	ldi	r30, 0x2B	; 43
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	82 95       	swap	r24
     f76:	86 95       	lsr	r24
     f78:	87 70       	andi	r24, 0x07	; 7
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	81 70       	andi	r24, 0x01	; 1
     f80:	90 70       	andi	r25, 0x00	; 0
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 f3       	breq	.-24     	; 0xf6e <USART_voidSendByte+0xc>
	/*Once polling finished (UDR is empty) load ur new data in the UDR register*/
	UDR = data;
     f86:	ec e2       	ldi	r30, 0x2C	; 44
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	80 83       	st	Z, r24
}
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <USART_voidSendInterruptByte>:

void USART_voidSendInterruptByte(const u8 data){
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
     fa2:	ec e2       	ldi	r30, 0x2C	; 44
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	80 83       	st	Z, r24
}
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <USART_u8ReceiveInterruptByte>:

u8 USART_u8ReceiveInterruptByte(){
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     fba:	ec e2       	ldi	r30, 0x2C	; 44
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
}
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <USART_u8ReceiveByte>:

u8 USART_u8ReceiveByte()
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA, UCSRA_RXC));
     fce:	eb e2       	ldi	r30, 0x2B	; 43
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	88 23       	and	r24, r24
     fd6:	dc f7       	brge	.-10     	; 0xfce <USART_u8ReceiveByte+0x8>
	return UDR;
     fd8:	ec e2       	ldi	r30, 0x2C	; 44
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
}
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <USART_voidSendString>:

void USART_voidSendString(const u8* str)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <USART_voidSendString+0x6>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	0a c0       	rjmp	.+20     	; 0x1008 <USART_voidSendString+0x24>
	while(*str != '\0')
	{
		USART_voidSendByte(*str);
     ff4:	e9 81       	ldd	r30, Y+1	; 0x01
     ff6:	fa 81       	ldd	r31, Y+2	; 0x02
     ff8:	80 81       	ld	r24, Z
     ffa:	0e 94 b1 07 	call	0xf62	; 0xf62 <USART_voidSendByte>
		str++;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	9a 83       	std	Y+2, r25	; 0x02
    1006:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_voidSendString(const u8* str)
{
	while(*str != '\0')
    1008:	e9 81       	ldd	r30, Y+1	; 0x01
    100a:	fa 81       	ldd	r31, Y+2	; 0x02
    100c:	80 81       	ld	r24, Z
    100e:	88 23       	and	r24, r24
    1010:	89 f7       	brne	.-30     	; 0xff4 <USART_voidSendString+0x10>
	{
		USART_voidSendByte(*str);
		str++;
	}
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <USART_voidReceiveString>:

void USART_voidReceiveString(u8* str)
{
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	00 d0       	rcall	.+0      	; 0x1026 <USART_voidReceiveString+0xa>
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	9b 83       	std	Y+3, r25	; 0x03
    102e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1030:	19 82       	std	Y+1, r1	; 0x01
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <USART_voidReceiveString+0x36>
	while(str[i] != '\0')
	{
		str[i++] = USART_u8ReceiveByte();
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	9b 81       	ldd	r25, Y+3	; 0x03
    103e:	8c 01       	movw	r16, r24
    1040:	02 0f       	add	r16, r18
    1042:	13 1f       	adc	r17, r19
    1044:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <USART_u8ReceiveByte>
    1048:	f8 01       	movw	r30, r16
    104a:	80 83       	st	Z, r24
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidReceiveString(u8* str)
{
	u8 i = 0;
	while(str[i] != '\0')
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	fc 01       	movw	r30, r24
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	31 f7       	brne	.-52     	; 0x1034 <USART_voidReceiveString+0x18>
	{
		str[i++] = USART_u8ReceiveByte();
	}
	str[i]= '\0';
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	fc 01       	movw	r30, r24
    1074:	e2 0f       	add	r30, r18
    1076:	f3 1f       	adc	r31, r19
    1078:	10 82       	st	Z, r1
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	08 95       	ret

0000108a <USART_voidRXCSetCallBack>:

void USART_voidRXCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <USART_voidRXCSetCallBack+0x6>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
	Global_RXCCallBack = Copy_pvCallBackFunc;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	90 93 eb 01 	sts	0x01EB, r25
    10a0:	80 93 ea 01 	sts	0x01EA, r24
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <USART_voidUDRESetCallBack>:

void USART_voidUDRESetCallBack(void (*Copy_pvCallBackFunc)(void)){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <USART_voidUDRESetCallBack+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
	Global_UDRECallBack = Copy_pvCallBackFunc;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	90 93 e9 01 	sts	0x01E9, r25
    10c4:	80 93 e8 01 	sts	0x01E8, r24
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <__vector_13>:

void  __vector_13 (void)	__attribute__((signal));
void  __vector_13 (void)
{
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	if(Global_RXCCallBack != NULL)
    10fc:	80 91 ea 01 	lds	r24, 0x01EA
    1100:	90 91 eb 01 	lds	r25, 0x01EB
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	29 f0       	breq	.+10     	; 0x1112 <__vector_13+0x40>
	{
		Global_RXCCallBack();
    1108:	e0 91 ea 01 	lds	r30, 0x01EA
    110c:	f0 91 eb 01 	lds	r31, 0x01EB
    1110:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	0f 90       	pop	r0
    1134:	1f 90       	pop	r1
    1136:	18 95       	reti

00001138 <__vector_14>:

void  __vector_14 (void)	__attribute__((signal));
void  __vector_14 (void)
{
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	if(Global_UDRECallBack != NULL)
    1162:	80 91 e8 01 	lds	r24, 0x01E8
    1166:	90 91 e9 01 	lds	r25, 0x01E9
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	29 f0       	breq	.+10     	; 0x1178 <__vector_14+0x40>
	{
		Global_UDRECallBack();
    116e:	e0 91 e8 01 	lds	r30, 0x01E8
    1172:	f0 91 e9 01 	lds	r31, 0x01E9
    1176:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <TMR2_voidInit>:

/*Define Pointer to TIMER2 ISR functions*/
static void (*Global_pvTimerOverFlowCallBack)(void)= NULL;
static void (*Global_pvTimerCTCCallBack)(void)= NULL;

void TMR2_voidInit(){
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
#if       TIMER2_Mode == TIMER2_Normal
	/*Choose Normal Mode*/
	CLR_BIT(TCCR2, TCCR2_WGM20);
    11a6:	a5 e4       	ldi	r26, 0x45	; 69
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e4       	ldi	r30, 0x45	; 69
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 7b       	andi	r24, 0xBF	; 191
    11b2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, TCCR2_WGM21);
    11b4:	a5 e4       	ldi	r26, 0x45	; 69
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e5 e4       	ldi	r30, 0x45	; 69
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	87 7f       	andi	r24, 0xF7	; 247
    11c0:	8c 93       	st	X, r24

	/*Timer Over flow flag Enable*/
	SET_BIT(TIMSK, TIMSK_TOIE2);
    11c2:	a9 e5       	ldi	r26, 0x59	; 89
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e9 e5       	ldi	r30, 0x59	; 89
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 64       	ori	r24, 0x40	; 64
    11ce:	8c 93       	st	X, r24

	/*Set PRESCALAR 64*/
	SET_BIT(TCCR2, TCCR2_CS22);
    11d0:	a5 e4       	ldi	r26, 0x45	; 69
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e4       	ldi	r30, 0x45	; 69
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	84 60       	ori	r24, 0x04	; 4
    11dc:	8c 93       	st	X, r24
	SET_BIT(TCCR2, TCCR2_CS21);
    11de:	a5 e4       	ldi	r26, 0x45	; 69
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e4       	ldi	r30, 0x45	; 69
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	82 60       	ori	r24, 0x02	; 2
    11ea:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, TCCR2_CS22);
    11ec:	a5 e4       	ldi	r26, 0x45	; 69
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e4       	ldi	r30, 0x45	; 69
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	8b 7f       	andi	r24, 0xFB	; 251
    11f8:	8c 93       	st	X, r24
	/*Set PRESCALAR 1*/
	SET_BIT(TCCR2, TCCR2_CS22);
	CLR_BIT(TCCR2, TCCR2_CS21);
	CLR_BIT(TCCR2, TCCR2_CS22);
#endif
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <TMR2_voidSetDuty>:

void TMR2_voidSetDuty(u8 Copy_u8DutyCycle){
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	0f 92       	push	r0
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8DutyCycle;               /*Sets OCR2 value*/
    120c:	e3 e4       	ldi	r30, 0x43	; 67
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	80 83       	st	Z, r24
}
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <TMR2_voidTimer2CTCSetCallBack>:

void TMR2_voidTimer2CTCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <TMR2_voidTimer2CTCSetCallBack+0x6>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerCTCCallBack = Copy_pvCallBackFunc;
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	90 93 ef 01 	sts	0x01EF, r25
    1232:	80 93 ee 01 	sts	0x01EE, r24
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <TMR2_voidTimer2OVSetCallBack>:

void TMR2_voidTimer2OVSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <TMR2_voidTimer2OVSetCallBack+0x6>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerOverFlowCallBack = Copy_pvCallBackFunc;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	90 93 ed 01 	sts	0x01ED, r25
    1256:	80 93 ec 01 	sts	0x01EC, r24
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TMR2_voidSetBusyWait>:

void TMR2_voidSetBusyWait(u16 Copy_u8WaitTime){
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <TMR2_voidSetBusyWait+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <TMR2_voidSetBusyWait+0x8>
    126c:	0f 92       	push	r0
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9d 83       	std	Y+5, r25	; 0x05
    1274:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u8Counter = 2;
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9b 83       	std	Y+3, r25	; 0x03
    127c:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter = 2;
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	1e c0       	rjmp	.+60     	; 0x12c0 <TMR2_voidSetBusyWait+0x5c>
	while(Local_u8Counter != Copy_u8WaitTime){
		if(GET_BIT(TIFR,TIFR_OCF2)){
    1284:	e8 e5       	ldi	r30, 0x58	; 88
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	86 95       	lsr	r24
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	81 70       	andi	r24, 0x01	; 1
    1292:	90 70       	andi	r25, 0x00	; 0
    1294:	88 23       	and	r24, r24
    1296:	51 f0       	breq	.+20     	; 0x12ac <TMR2_voidSetBusyWait+0x48>
			counter++;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(TIFR,TIFR_OCF2);
    129e:	a8 e5       	ldi	r26, 0x58	; 88
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e8 e5       	ldi	r30, 0x58	; 88
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	82 60       	ori	r24, 0x02	; 2
    12aa:	8c 93       	st	X, r24
		}
		if(counter == 4){
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <TMR2_voidSetBusyWait+0x5c>
			Local_u8Counter++;
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	9b 81       	ldd	r25, Y+3	; 0x03
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	9b 83       	std	Y+3, r25	; 0x03
    12ba:	8a 83       	std	Y+2, r24	; 0x02
			counter = 2;
    12bc:	82 e0       	ldi	r24, 0x02	; 2
    12be:	89 83       	std	Y+1, r24	; 0x01
}

void TMR2_voidSetBusyWait(u16 Copy_u8WaitTime){
	u16 Local_u8Counter = 2;
	u8 counter = 2;
	while(Local_u8Counter != Copy_u8WaitTime){
    12c0:	2a 81       	ldd	r18, Y+2	; 0x02
    12c2:	3b 81       	ldd	r19, Y+3	; 0x03
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	28 17       	cp	r18, r24
    12ca:	39 07       	cpc	r19, r25
    12cc:	d9 f6       	brne	.-74     	; 0x1284 <TMR2_voidSetBusyWait+0x20>
		if(counter == 4){
			Local_u8Counter++;
			counter = 2;
		}
	}
}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <TMR2_u8GetTCNT>:

u8 TMR2_u8GetTCNT(){
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    12e6:	e4 e4       	ldi	r30, 0x44	; 68
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <TMR2_voidSetTCNT>:

void TMR2_voidSetTCNT(u8 value){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = value;
    12fe:	e4 e4       	ldi	r30, 0x44	; 68
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	80 83       	st	Z, r24
}
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <__vector_5>:

//TIMER OVERFLOW ISR
void  __vector_5 (void)	__attribute__((signal));
void  __vector_5 (void)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerOverFlowCallBack != NULL)
    1338:	80 91 ec 01 	lds	r24, 0x01EC
    133c:	90 91 ed 01 	lds	r25, 0x01ED
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	29 f0       	breq	.+10     	; 0x134e <__vector_5+0x40>
	{
		Global_pvTimerOverFlowCallBack();
    1344:	e0 91 ec 01 	lds	r30, 0x01EC
    1348:	f0 91 ed 01 	lds	r31, 0x01ED
    134c:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	ff 91       	pop	r31
    1354:	ef 91       	pop	r30
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	7f 91       	pop	r23
    1360:	6f 91       	pop	r22
    1362:	5f 91       	pop	r21
    1364:	4f 91       	pop	r20
    1366:	3f 91       	pop	r19
    1368:	2f 91       	pop	r18
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_4>:

//ON COMPARE ISR
void  __vector_4 (void)	__attribute__((signal));
void  __vector_4 (void)
{
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	6f 93       	push	r22
    1388:	7f 93       	push	r23
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	af 93       	push	r26
    1390:	bf 93       	push	r27
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL)
    139e:	80 91 ee 01 	lds	r24, 0x01EE
    13a2:	90 91 ef 01 	lds	r25, 0x01EF
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	29 f0       	breq	.+10     	; 0x13b4 <__vector_4+0x40>
	{
		Global_pvTimerCTCCallBack();
    13aa:	e0 91 ee 01 	lds	r30, 0x01EE
    13ae:	f0 91 ef 01 	lds	r31, 0x01EF
    13b2:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	ff 91       	pop	r31
    13ba:	ef 91       	pop	r30
    13bc:	bf 91       	pop	r27
    13be:	af 91       	pop	r26
    13c0:	9f 91       	pop	r25
    13c2:	8f 91       	pop	r24
    13c4:	7f 91       	pop	r23
    13c6:	6f 91       	pop	r22
    13c8:	5f 91       	pop	r21
    13ca:	4f 91       	pop	r20
    13cc:	3f 91       	pop	r19
    13ce:	2f 91       	pop	r18
    13d0:	0f 90       	pop	r0
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	0f 90       	pop	r0
    13d6:	1f 90       	pop	r1
    13d8:	18 95       	reti

000013da <TMR1_voidInit>:
#include"../../../Library/Bit_Math.h"
#include "../Header/TMR1_Interface.h"

static void (*Global_pvTimerICUCallBack)(void)= NULL;

void TMR1_voidInit(){
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
	//Configure TIMER1
	TCCR1A = 0;
    13e2:	ef e4       	ldi	r30, 0x4F	; 79
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	10 82       	st	Z, r1
	TCCR1B = 0;
    13e8:	ee e4       	ldi	r30, 0x4E	; 78
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	10 82       	st	Z, r1
#endif
#endif

#elif TIMER1_Mode == TIMER1_ICU
#if TIMER1_DefaultEdge == TIMER1_RISING
	SET_BIT(TCCR1B,TCCR1B_ICES);
    13ee:	ae e4       	ldi	r26, 0x4E	; 78
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	ee e4       	ldi	r30, 0x4E	; 78
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	80 64       	ori	r24, 0x40	; 64
    13fa:	8c 93       	st	X, r24
#endif

#if TIMER1_NoiseOption == TIMER1_ACTIVENOISECANCELLER
	SET_BIT(TCCR1B,TCCR1B_ICNC1);
#elif TIMER1_NoiseOption == TIMER1_NONOISECANCELLER
	CLR_BIT(TCCR1B,TCCR1B_ICNC1);
    13fc:	ae e4       	ldi	r26, 0x4E	; 78
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ee e4       	ldi	r30, 0x4E	; 78
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	8f 77       	andi	r24, 0x7F	; 127
    1408:	8c 93       	st	X, r24
#endif

	TCNT1 = 0; /*init timer1 counter 0*/
    140a:	ec e4       	ldi	r30, 0x4C	; 76
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	11 82       	std	Z+1, r1	; 0x01
    1410:	10 82       	st	Z, r1
	ICR1 = 0;  /*init Input Capture register counter 0*/
    1412:	e6 e4       	ldi	r30, 0x46	; 70
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	11 82       	std	Z+1, r1	; 0x01
    1418:	10 82       	st	Z, r1

	/* Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	80 62       	ori	r24, 0x20	; 32
    1426:	8c 93       	st	X, r24
#endif
	SET_BIT(TCCR1B,TCCR1B_CS10);
    1428:	ae e4       	ldi	r26, 0x4E	; 78
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ee e4       	ldi	r30, 0x4E	; 78
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS11);
    1436:	ae e4       	ldi	r26, 0x4E	; 78
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ee e4       	ldi	r30, 0x4E	; 78
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8d 7f       	andi	r24, 0xFD	; 253
    1442:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS12);
    1444:	ae e4       	ldi	r26, 0x4E	; 78
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ee e4       	ldi	r30, 0x4E	; 78
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	84 60       	ori	r24, 0x04	; 4
    1450:	8c 93       	st	X, r24
}
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <TMR1_voidSetICR>:

void TMR1_voidSetICR(u16 value){
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	00 d0       	rcall	.+0      	; 0x145e <TMR1_voidSetICR+0x6>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    1466:	e6 e4       	ldi	r30, 0x46	; 70
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <TMR1_voidSetTimerValue>:

void TMR1_voidSetTimerValue(u16 value){
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <TMR1_voidSetTimerValue+0x6>
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = value;
    148a:	ec e4       	ldi	r30, 0x4C	; 76
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	80 83       	st	Z, r24
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <TMR1_u16ReadTimerValue>:
u16 TMR1_u16ReadTimerValue(){
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    14a8:	ec e4       	ldi	r30, 0x4C	; 76
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	91 81       	ldd	r25, Z+1	; 0x01
}
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <TMR1_voidSetDutyCycle>:

void TMR1_voidSetDutyCycle(u16 duty){
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <TMR1_voidSetDutyCycle+0x6>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = duty;
    14c4:	ea e4       	ldi	r30, 0x4A	; 74
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <TMR1_ICUsetEdgeDetectionMode>:

void TMR1_ICUsetEdgeDetectionMode(u8 edge)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	89 83       	std	Y+1, r24	; 0x01
	if(edge == TIMER1_RISING){
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	41 f4       	brne	.+16     	; 0x14fc <TMR1_ICUsetEdgeDetectionMode+0x22>
		SET_BIT(TCCR1B,TCCR1B_ICES);
    14ec:	ae e4       	ldi	r26, 0x4E	; 78
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ee e4       	ldi	r30, 0x4E	; 78
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 64       	ori	r24, 0x40	; 64
    14f8:	8c 93       	st	X, r24
    14fa:	0a c0       	rjmp	.+20     	; 0x1510 <TMR1_ICUsetEdgeDetectionMode+0x36>
	}
	else if(edge == TIMER1_FALLING){
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	88 23       	and	r24, r24
    1500:	39 f4       	brne	.+14     	; 0x1510 <TMR1_ICUsetEdgeDetectionMode+0x36>
		CLR_BIT(TCCR1B,TCCR1B_ICES);
    1502:	ae e4       	ldi	r26, 0x4E	; 78
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ee e4       	ldi	r30, 0x4E	; 78
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8f 7b       	andi	r24, 0xBF	; 191
    150e:	8c 93       	st	X, r24
	}
}
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <TMR1_ICUgetInputCaptureValue>:

u16 TMR1_ICUgetInputCaptureValue()
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1520:	e6 e4       	ldi	r30, 0x46	; 70
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <TMR1_ICUclearTimerValue>:

void TMR1_ICUclearTimerValue()
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1536:	ec e4       	ldi	r30, 0x4C	; 76
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	11 82       	std	Z+1, r1	; 0x01
    153c:	10 82       	st	Z, r1
}
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <TMR1_ICUDeInit>:

void TMR1_ICUDeInit()
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    154c:	ef e4       	ldi	r30, 0x4F	; 79
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	10 82       	st	Z, r1
	TCCR1B = 0;
    1552:	ee e4       	ldi	r30, 0x4E	; 78
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	10 82       	st	Z, r1
	TCNT1  = 0;
    1558:	ec e4       	ldi	r30, 0x4C	; 76
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	11 82       	std	Z+1, r1	; 0x01
    155e:	10 82       	st	Z, r1
	ICR1   = 0;
    1560:	e6 e4       	ldi	r30, 0x46	; 70
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	11 82       	std	Z+1, r1	; 0x01
    1566:	10 82       	st	Z, r1

	/* Disable the interrupt */
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1568:	a9 e5       	ldi	r26, 0x59	; 89
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e9 e5       	ldi	r30, 0x59	; 89
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 7d       	andi	r24, 0xDF	; 223
    1574:	8c 93       	st	X, r24
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <TMR1_voidTimer1ICUSetCallBack>:

void TMR1_voidTimer1ICUSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <TMR1_voidTimer1ICUSetCallBack+0x6>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerICUCallBack = Copy_pvCallBackFunc;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	90 93 f1 01 	sts	0x01F1, r25
    1592:	80 93 f0 01 	sts	0x01F0, r24
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	2f 93       	push	r18
    15ac:	3f 93       	push	r19
    15ae:	4f 93       	push	r20
    15b0:	5f 93       	push	r21
    15b2:	6f 93       	push	r22
    15b4:	7f 93       	push	r23
    15b6:	8f 93       	push	r24
    15b8:	9f 93       	push	r25
    15ba:	af 93       	push	r26
    15bc:	bf 93       	push	r27
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerICUCallBack != NULL){
    15ca:	80 91 f0 01 	lds	r24, 0x01F0
    15ce:	90 91 f1 01 	lds	r25, 0x01F1
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	29 f0       	breq	.+10     	; 0x15e0 <__vector_6+0x40>
		Global_pvTimerICUCallBack();
    15d6:	e0 91 f0 01 	lds	r30, 0x01F0
    15da:	f0 91 f1 01 	lds	r31, 0x01F1
    15de:	09 95       	icall
	}
}
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <TMR0_voidInit>:

/*Define Pointer to TIMER0 ISR functions*/
static void (*Global_pvTimerOverFlowCallBack)(void)= NULL;
static void (*Global_pvTimerCTCCallBack)(void)= NULL;

void TMR0_voidInit(){
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0 , TCCR0_COM01);
#endif
#elif     TIMER0_Mode == TIMER0_PWM

	/*Choose Fast PWM Mode*/
	SET_BIT(TCCR0, TCCR0_WGM00);
    160e:	a3 e5       	ldi	r26, 0x53	; 83
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e3 e5       	ldi	r30, 0x53	; 83
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	80 64       	ori	r24, 0x40	; 64
    161a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_WGM01);
    161c:	a3 e5       	ldi	r26, 0x53	; 83
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e3 e5       	ldi	r30, 0x53	; 83
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	88 60       	ori	r24, 0x08	; 8
    1628:	8c 93       	st	X, r24

	/*SET OC0 ON TOP CLEAR OC0 ON COMPARE*/
	CLR_BIT(TCCR0, TCCR0_COM00);
    162a:	a3 e5       	ldi	r26, 0x53	; 83
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e3 e5       	ldi	r30, 0x53	; 83
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8f 7e       	andi	r24, 0xEF	; 239
    1636:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_COM01);
    1638:	a3 e5       	ldi	r26, 0x53	; 83
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e3 e5       	ldi	r30, 0x53	; 83
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	80 62       	ori	r24, 0x20	; 32
    1644:	8c 93       	st	X, r24

	OCR0=0;
    1646:	ec e5       	ldi	r30, 0x5C	; 92
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	10 82       	st	Z, r1
	/*Set PRESCALAR*/
	SET_BIT(TCCR0, TCCR0_CS00);
    164c:	a3 e5       	ldi	r26, 0x53	; 83
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e3 e5       	ldi	r30, 0x53	; 83
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	81 60       	ori	r24, 0x01	; 1
    1658:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, TCCR0_CS01);
    165a:	a3 e5       	ldi	r26, 0x53	; 83
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e3 e5       	ldi	r30, 0x53	; 83
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8d 7f       	andi	r24, 0xFD	; 253
    1666:	8c 93       	st	X, r24
	SET_BIT(TCCR0, TCCR0_CS02);
    1668:	a3 e5       	ldi	r26, 0x53	; 83
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e3 e5       	ldi	r30, 0x53	; 83
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	84 60       	ori	r24, 0x04	; 4
    1674:	8c 93       	st	X, r24
	/*Set PRESCALAR Falling*/
	CLR_BIT(TCCR0, TCCR0_CS00);
	SET_BIT(TCCR0, TCCR0_CS01);
	SET_BIT(TCCR0, TCCR0_CS02);
#endif
}
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <TMR0_voidSetDuty>:

void TMR0_voidSetDuty(u8 Copy_u8DutyCycle){
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	0f 92       	push	r0
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle;               /*Sets OCR0 value*/
    1688:	ec e5       	ldi	r30, 0x5C	; 92
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	80 83       	st	Z, r24
}
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <TMR0_voidTimer0CTCSetCallBack>:

void TMR0_voidTimer0CTCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <TMR0_voidTimer0CTCSetCallBack+0x6>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerCTCCallBack = Copy_pvCallBackFunc;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	90 93 f5 01 	sts	0x01F5, r25
    16ae:	80 93 f4 01 	sts	0x01F4, r24
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <TMR0_voidTimer0OVSetCallBack>:

void TMR0_voidTimer0OVSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <TMR0_voidTimer0OVSetCallBack+0x6>
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerOverFlowCallBack = Copy_pvCallBackFunc;
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	90 93 f3 01 	sts	0x01F3, r25
    16d2:	80 93 f2 01 	sts	0x01F2, r24
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <TMR0_voidSetBusyWait>:

void TMR0_voidSetBusyWait(u16 Copy_u8WaitTime){
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <TMR0_voidSetBusyWait+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <TMR0_voidSetBusyWait+0x8>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	9d 83       	std	Y+5, r25	; 0x05
    16f0:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u8Counter = 0;
    16f2:	1b 82       	std	Y+3, r1	; 0x03
    16f4:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter = 0;
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	1d c0       	rjmp	.+58     	; 0x1734 <TMR0_voidSetBusyWait+0x54>
	while(Local_u8Counter != Copy_u8WaitTime){
		if(GET_BIT(TIFR,TIFR_OCF0)){
    16fa:	e8 e5       	ldi	r30, 0x58	; 88
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	86 95       	lsr	r24
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	81 70       	andi	r24, 0x01	; 1
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	88 23       	and	r24, r24
    170c:	51 f0       	breq	.+20     	; 0x1722 <TMR0_voidSetBusyWait+0x42>
			counter++;
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(TIFR,TIFR_OCF0);
    1714:	a8 e5       	ldi	r26, 0x58	; 88
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e8 e5       	ldi	r30, 0x58	; 88
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	82 60       	ori	r24, 0x02	; 2
    1720:	8c 93       	st	X, r24
		}
		if(counter == 4){
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	84 30       	cpi	r24, 0x04	; 4
    1726:	31 f4       	brne	.+12     	; 0x1734 <TMR0_voidSetBusyWait+0x54>
			Local_u8Counter++;
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	9b 83       	std	Y+3, r25	; 0x03
    1730:	8a 83       	std	Y+2, r24	; 0x02
			counter = 0;
    1732:	19 82       	std	Y+1, r1	; 0x01
}

void TMR0_voidSetBusyWait(u16 Copy_u8WaitTime){
	u16 Local_u8Counter = 0;
	u8 counter = 0;
	while(Local_u8Counter != Copy_u8WaitTime){
    1734:	2a 81       	ldd	r18, Y+2	; 0x02
    1736:	3b 81       	ldd	r19, Y+3	; 0x03
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	28 17       	cp	r18, r24
    173e:	39 07       	cpc	r19, r25
    1740:	e1 f6       	brne	.-72     	; 0x16fa <TMR0_voidSetBusyWait+0x1a>
		if(counter == 4){
			Local_u8Counter++;
			counter = 0;
		}
	}
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <TMR0_u8GetTCNT>:

u8 TMR0_u8GetTCNT(){
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    175a:	e2 e5       	ldi	r30, 0x52	; 82
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <TMR0_voidSetTCNT>:

void TMR0_voidSetTCNT(u8 value){
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	0f 92       	push	r0
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = value;
    1772:	e2 e5       	ldi	r30, 0x52	; 82
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	80 83       	st	Z, r24
}
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <__vector_11>:

//TIMER OVERFLOW ISR
void  __vector_11 (void)	__attribute__((signal));
void  __vector_11 (void)
{
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	ef 93       	push	r30
    17a2:	ff 93       	push	r31
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerOverFlowCallBack != NULL)
    17ac:	80 91 f2 01 	lds	r24, 0x01F2
    17b0:	90 91 f3 01 	lds	r25, 0x01F3
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	29 f0       	breq	.+10     	; 0x17c2 <__vector_11+0x40>
	{
		Global_pvTimerOverFlowCallBack();
    17b8:	e0 91 f2 01 	lds	r30, 0x01F2
    17bc:	f0 91 f3 01 	lds	r31, 0x01F3
    17c0:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <__vector_10>:

//ON COMPARE ISR
void  __vector_10 (void)	__attribute__((signal));
void  __vector_10 (void)
{
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	2f 93       	push	r18
    17f4:	3f 93       	push	r19
    17f6:	4f 93       	push	r20
    17f8:	5f 93       	push	r21
    17fa:	6f 93       	push	r22
    17fc:	7f 93       	push	r23
    17fe:	8f 93       	push	r24
    1800:	9f 93       	push	r25
    1802:	af 93       	push	r26
    1804:	bf 93       	push	r27
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL)
    1812:	80 91 f4 01 	lds	r24, 0x01F4
    1816:	90 91 f5 01 	lds	r25, 0x01F5
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	29 f0       	breq	.+10     	; 0x1828 <__vector_10+0x40>
	{
		Global_pvTimerCTCCallBack();
    181e:	e0 91 f4 01 	lds	r30, 0x01F4
    1822:	f0 91 f5 01 	lds	r31, 0x01F5
    1826:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	ff 91       	pop	r31
    182e:	ef 91       	pop	r30
    1830:	bf 91       	pop	r27
    1832:	af 91       	pop	r26
    1834:	9f 91       	pop	r25
    1836:	8f 91       	pop	r24
    1838:	7f 91       	pop	r23
    183a:	6f 91       	pop	r22
    183c:	5f 91       	pop	r21
    183e:	4f 91       	pop	r20
    1840:	3f 91       	pop	r19
    1842:	2f 91       	pop	r18
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <SPI_voidMasterInit>:
#include "../../../Library/Bit_Math.h"
#include "../Header/SPI_Interface.h"

static void (*Global_pvSPICallBack)(void)= NULL;

void SPI_voidMasterInit(void){
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_MSTR);
    1856:	ad e2       	ldi	r26, 0x2D	; 45
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ed e2       	ldi	r30, 0x2D	; 45
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 61       	ori	r24, 0x10	; 16
    1862:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    1864:	ad e2       	ldi	r26, 0x2D	; 45
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	ed e2       	ldi	r30, 0x2D	; 45
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	80 64       	ori	r24, 0x40	; 64
    1870:	8c 93       	st	X, r24
#if INTERRUPT_MODE == ENABLE_INTERRUPT
	SET_BIT(SPCR,SPCR_SPIE);
    1872:	ad e2       	ldi	r26, 0x2D	; 45
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ed e2       	ldi	r30, 0x2D	; 45
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	80 68       	ori	r24, 0x80	; 128
    187e:	8c 93       	st	X, r24
#endif

#if CLOCK_POLARITY == IDLE_LOW
	CLR_BIT(SPCR,SPCR_CPOL);
    1880:	ad e2       	ldi	r26, 0x2D	; 45
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	ed e2       	ldi	r30, 0x2D	; 45
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	87 7f       	andi	r24, 0xF7	; 247
    188c:	8c 93       	st	X, r24
#elif CLOCK_POLARITY == IDLE_HIGH
	SET_BIT(SPCR,SPCR_CPOL);
#endif

#if CLOCK_PHASE == SPI_ZERO
	CLR_BIT(SPCR,SPCR_CPHA);
    188e:	ad e2       	ldi	r26, 0x2D	; 45
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	ed e2       	ldi	r30, 0x2D	; 45
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	8b 7f       	andi	r24, 0xFB	; 251
    189a:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_CPHA);
#endif


#if DATA_ORDER == LSB_FIRST
	SET_BIT(SPCR,SPCR_DORD);
    189c:	ad e2       	ldi	r26, 0x2D	; 45
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	ed e2       	ldi	r30, 0x2D	; 45
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	80 62       	ori	r24, 0x20	; 32
    18a8:	8c 93       	st	X, r24
#elif DATA_ORDER == MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
#endif

#if SPI_FREQUENCY == QUARTER_FREQ
	CLR_BIT(SPSR,SPSR_SPI2X);
    18aa:	ae e2       	ldi	r26, 0x2E	; 46
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	ee e2       	ldi	r30, 0x2E	; 46
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8e 7f       	andi	r24, 0xFE	; 254
    18b6:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR0);
    18b8:	ad e2       	ldi	r26, 0x2D	; 45
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	ed e2       	ldi	r30, 0x2D	; 45
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	8e 7f       	andi	r24, 0xFE	; 254
    18c4:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    18c6:	ad e2       	ldi	r26, 0x2D	; 45
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	ed e2       	ldi	r30, 0x2D	; 45
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	8d 7f       	andi	r24, 0xFD	; 253
    18d2:	8c 93       	st	X, r24
#elif SPI_FREQUENCY == HALF_FREQ
	SET_BIT(SPSR,SPSR_SPI2X);
	CLR_BIT(SPCR,SPCR_SPR0);
	CLR_BIT(SPCR,SPCR_SPR1);
#endif
}
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void){
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
    18e2:	ad e2       	ldi	r26, 0x2D	; 45
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	ed e2       	ldi	r30, 0x2D	; 45
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	8f 7e       	andi	r24, 0xEF	; 239
    18ee:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    18f0:	ad e2       	ldi	r26, 0x2D	; 45
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ed e2       	ldi	r30, 0x2D	; 45
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	80 64       	ori	r24, 0x40	; 64
    18fc:	8c 93       	st	X, r24
#if INTERRUPT_MODE == ENABLE_INTERRUPT
	SET_BIT(SPCR,SPCR_SPIE);
    18fe:	ad e2       	ldi	r26, 0x2D	; 45
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ed e2       	ldi	r30, 0x2D	; 45
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	80 68       	ori	r24, 0x80	; 128
    190a:	8c 93       	st	X, r24
#endif

#if DATA_ORDER == LSB_FIRST
	SET_BIT(SPCR,SPCR_DORD);
    190c:	ad e2       	ldi	r26, 0x2D	; 45
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ed e2       	ldi	r30, 0x2D	; 45
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 62       	ori	r24, 0x20	; 32
    1918:	8c 93       	st	X, r24
#elif DATA_ORDER == MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
#endif
}
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <SPI_u8Transfer>:

u8 SPI_u8Transfer(u8 Copy_Data){
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	0f 92       	push	r0
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = Copy_Data;
    192c:	ef e2       	ldi	r30, 0x2F	; 47
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!GET_BIT(SPSR,SPSR_SPIF));
    1934:	ee e2       	ldi	r30, 0x2E	; 46
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	88 23       	and	r24, r24
    193c:	dc f7       	brge	.-10     	; 0x1934 <SPI_u8Transfer+0x14>

	return SPDR;
    193e:	ef e2       	ldi	r30, 0x2F	; 47
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
}
    1944:	0f 90       	pop	r0
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <SPI_voidSetCallBack>:

void SPI_voidSetCallBack( void (*PtrToFunc) (void) ){
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <SPI_voidSetCallBack+0x6>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
	Global_pvSPICallBack = PtrToFunc;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	90 93 f7 01 	sts	0x01F7, r25
    1962:	80 93 f6 01 	sts	0x01F6, r24
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <SPI_u8ReadDataISR>:

u8 SPI_u8ReadDataISR(void){
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    1978:	ef e2       	ldi	r30, 0x2F	; 47
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
}
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <SPI_voidSendDataISR>:

void SPI_voidSendDataISR(u8 Copy_Data){
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	0f 92       	push	r0
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_Data;
    1990:	ef e2       	ldi	r30, 0x2F	; 47
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	80 83       	st	Z, r24
}
    1998:	0f 90       	pop	r0
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <__vector_12>:

void  __vector_12 (void)	__attribute__((signal));
void  __vector_12 (void)
{
    19a0:	1f 92       	push	r1
    19a2:	0f 92       	push	r0
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	0f 92       	push	r0
    19a8:	11 24       	eor	r1, r1
    19aa:	2f 93       	push	r18
    19ac:	3f 93       	push	r19
    19ae:	4f 93       	push	r20
    19b0:	5f 93       	push	r21
    19b2:	6f 93       	push	r22
    19b4:	7f 93       	push	r23
    19b6:	8f 93       	push	r24
    19b8:	9f 93       	push	r25
    19ba:	af 93       	push	r26
    19bc:	bf 93       	push	r27
    19be:	ef 93       	push	r30
    19c0:	ff 93       	push	r31
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvSPICallBack != NULL)
    19ca:	80 91 f6 01 	lds	r24, 0x01F6
    19ce:	90 91 f7 01 	lds	r25, 0x01F7
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	29 f0       	breq	.+10     	; 0x19e0 <__vector_12+0x40>
	{
		Global_pvSPICallBack();
    19d6:	e0 91 f6 01 	lds	r30, 0x01F6
    19da:	f0 91 f7 01 	lds	r31, 0x01F7
    19de:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	ff 91       	pop	r31
    19e6:	ef 91       	pop	r30
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	9f 91       	pop	r25
    19ee:	8f 91       	pop	r24
    19f0:	7f 91       	pop	r23
    19f2:	6f 91       	pop	r22
    19f4:	5f 91       	pop	r21
    19f6:	4f 91       	pop	r20
    19f8:	3f 91       	pop	r19
    19fa:	2f 91       	pop	r18
    19fc:	0f 90       	pop	r0
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	0f 90       	pop	r0
    1a02:	1f 90       	pop	r1
    1a04:	18 95       	reti

00001a06 <I2C_Master_voidInit>:

#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/I2C_Interface.h"

void I2C_Master_voidInit(void){
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
#if I2C_PRESCALER == I2C_PRESCALER_1
	/*Set Prescaler Values*/
	CLR_BIT(TWSR, TWSR_TWPS0);
    1a0e:	a1 e2       	ldi	r26, 0x21	; 33
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e1 e2       	ldi	r30, 0x21	; 33
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8e 7f       	andi	r24, 0xFE	; 254
    1a1a:	8c 93       	st	X, r24
	CLR_BIT(TWSR, TWSR_TWPS1);
    1a1c:	a1 e2       	ldi	r26, 0x21	; 33
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e1 e2       	ldi	r30, 0x21	; 33
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8d 7f       	andi	r24, 0xFD	; 253
    1a28:	8c 93       	st	X, r24
	SET_BIT(TWSR, TWSR_TWPS0);
	SET_BIT(TWSR, TWSR_TWPS1);
#endif

	/*Set TWBR with the Value =>100KHZ*/
	TWBR = I2C_TWBR_VALUE;
    1a2a:	e0 e2       	ldi	r30, 0x20	; 32
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	88 e4       	ldi	r24, 0x48	; 72
    1a30:	80 83       	st	Z, r24

	/*Enable  I2C*/
	SET_BIT(TWCR,TWCR_TWEN);
    1a32:	a6 e5       	ldi	r26, 0x56	; 86
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e6 e5       	ldi	r30, 0x56	; 86
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	84 60       	ori	r24, 0x04	; 4
    1a3e:	8c 93       	st	X, r24
}
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <I2C_Slave_voidInit>:

void I2C_Slave_voidInit(u8 I2C_Address){
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	89 83       	std	Y+1, r24	; 0x01
	/*Set Slave Address iN TWAR*/
	TWAR = I2C_Address;
    1a52:	e2 e2       	ldi	r30, 0x22	; 34
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	Set_Bit(TWCR,TWCR_TWEA);
    1a5a:	a6 e5       	ldi	r26, 0x56	; 86
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e6 e5       	ldi	r30, 0x56	; 86
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	80 64       	ori	r24, 0x40	; 64
    1a66:	8c 93       	st	X, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	Clear_Bit(TWCR,TWCR_TWEA);
#endif
	/*Enable I2C*/
	SET_BIT(TWCR, TWCR_TWEN);
    1a68:	a6 e5       	ldi	r26, 0x56	; 86
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e6 e5       	ldi	r30, 0x56	; 86
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	84 60       	ori	r24, 0x04	; 4
    1a74:	8c 93       	st	X, r24
}
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <I2C_Master_enuSendStartCond>:

I2C_Error_State I2C_Master_enuSendStartCond(void){
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	0f 92       	push	r0
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    1a88:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1a8a:	e6 e5       	ldi	r30, 0x56	; 86
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	84 ee       	ldi	r24, 0xE4	; 228
    1a90:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1a92:	e6 e5       	ldi	r30, 0x56	; 86
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	88 23       	and	r24, r24
    1a9a:	dc f7       	brge	.-10     	; 0x1a92 <I2C_Master_enuSendStartCond+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MTXCheckStart){
    1a9c:	e1 e2       	ldi	r30, 0x21	; 33
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 2f       	mov	r24, r24
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	88 7f       	andi	r24, 0xF8	; 248
    1aa8:	90 70       	andi	r25, 0x00	; 0
    1aaa:	88 30       	cpi	r24, 0x08	; 8
    1aac:	91 05       	cpc	r25, r1
    1aae:	11 f0       	breq	.+4      	; 0x1ab4 <I2C_Master_enuSendStartCond+0x36>
		state = ErrorStartCondition;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <I2C_Master_enuSendRepeatedStartCond>:

I2C_Error_State I2C_Master_enuSendRepeatedStartCond(void){
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	0f 92       	push	r0
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    1ac8:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1aca:	e6 e5       	ldi	r30, 0x56	; 86
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	84 ee       	ldi	r24, 0xE4	; 228
    1ad0:	80 83       	st	Z, r24
#elif I2C_ACK_MODE == ACK_DISABLE
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWSTA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif
	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1ad2:	e6 e5       	ldi	r30, 0x56	; 86
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	88 23       	and	r24, r24
    1ada:	dc f7       	brge	.-10     	; 0x1ad2 <I2C_Master_enuSendRepeatedStartCond+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MTXCheckReStart){
    1adc:	e1 e2       	ldi	r30, 0x21	; 33
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	88 7f       	andi	r24, 0xF8	; 248
    1ae8:	90 70       	andi	r25, 0x00	; 0
    1aea:	80 31       	cpi	r24, 0x10	; 16
    1aec:	91 05       	cpc	r25, r1
    1aee:	11 f0       	breq	.+4      	; 0x1af4 <I2C_Master_enuSendRepeatedStartCond+0x36>
		state = ErrorRestartCondition;
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <I2C_Master_enuSendSlaveAddressWithRead>:


I2C_Error_State I2C_Master_enuSendSlaveAddressWithRead(u8 I2C_Address){
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <I2C_Master_enuSendSlaveAddressWithRead+0x6>
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
    1b0a:	19 82       	std	Y+1, r1	; 0x01

	/*Load the slave address*/
	TWDR = I2C_Address;
    1b0c:	e3 e2       	ldi	r30, 0x23	; 35
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	80 83       	st	Z, r24
	/*Select the read mode*/
	SET_BIT(TWDR, 0);
    1b14:	a3 e2       	ldi	r26, 0x23	; 35
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e3 e2       	ldi	r30, 0x23	; 35
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	81 60       	ori	r24, 0x01	; 1
    1b20:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1b22:	e6 e5       	ldi	r30, 0x56	; 86
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	84 ec       	ldi	r24, 0xC4	; 196
    1b28:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1b2a:	e6 e5       	ldi	r30, 0x56	; 86
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	88 23       	and	r24, r24
    1b32:	dc f7       	brge	.-10     	; 0x1b2a <I2C_Master_enuSendSlaveAddressWithRead+0x2c>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithAck){
    1b34:	e1 e2       	ldi	r30, 0x21	; 33
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	88 7f       	andi	r24, 0xF8	; 248
    1b40:	90 70       	andi	r25, 0x00	; 0
    1b42:	80 34       	cpi	r24, 0x40	; 64
    1b44:	91 05       	cpc	r25, r1
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <I2C_Master_enuSendSlaveAddressWithRead+0x4e>
		state = ErrorSlaveAddressReadWithAck;
    1b48:	85 e0       	ldi	r24, 0x05	; 5
    1b4a:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MRXCheckSLA_R_WithOutAck){
		state = ErrorSlaveAddressReadWithoutAck;
	}
#endif
	return state;
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <I2C_Master_enuSendSlaveAddressWithWrite>:

I2C_Error_State I2C_Master_enuSendSlaveAddressWithWrite(u8 I2C_Address){
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <I2C_Master_enuSendSlaveAddressWithWrite+0x6>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
    1b64:	19 82       	std	Y+1, r1	; 0x01
	/*Load the slave address*/
	TWDR = I2C_Address;
    1b66:	e3 e2       	ldi	r30, 0x23	; 35
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	80 83       	st	Z, r24

	/*Select the write mode*/
	CLR_BIT(TWDR, 0);
    1b6e:	a3 e2       	ldi	r26, 0x23	; 35
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e3 e2       	ldi	r30, 0x23	; 35
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	8e 7f       	andi	r24, 0xFE	; 254
    1b7a:	8c 93       	st	X, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1b7c:	e6 e5       	ldi	r30, 0x56	; 86
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	84 ec       	ldi	r24, 0xC4	; 196
    1b82:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1b84:	e6 e5       	ldi	r30, 0x56	; 86
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 23       	and	r24, r24
    1b8c:	dc f7       	brge	.-10     	; 0x1b84 <I2C_Master_enuSendSlaveAddressWithWrite+0x2c>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithAck){
    1b8e:	e1 e2       	ldi	r30, 0x21	; 33
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	88 2f       	mov	r24, r24
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	88 7f       	andi	r24, 0xF8	; 248
    1b9a:	90 70       	andi	r25, 0x00	; 0
    1b9c:	88 31       	cpi	r24, 0x18	; 24
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	11 f0       	breq	.+4      	; 0x1ba6 <I2C_Master_enuSendSlaveAddressWithWrite+0x4e>
		state = ErrorSlaveAddressWriteWithAck;
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MTXCheckSLA_W_WithOutAck){
		state = ErrorSlaveAddressWriteWithoutAck;
	}
#endif
	return state;
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <I2C_Master_enuSendu8Data>:


I2C_Error_State I2C_Master_enuSendu8Data(u8 I2C_Data){
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <I2C_Master_enuSendu8Data+0x6>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
	I2C_Error_State state = NoError;
    1bbe:	19 82       	std	Y+1, r1	; 0x01

	/*Load the data*/
	TWDR = I2C_Data;
    1bc0:	e3 e2       	ldi	r30, 0x23	; 35
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	80 83       	st	Z, r24

#if I2C_ACK_MODE == ACK_ENABLE
	/*Enable  ACK*/
	TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1bc8:	e6 e5       	ldi	r30, 0x56	; 86
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	84 ec       	ldi	r24, 0xC4	; 196
    1bce:	80 83       	st	Z, r24
	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1bd0:	e6 e5       	ldi	r30, 0x56	; 86
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	88 23       	and	r24, r24
    1bd8:	dc f7       	brge	.-10     	; 0x1bd0 <I2C_Master_enuSendu8Data+0x1e>

	/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
	if((TWSR & 0xF8) != I2C_MTXCheckData_WithAck){
    1bda:	e1 e2       	ldi	r30, 0x21	; 33
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	88 7f       	andi	r24, 0xF8	; 248
    1be6:	90 70       	andi	r25, 0x00	; 0
    1be8:	88 32       	cpi	r24, 0x28	; 40
    1bea:	91 05       	cpc	r25, r1
    1bec:	11 f0       	breq	.+4      	; 0x1bf2 <I2C_Master_enuSendu8Data+0x40>
		state = ErrorWriteDataWithAck;
    1bee:	87 e0       	ldi	r24, 0x07	; 7
    1bf0:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
	if((TWSR & 0xF8) != I2C_MTXCheckData_WithOutAck){
		state = ErrorWriteDataWithoutAck;
	}
#endif
	return state;
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <I2C_Master_enuReadu8Data>:

I2C_Error_State I2C_Master_enuReadu8Data(u8* I2C_Data){
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <I2C_Master_enuReadu8Data+0x6>
    1c04:	00 d0       	rcall	.+0      	; 0x1c06 <I2C_Master_enuReadu8Data+0x8>
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	9b 83       	std	Y+3, r25	; 0x03
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
	if(I2C_Data != NULL){
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	9b 81       	ldd	r25, Y+3	; 0x03
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	f9 f0       	breq	.+62     	; 0x1c54 <I2C_Master_enuReadu8Data+0x56>
		I2C_Error_State state = NoError;
    1c16:	19 82       	std	Y+1, r1	; 0x01

#if I2C_ACK_MODE == ACK_ENABLE
		/*Enable  ACK*/
		TWCR=(1<<TWCR_TWEA)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1c18:	e6 e5       	ldi	r30, 0x56	; 86
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	84 ec       	ldi	r24, 0xC4	; 196
    1c1e:	80 83       	st	Z, r24
		/*Disable  ACK*/
		TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
#endif

		/*Wait for the flag*/
		while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1c20:	e6 e5       	ldi	r30, 0x56	; 86
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	88 23       	and	r24, r24
    1c28:	dc f7       	brge	.-10     	; 0x1c20 <I2C_Master_enuReadu8Data+0x22>

		/*Check Status*/
#if I2C_ACK_MODE == ACK_ENABLE
		if((TWSR & 0xF8) != I2C_MRXCheckData_WithAck){
    1c2a:	e1 e2       	ldi	r30, 0x21	; 33
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	88 7f       	andi	r24, 0xF8	; 248
    1c36:	90 70       	andi	r25, 0x00	; 0
    1c38:	80 35       	cpi	r24, 0x50	; 80
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	11 f0       	breq	.+4      	; 0x1c42 <I2C_Master_enuReadu8Data+0x44>
			state = ErrorReadDataWithAck;
    1c3e:	89 e0       	ldi	r24, 0x09	; 9
    1c40:	89 83       	std	Y+1, r24	; 0x01
#elif  I2C_ACK_MODE == ACK_DISABLE
		if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
			state = ErrorReadDataWithoutAck;
		}
#endif
		*I2C_Data = TWDR;
    1c42:	e3 e2       	ldi	r30, 0x23	; 35
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4c:	80 83       	st	Z, r24
		return state;
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	8c 83       	std	Y+4, r24	; 0x04
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <I2C_Master_enuReadu8Data+0x5a>
	}

	return -1;
    1c54:	8f ef       	ldi	r24, 0xFF	; 255
    1c56:	8c 83       	std	Y+4, r24	; 0x04
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <I2C_Master_voidFlush>:
I2C_Error_State I2C_Master_voidFlush(){
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	0f 92       	push	r0
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
	I2C_Error_State state = NoError;
    1c72:	19 82       	std	Y+1, r1	; 0x01

	/*Disable  ACK*/
	TWCR=(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1c74:	e6 e5       	ldi	r30, 0x56	; 86
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	84 e8       	ldi	r24, 0x84	; 132
    1c7a:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWINT) == 0);
    1c7c:	e6 e5       	ldi	r30, 0x56	; 86
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	88 23       	and	r24, r24
    1c84:	dc f7       	brge	.-10     	; 0x1c7c <I2C_Master_voidFlush+0x14>

	/*Check Status*/
	if((TWSR & 0xF8) != I2C_MRXCheckData_WithOutAck){
    1c86:	e1 e2       	ldi	r30, 0x21	; 33
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	88 7f       	andi	r24, 0xF8	; 248
    1c92:	90 70       	andi	r25, 0x00	; 0
    1c94:	88 35       	cpi	r24, 0x58	; 88
    1c96:	91 05       	cpc	r25, r1
    1c98:	11 f0       	breq	.+4      	; 0x1c9e <I2C_Master_voidFlush+0x36>
		state = ErrorReadDataWithoutAck;
    1c9a:	8a e0       	ldi	r24, 0x0A	; 10
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <I2C_Master_enuSendStopCond>:

void I2C_Master_enuSendStopCond(void){
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWCR_TWSTO)|(1<<TWCR_TWEN)|(1<<TWCR_TWINT);
    1cb0:	e6 e5       	ldi	r30, 0x56	; 86
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	84 e9       	ldi	r24, 0x94	; 148
    1cb6:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWCR,TWCR_TWSTO) == 1);
    1cb8:	e6 e5       	ldi	r30, 0x56	; 86
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	82 95       	swap	r24
    1cc0:	8f 70       	andi	r24, 0x0F	; 15
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	81 70       	andi	r24, 0x01	; 1
    1cc8:	90 70       	andi	r25, 0x00	; 0
    1cca:	88 23       	and	r24, r24
    1ccc:	a9 f7       	brne	.-22     	; 0x1cb8 <I2C_Master_enuSendStopCond+0x10>

}
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <I2C_Slave_enuReadu8Data>:

I2C_Error_State I2C_Slave_enuReadu8Data(u8* I2C_Data){
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <I2C_Slave_enuReadu8Data+0x6>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01

	return 0;
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
}
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <GIE_voidEnable>:

#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/GIE_Interface.h"

void GIE_voidEnable(){
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, SREG_I);
    1cf6:	af e5       	ldi	r26, 0x5F	; 95
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	ef e5       	ldi	r30, 0x5F	; 95
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	80 68       	ori	r24, 0x80	; 128
    1d02:	8c 93       	st	X, r24
}
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <GIE_voidDisable>:

void GIE_voidDisable(){
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, SREG_I);
    1d12:	af e5       	ldi	r26, 0x5F	; 95
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	ef e5       	ldi	r30, 0x5F	; 95
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 77       	andi	r24, 0x7F	; 127
    1d1e:	8c 93       	st	X, r24
}
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <EXTI0_voidInit>:
void (*Global_EXTI0_CallBack)(void)= NULL;
void (*Global_EXTI1_CallBack)(void)= NULL;
void (*Global_EXTI2_CallBack)(void)= NULL;

//init the INT with sensing mood in preprocessing stage
void EXTI0_voidInit(void){
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);

#elif 	INT0_SENSE == EXTI_RISING

	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1d2e:	a5 e5       	ldi	r26, 0x55	; 85
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e5 e5       	ldi	r30, 0x55	; 85
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	81 60       	ori	r24, 0x01	; 1
    1d3a:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1d3c:	a5 e5       	ldi	r26, 0x55	; 85
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e5 e5       	ldi	r30, 0x55	; 85
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	82 60       	ori	r24, 0x02	; 2
    1d48:	8c 93       	st	X, r24

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <EXTI1_voidInit>:
void EXTI1_voidInit(void){
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);

#elif 	INT1_SENSE == EXTI_RISING

	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1d58:	a5 e5       	ldi	r26, 0x55	; 85
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e5 e5       	ldi	r30, 0x55	; 85
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	84 60       	ori	r24, 0x04	; 4
    1d64:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1d66:	a5 e5       	ldi	r26, 0x55	; 85
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e5 e5       	ldi	r30, 0x55	; 85
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	88 60       	ori	r24, 0x08	; 8
    1d72:	8c 93       	st	X, r24

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <EXTI2_voidInit>:
void EXTI2_voidInit(void){
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	/*Check sense control of Pin INT0*/
#if 	INT2_SENSE == EXTI_FALLING
	CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);

#elif 	INT2_SENSE == EXTI_RISING
	SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    1d82:	a4 e5       	ldi	r26, 0x54	; 84
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e4 e5       	ldi	r30, 0x54	; 84
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	80 64       	ori	r24, 0x40	; 64
    1d8e:	8c 93       	st	X, r24

#else
#error "WRONG SENSE CONTROL CONFIGURATION FOR INT0"
#endif
}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <EXTI0_voidEnable>:

//enable EXTI
void EXTI0_voidEnable(void){
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1d9e:	ab e5       	ldi	r26, 0x5B	; 91
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	eb e5       	ldi	r30, 0x5B	; 91
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 64       	ori	r24, 0x40	; 64
    1daa:	8c 93       	st	X, r24
}
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <EXTI1_voidEnable>:
void EXTI1_voidEnable(void){
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1dba:	ab e5       	ldi	r26, 0x5B	; 91
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	eb e5       	ldi	r30, 0x5B	; 91
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 68       	ori	r24, 0x80	; 128
    1dc6:	8c 93       	st	X, r24
}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <EXTI2_voidEnable>:
void EXTI2_voidEnable(void){
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_GICR,EXTI_GICR_INT2);
    1dd6:	ab e5       	ldi	r26, 0x5B	; 91
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	eb e5       	ldi	r30, 0x5B	; 91
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	80 62       	ori	r24, 0x20	; 32
    1de2:	8c 93       	st	X, r24
}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <EXTI0_voidDisable>:

//disable EXTI
void EXTI0_voidDisable(void){
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT0);
    1df2:	ab e5       	ldi	r26, 0x5B	; 91
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	eb e5       	ldi	r30, 0x5B	; 91
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8f 7b       	andi	r24, 0xBF	; 191
    1dfe:	8c 93       	st	X, r24
}
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <EXTI1_voidDisable>:
void EXTI1_voidDisable(void){
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT1);
    1e0e:	ab e5       	ldi	r26, 0x5B	; 91
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	eb e5       	ldi	r30, 0x5B	; 91
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8f 77       	andi	r24, 0x7F	; 127
    1e1a:	8c 93       	st	X, r24
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <EXTI2_voidDisable>:
void EXTI2_voidDisable(void){
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_GICR,EXTI_GICR_INT2);
    1e2a:	ab e5       	ldi	r26, 0x5B	; 91
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e5       	ldi	r30, 0x5B	; 91
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 7d       	andi	r24, 0xDF	; 223
    1e36:	8c 93       	st	X, r24
}
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <EXTI0_voidSetSignalch>:

//change the INT with sensing mood in runtime
void EXTI0_voidSetSignalch(u8 SenseCpy){
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <EXTI0_voidSetSignalch+0x6>
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	3b 83       	std	Y+3, r19	; 0x03
    1e54:	2a 83       	std	Y+2, r18	; 0x02
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	99 f1       	breq	.+102    	; 0x1ec6 <EXTI0_voidSetSignalch+0x88>
    1e60:	2a 81       	ldd	r18, Y+2	; 0x02
    1e62:	3b 81       	ldd	r19, Y+3	; 0x03
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	2c f4       	brge	.+10     	; 0x1e74 <EXTI0_voidSetSignalch+0x36>
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	c9 f1       	breq	.+114    	; 0x1ee4 <EXTI0_voidSetSignalch+0xa6>
    1e72:	46 c0       	rjmp	.+140    	; 0x1f00 <EXTI0_voidSetSignalch+0xc2>
    1e74:	2a 81       	ldd	r18, Y+2	; 0x02
    1e76:	3b 81       	ldd	r19, Y+3	; 0x03
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	31 f0       	breq	.+12     	; 0x1e8a <EXTI0_voidSetSignalch+0x4c>
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	83 30       	cpi	r24, 0x03	; 3
    1e84:	91 05       	cpc	r25, r1
    1e86:	81 f0       	breq	.+32     	; 0x1ea8 <EXTI0_voidSetSignalch+0x6a>
    1e88:	3b c0       	rjmp	.+118    	; 0x1f00 <EXTI0_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1e8a:	a5 e5       	ldi	r26, 0x55	; 85
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e5 e5       	ldi	r30, 0x55	; 85
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	8e 7f       	andi	r24, 0xFE	; 254
    1e96:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1e98:	a5 e5       	ldi	r26, 0x55	; 85
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e5 e5       	ldi	r30, 0x55	; 85
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	82 60       	ori	r24, 0x02	; 2
    1ea4:	8c 93       	st	X, r24
    1ea6:	2c c0       	rjmp	.+88     	; 0x1f00 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1ea8:	a5 e5       	ldi	r26, 0x55	; 85
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e5 e5       	ldi	r30, 0x55	; 85
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1eb6:	a5 e5       	ldi	r26, 0x55	; 85
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e5 e5       	ldi	r30, 0x55	; 85
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	82 60       	ori	r24, 0x02	; 2
    1ec2:	8c 93       	st	X, r24
    1ec4:	1d c0       	rjmp	.+58     	; 0x1f00 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1ec6:	a5 e5       	ldi	r26, 0x55	; 85
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e5 e5       	ldi	r30, 0x55	; 85
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	81 60       	ori	r24, 0x01	; 1
    1ed2:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1ed4:	a5 e5       	ldi	r26, 0x55	; 85
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e5 e5       	ldi	r30, 0x55	; 85
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	8d 7f       	andi	r24, 0xFD	; 253
    1ee0:	8c 93       	st	X, r24
    1ee2:	0e c0       	rjmp	.+28     	; 0x1f00 <EXTI0_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC00);
    1ee4:	a5 e5       	ldi	r26, 0x55	; 85
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e5 e5       	ldi	r30, 0x55	; 85
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	8e 7f       	andi	r24, 0xFE	; 254
    1ef0:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC01);
    1ef2:	a5 e5       	ldi	r26, 0x55	; 85
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e5 e5       	ldi	r30, 0x55	; 85
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8d 7f       	andi	r24, 0xFD	; 253
    1efe:	8c 93       	st	X, r24
		break;
	}
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <EXTI1_voidSetSignalch>:
void EXTI1_voidSetSignalch(u8 SenseCpy){
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <EXTI1_voidSetSignalch+0x6>
    1f12:	0f 92       	push	r0
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	3b 83       	std	Y+3, r19	; 0x03
    1f22:	2a 83       	std	Y+2, r18	; 0x02
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	9b 81       	ldd	r25, Y+3	; 0x03
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	99 f1       	breq	.+102    	; 0x1f94 <EXTI1_voidSetSignalch+0x88>
    1f2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f30:	3b 81       	ldd	r19, Y+3	; 0x03
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <EXTI1_voidSetSignalch+0x36>
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	c9 f1       	breq	.+114    	; 0x1fb2 <EXTI1_voidSetSignalch+0xa6>
    1f40:	46 c0       	rjmp	.+140    	; 0x1fce <EXTI1_voidSetSignalch+0xc2>
    1f42:	2a 81       	ldd	r18, Y+2	; 0x02
    1f44:	3b 81       	ldd	r19, Y+3	; 0x03
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	31 05       	cpc	r19, r1
    1f4a:	31 f0       	breq	.+12     	; 0x1f58 <EXTI1_voidSetSignalch+0x4c>
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	91 05       	cpc	r25, r1
    1f54:	81 f0       	breq	.+32     	; 0x1f76 <EXTI1_voidSetSignalch+0x6a>
    1f56:	3b c0       	rjmp	.+118    	; 0x1fce <EXTI1_voidSetSignalch+0xc2>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1f58:	a5 e5       	ldi	r26, 0x55	; 85
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e5 e5       	ldi	r30, 0x55	; 85
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	8b 7f       	andi	r24, 0xFB	; 251
    1f64:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1f66:	a5 e5       	ldi	r26, 0x55	; 85
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e5 e5       	ldi	r30, 0x55	; 85
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	88 60       	ori	r24, 0x08	; 8
    1f72:	8c 93       	st	X, r24
    1f74:	2c c0       	rjmp	.+88     	; 0x1fce <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1f76:	a5 e5       	ldi	r26, 0x55	; 85
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e5 e5       	ldi	r30, 0x55	; 85
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	84 60       	ori	r24, 0x04	; 4
    1f82:	8c 93       	st	X, r24
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1f84:	a5 e5       	ldi	r26, 0x55	; 85
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e5       	ldi	r30, 0x55	; 85
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 60       	ori	r24, 0x08	; 8
    1f90:	8c 93       	st	X, r24
    1f92:	1d c0       	rjmp	.+58     	; 0x1fce <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_IOC:
		SET_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1f94:	a5 e5       	ldi	r26, 0x55	; 85
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e5 e5       	ldi	r30, 0x55	; 85
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	84 60       	ori	r24, 0x04	; 4
    1fa0:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1fa2:	a5 e5       	ldi	r26, 0x55	; 85
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e5 e5       	ldi	r30, 0x55	; 85
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	87 7f       	andi	r24, 0xF7	; 247
    1fae:	8c 93       	st	X, r24
    1fb0:	0e c0       	rjmp	.+28     	; 0x1fce <EXTI1_voidSetSignalch+0xc2>
		break;
	case EXTI_LOW:
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC10);
    1fb2:	a5 e5       	ldi	r26, 0x55	; 85
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e5 e5       	ldi	r30, 0x55	; 85
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8b 7f       	andi	r24, 0xFB	; 251
    1fbe:	8c 93       	st	X, r24
		CLR_BIT(EXTI_MCUCR,EXTI_MCUCR_ISC11);
    1fc0:	a5 e5       	ldi	r26, 0x55	; 85
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e5 e5       	ldi	r30, 0x55	; 85
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	87 7f       	andi	r24, 0xF7	; 247
    1fcc:	8c 93       	st	X, r24
		break;
	}
}
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <EXTI2_voidSetSignalch>:
void EXTI2_voidSetSignalch(u8 SenseCpy){
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <EXTI2_voidSetSignalch+0x6>
    1fe0:	0f 92       	push	r0
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy){
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	3b 83       	std	Y+3, r19	; 0x03
    1ff0:	2a 83       	std	Y+2, r18	; 0x02
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	31 f0       	breq	.+12     	; 0x2008 <EXTI2_voidSetSignalch+0x2e>
    1ffc:	2a 81       	ldd	r18, Y+2	; 0x02
    1ffe:	3b 81       	ldd	r19, Y+3	; 0x03
    2000:	23 30       	cpi	r18, 0x03	; 3
    2002:	31 05       	cpc	r19, r1
    2004:	49 f0       	breq	.+18     	; 0x2018 <EXTI2_voidSetSignalch+0x3e>
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <EXTI2_voidSetSignalch+0x4c>
	case EXTI_FALLING:
		CLR_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    2008:	a4 e5       	ldi	r26, 0x54	; 84
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e4 e5       	ldi	r30, 0x54	; 84
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	8f 7b       	andi	r24, 0xBF	; 191
    2014:	8c 93       	st	X, r24
    2016:	07 c0       	rjmp	.+14     	; 0x2026 <EXTI2_voidSetSignalch+0x4c>
		break;
	case EXTI_RISING:
		SET_BIT(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    2018:	a4 e5       	ldi	r26, 0x54	; 84
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e4 e5       	ldi	r30, 0x54	; 84
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
		break;
	}
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <EXTI0_VID_SET_CALL_BACK>:

//callback function
void EXTI0_VID_SET_CALL_BACK(void (*PTR)(void)){
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	00 d0       	rcall	.+0      	; 0x2038 <EXTI0_VID_SET_CALL_BACK+0x6>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI0_CallBack = PTR;
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	90 93 f9 01 	sts	0x01F9, r25
    2048:	80 93 f8 01 	sts	0x01F8, r24
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <EXTI1_VID_SET_CALL_BACK>:
void EXTI1_VID_SET_CALL_BACK(void (*PTR)(void)){
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	00 d0       	rcall	.+0      	; 0x205c <EXTI1_VID_SET_CALL_BACK+0x6>
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI1_CallBack = PTR;
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	90 93 fb 01 	sts	0x01FB, r25
    206c:	80 93 fa 01 	sts	0x01FA, r24
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <EXTI2_VID_SET_CALL_BACK>:
void EXTI2_VID_SET_CALL_BACK(void (*PTR)(void)){
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <EXTI2_VID_SET_CALL_BACK+0x6>
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01
	Global_EXTI2_CallBack = PTR;
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	9a 81       	ldd	r25, Y+2	; 0x02
    208c:	90 93 fd 01 	sts	0x01FD, r25
    2090:	80 93 fc 01 	sts	0x01FC, r24
}
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <__vector_1>:

void __vector_1 (void){
    209e:	1f 92       	push	r1
    20a0:	0f 92       	push	r0
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	0f 92       	push	r0
    20a6:	11 24       	eor	r1, r1
    20a8:	2f 93       	push	r18
    20aa:	3f 93       	push	r19
    20ac:	4f 93       	push	r20
    20ae:	5f 93       	push	r21
    20b0:	6f 93       	push	r22
    20b2:	7f 93       	push	r23
    20b4:	8f 93       	push	r24
    20b6:	9f 93       	push	r25
    20b8:	af 93       	push	r26
    20ba:	bf 93       	push	r27
    20bc:	ef 93       	push	r30
    20be:	ff 93       	push	r31
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI0_CallBack != NULL){
    20c8:	80 91 f8 01 	lds	r24, 0x01F8
    20cc:	90 91 f9 01 	lds	r25, 0x01F9
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	29 f0       	breq	.+10     	; 0x20de <__vector_1+0x40>
		Global_EXTI0_CallBack();
    20d4:	e0 91 f8 01 	lds	r30, 0x01F8
    20d8:	f0 91 f9 01 	lds	r31, 0x01F9
    20dc:	09 95       	icall
	}
}
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	ff 91       	pop	r31
    20e4:	ef 91       	pop	r30
    20e6:	bf 91       	pop	r27
    20e8:	af 91       	pop	r26
    20ea:	9f 91       	pop	r25
    20ec:	8f 91       	pop	r24
    20ee:	7f 91       	pop	r23
    20f0:	6f 91       	pop	r22
    20f2:	5f 91       	pop	r21
    20f4:	4f 91       	pop	r20
    20f6:	3f 91       	pop	r19
    20f8:	2f 91       	pop	r18
    20fa:	0f 90       	pop	r0
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	0f 90       	pop	r0
    2100:	1f 90       	pop	r1
    2102:	18 95       	reti

00002104 <__vector_2>:
void __vector_2 (void){
    2104:	1f 92       	push	r1
    2106:	0f 92       	push	r0
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	0f 92       	push	r0
    210c:	11 24       	eor	r1, r1
    210e:	2f 93       	push	r18
    2110:	3f 93       	push	r19
    2112:	4f 93       	push	r20
    2114:	5f 93       	push	r21
    2116:	6f 93       	push	r22
    2118:	7f 93       	push	r23
    211a:	8f 93       	push	r24
    211c:	9f 93       	push	r25
    211e:	af 93       	push	r26
    2120:	bf 93       	push	r27
    2122:	ef 93       	push	r30
    2124:	ff 93       	push	r31
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI1_CallBack != NULL){
    212e:	80 91 fa 01 	lds	r24, 0x01FA
    2132:	90 91 fb 01 	lds	r25, 0x01FB
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	29 f0       	breq	.+10     	; 0x2144 <__vector_2+0x40>
		Global_EXTI1_CallBack();
    213a:	e0 91 fa 01 	lds	r30, 0x01FA
    213e:	f0 91 fb 01 	lds	r31, 0x01FB
    2142:	09 95       	icall
	}
}
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	ff 91       	pop	r31
    214a:	ef 91       	pop	r30
    214c:	bf 91       	pop	r27
    214e:	af 91       	pop	r26
    2150:	9f 91       	pop	r25
    2152:	8f 91       	pop	r24
    2154:	7f 91       	pop	r23
    2156:	6f 91       	pop	r22
    2158:	5f 91       	pop	r21
    215a:	4f 91       	pop	r20
    215c:	3f 91       	pop	r19
    215e:	2f 91       	pop	r18
    2160:	0f 90       	pop	r0
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	0f 90       	pop	r0
    2166:	1f 90       	pop	r1
    2168:	18 95       	reti

0000216a <__vector_3>:
void __vector_3 (void){
    216a:	1f 92       	push	r1
    216c:	0f 92       	push	r0
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	0f 92       	push	r0
    2172:	11 24       	eor	r1, r1
    2174:	2f 93       	push	r18
    2176:	3f 93       	push	r19
    2178:	4f 93       	push	r20
    217a:	5f 93       	push	r21
    217c:	6f 93       	push	r22
    217e:	7f 93       	push	r23
    2180:	8f 93       	push	r24
    2182:	9f 93       	push	r25
    2184:	af 93       	push	r26
    2186:	bf 93       	push	r27
    2188:	ef 93       	push	r30
    218a:	ff 93       	push	r31
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
	if(Global_EXTI2_CallBack != NULL){
    2194:	80 91 fc 01 	lds	r24, 0x01FC
    2198:	90 91 fd 01 	lds	r25, 0x01FD
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	29 f0       	breq	.+10     	; 0x21aa <__vector_3+0x40>
		Global_EXTI2_CallBack();
    21a0:	e0 91 fc 01 	lds	r30, 0x01FC
    21a4:	f0 91 fd 01 	lds	r31, 0x01FD
    21a8:	09 95       	icall
	}
}
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	ff 91       	pop	r31
    21b0:	ef 91       	pop	r30
    21b2:	bf 91       	pop	r27
    21b4:	af 91       	pop	r26
    21b6:	9f 91       	pop	r25
    21b8:	8f 91       	pop	r24
    21ba:	7f 91       	pop	r23
    21bc:	6f 91       	pop	r22
    21be:	5f 91       	pop	r21
    21c0:	4f 91       	pop	r20
    21c2:	3f 91       	pop	r19
    21c4:	2f 91       	pop	r18
    21c6:	0f 90       	pop	r0
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	0f 90       	pop	r0
    21cc:	1f 90       	pop	r1
    21ce:	18 95       	reti

000021d0 <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	6c ea       	ldi	r22, 0xAC	; 172
    21dc:	0e 94 31 14 	call	0x2862	; 0x2862 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	6f ef       	ldi	r22, 0xFF	; 255
    21e4:	0e 94 31 14 	call	0x2862	; 0x2862 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
    21e8:	83 e0       	ldi	r24, 0x03	; 3
    21ea:	62 e0       	ldi	r22, 0x02	; 2
    21ec:	0e 94 31 14 	call	0x2862	; 0x2862 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
    21f0:	84 e0       	ldi	r24, 0x04	; 4
    21f2:	6c ef       	ldi	r22, 0xFC	; 252
    21f4:	0e 94 31 14 	call	0x2862	; 0x2862 <DIO_voidSetPortDir>
}
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	27 97       	sbiw	r28, 0x07	; 7
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	6a 83       	std	Y+2, r22	; 0x02
    2216:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	85 30       	cpi	r24, 0x05	; 5
    221c:	08 f0       	brcs	.+2      	; 0x2220 <DIO_voidSetPinDir+0x22>
    221e:	f4 c0       	rjmp	.+488    	; 0x2408 <DIO_voidSetPinDir+0x20a>
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	88 23       	and	r24, r24
    2224:	09 f4       	brne	.+2      	; 0x2228 <DIO_voidSetPinDir+0x2a>
    2226:	f0 c0       	rjmp	.+480    	; 0x2408 <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	88 30       	cpi	r24, 0x08	; 8
    222c:	08 f0       	brcs	.+2      	; 0x2230 <DIO_voidSetPinDir+0x32>
    222e:	ec c0       	rjmp	.+472    	; 0x2408 <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	09 f0       	breq	.+2      	; 0x2238 <DIO_voidSetPinDir+0x3a>
    2236:	70 c0       	rjmp	.+224    	; 0x2318 <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	3f 83       	std	Y+7, r19	; 0x07
    2240:	2e 83       	std	Y+6, r18	; 0x06
    2242:	8e 81       	ldd	r24, Y+6	; 0x06
    2244:	9f 81       	ldd	r25, Y+7	; 0x07
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	91 05       	cpc	r25, r1
    224a:	51 f1       	breq	.+84     	; 0x22a0 <DIO_voidSetPinDir+0xa2>
    224c:	2e 81       	ldd	r18, Y+6	; 0x06
    224e:	3f 81       	ldd	r19, Y+7	; 0x07
    2250:	23 30       	cpi	r18, 0x03	; 3
    2252:	31 05       	cpc	r19, r1
    2254:	34 f4       	brge	.+12     	; 0x2262 <DIO_voidSetPinDir+0x64>
    2256:	8e 81       	ldd	r24, Y+6	; 0x06
    2258:	9f 81       	ldd	r25, Y+7	; 0x07
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	91 05       	cpc	r25, r1
    225e:	61 f0       	breq	.+24     	; 0x2278 <DIO_voidSetPinDir+0x7a>
    2260:	d3 c0       	rjmp	.+422    	; 0x2408 <DIO_voidSetPinDir+0x20a>
    2262:	2e 81       	ldd	r18, Y+6	; 0x06
    2264:	3f 81       	ldd	r19, Y+7	; 0x07
    2266:	23 30       	cpi	r18, 0x03	; 3
    2268:	31 05       	cpc	r19, r1
    226a:	71 f1       	breq	.+92     	; 0x22c8 <DIO_voidSetPinDir+0xca>
    226c:	8e 81       	ldd	r24, Y+6	; 0x06
    226e:	9f 81       	ldd	r25, Y+7	; 0x07
    2270:	84 30       	cpi	r24, 0x04	; 4
    2272:	91 05       	cpc	r25, r1
    2274:	e9 f1       	breq	.+122    	; 0x22f0 <DIO_voidSetPinDir+0xf2>
    2276:	c8 c0       	rjmp	.+400    	; 0x2408 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
    2278:	aa e3       	ldi	r26, 0x3A	; 58
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ea e3       	ldi	r30, 0x3A	; 58
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	48 2f       	mov	r20, r24
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 2e       	mov	r0, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <DIO_voidSetPinDir+0x98>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <DIO_voidSetPinDir+0x94>
    229a:	84 2b       	or	r24, r20
    229c:	8c 93       	st	X, r24
    229e:	b4 c0       	rjmp	.+360    	; 0x2408 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
    22a0:	a7 e3       	ldi	r26, 0x37	; 55
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e7 e3       	ldi	r30, 0x37	; 55
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	48 2f       	mov	r20, r24
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	02 2e       	mov	r0, r18
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <DIO_voidSetPinDir+0xc0>
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	0a 94       	dec	r0
    22c0:	e2 f7       	brpl	.-8      	; 0x22ba <DIO_voidSetPinDir+0xbc>
    22c2:	84 2b       	or	r24, r20
    22c4:	8c 93       	st	X, r24
    22c6:	a0 c0       	rjmp	.+320    	; 0x2408 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
    22c8:	a4 e3       	ldi	r26, 0x34	; 52
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e4 e3       	ldi	r30, 0x34	; 52
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	48 2f       	mov	r20, r24
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	02 2e       	mov	r0, r18
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <DIO_voidSetPinDir+0xe8>
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	0a 94       	dec	r0
    22e8:	e2 f7       	brpl	.-8      	; 0x22e2 <DIO_voidSetPinDir+0xe4>
    22ea:	84 2b       	or	r24, r20
    22ec:	8c 93       	st	X, r24
    22ee:	8c c0       	rjmp	.+280    	; 0x2408 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
    22f0:	a1 e3       	ldi	r26, 0x31	; 49
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e1 e3       	ldi	r30, 0x31	; 49
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	48 2f       	mov	r20, r24
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 2e       	mov	r0, r18
    2308:	02 c0       	rjmp	.+4      	; 0x230e <DIO_voidSetPinDir+0x110>
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	0a 94       	dec	r0
    2310:	e2 f7       	brpl	.-8      	; 0x230a <DIO_voidSetPinDir+0x10c>
    2312:	84 2b       	or	r24, r20
    2314:	8c 93       	st	X, r24
    2316:	78 c0       	rjmp	.+240    	; 0x2408 <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	88 23       	and	r24, r24
    231c:	09 f0       	breq	.+2      	; 0x2320 <DIO_voidSetPinDir+0x122>
    231e:	74 c0       	rjmp	.+232    	; 0x2408 <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	28 2f       	mov	r18, r24
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	3d 83       	std	Y+5, r19	; 0x05
    2328:	2c 83       	std	Y+4, r18	; 0x04
    232a:	8c 81       	ldd	r24, Y+4	; 0x04
    232c:	9d 81       	ldd	r25, Y+5	; 0x05
    232e:	82 30       	cpi	r24, 0x02	; 2
    2330:	91 05       	cpc	r25, r1
    2332:	61 f1       	breq	.+88     	; 0x238c <DIO_voidSetPinDir+0x18e>
    2334:	2c 81       	ldd	r18, Y+4	; 0x04
    2336:	3d 81       	ldd	r19, Y+5	; 0x05
    2338:	23 30       	cpi	r18, 0x03	; 3
    233a:	31 05       	cpc	r19, r1
    233c:	34 f4       	brge	.+12     	; 0x234a <DIO_voidSetPinDir+0x14c>
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	9d 81       	ldd	r25, Y+5	; 0x05
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	91 05       	cpc	r25, r1
    2346:	69 f0       	breq	.+26     	; 0x2362 <DIO_voidSetPinDir+0x164>
    2348:	5f c0       	rjmp	.+190    	; 0x2408 <DIO_voidSetPinDir+0x20a>
    234a:	2c 81       	ldd	r18, Y+4	; 0x04
    234c:	3d 81       	ldd	r19, Y+5	; 0x05
    234e:	23 30       	cpi	r18, 0x03	; 3
    2350:	31 05       	cpc	r19, r1
    2352:	89 f1       	breq	.+98     	; 0x23b6 <DIO_voidSetPinDir+0x1b8>
    2354:	8c 81       	ldd	r24, Y+4	; 0x04
    2356:	9d 81       	ldd	r25, Y+5	; 0x05
    2358:	84 30       	cpi	r24, 0x04	; 4
    235a:	91 05       	cpc	r25, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <DIO_voidSetPinDir+0x162>
    235e:	40 c0       	rjmp	.+128    	; 0x23e0 <DIO_voidSetPinDir+0x1e2>
    2360:	53 c0       	rjmp	.+166    	; 0x2408 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
    2362:	aa e3       	ldi	r26, 0x3A	; 58
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	ea e3       	ldi	r30, 0x3A	; 58
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	48 2f       	mov	r20, r24
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	02 2e       	mov	r0, r18
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <DIO_voidSetPinDir+0x182>
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	0a 94       	dec	r0
    2382:	e2 f7       	brpl	.-8      	; 0x237c <DIO_voidSetPinDir+0x17e>
    2384:	80 95       	com	r24
    2386:	84 23       	and	r24, r20
    2388:	8c 93       	st	X, r24
    238a:	3e c0       	rjmp	.+124    	; 0x2408 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
    238c:	a7 e3       	ldi	r26, 0x37	; 55
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e7 e3       	ldi	r30, 0x37	; 55
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	48 2f       	mov	r20, r24
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <DIO_voidSetPinDir+0x1ac>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <DIO_voidSetPinDir+0x1a8>
    23ae:	80 95       	com	r24
    23b0:	84 23       	and	r24, r20
    23b2:	8c 93       	st	X, r24
    23b4:	29 c0       	rjmp	.+82     	; 0x2408 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
    23b6:	a4 e3       	ldi	r26, 0x34	; 52
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e4 e3       	ldi	r30, 0x34	; 52
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 2e       	mov	r0, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <DIO_voidSetPinDir+0x1d6>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <DIO_voidSetPinDir+0x1d2>
    23d8:	80 95       	com	r24
    23da:	84 23       	and	r24, r20
    23dc:	8c 93       	st	X, r24
    23de:	14 c0       	rjmp	.+40     	; 0x2408 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
    23e0:	a1 e3       	ldi	r26, 0x31	; 49
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e1 e3       	ldi	r30, 0x31	; 49
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	48 2f       	mov	r20, r24
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	02 2e       	mov	r0, r18
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <DIO_voidSetPinDir+0x200>
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	0a 94       	dec	r0
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <DIO_voidSetPinDir+0x1fc>
    2402:	80 95       	com	r24
    2404:	84 23       	and	r24, r20
    2406:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    2408:	27 96       	adiw	r28, 0x07	; 7
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	27 97       	sbiw	r28, 0x07	; 7
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	6a 83       	std	Y+2, r22	; 0x02
    2432:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	85 30       	cpi	r24, 0x05	; 5
    2438:	08 f0       	brcs	.+2      	; 0x243c <DIO_voidSetPinValue+0x22>
    243a:	f4 c0       	rjmp	.+488    	; 0x2624 <DIO_voidSetPinValue+0x20a>
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	88 23       	and	r24, r24
    2440:	09 f4       	brne	.+2      	; 0x2444 <DIO_voidSetPinValue+0x2a>
    2442:	f0 c0       	rjmp	.+480    	; 0x2624 <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	88 30       	cpi	r24, 0x08	; 8
    2448:	08 f0       	brcs	.+2      	; 0x244c <DIO_voidSetPinValue+0x32>
    244a:	ec c0       	rjmp	.+472    	; 0x2624 <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	81 30       	cpi	r24, 0x01	; 1
    2450:	09 f0       	breq	.+2      	; 0x2454 <DIO_voidSetPinValue+0x3a>
    2452:	70 c0       	rjmp	.+224    	; 0x2534 <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	3f 83       	std	Y+7, r19	; 0x07
    245c:	2e 83       	std	Y+6, r18	; 0x06
    245e:	8e 81       	ldd	r24, Y+6	; 0x06
    2460:	9f 81       	ldd	r25, Y+7	; 0x07
    2462:	82 30       	cpi	r24, 0x02	; 2
    2464:	91 05       	cpc	r25, r1
    2466:	51 f1       	breq	.+84     	; 0x24bc <DIO_voidSetPinValue+0xa2>
    2468:	2e 81       	ldd	r18, Y+6	; 0x06
    246a:	3f 81       	ldd	r19, Y+7	; 0x07
    246c:	23 30       	cpi	r18, 0x03	; 3
    246e:	31 05       	cpc	r19, r1
    2470:	34 f4       	brge	.+12     	; 0x247e <DIO_voidSetPinValue+0x64>
    2472:	8e 81       	ldd	r24, Y+6	; 0x06
    2474:	9f 81       	ldd	r25, Y+7	; 0x07
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	91 05       	cpc	r25, r1
    247a:	61 f0       	breq	.+24     	; 0x2494 <DIO_voidSetPinValue+0x7a>
    247c:	d3 c0       	rjmp	.+422    	; 0x2624 <DIO_voidSetPinValue+0x20a>
    247e:	2e 81       	ldd	r18, Y+6	; 0x06
    2480:	3f 81       	ldd	r19, Y+7	; 0x07
    2482:	23 30       	cpi	r18, 0x03	; 3
    2484:	31 05       	cpc	r19, r1
    2486:	71 f1       	breq	.+92     	; 0x24e4 <DIO_voidSetPinValue+0xca>
    2488:	8e 81       	ldd	r24, Y+6	; 0x06
    248a:	9f 81       	ldd	r25, Y+7	; 0x07
    248c:	84 30       	cpi	r24, 0x04	; 4
    248e:	91 05       	cpc	r25, r1
    2490:	e9 f1       	breq	.+122    	; 0x250c <DIO_voidSetPinValue+0xf2>
    2492:	c8 c0       	rjmp	.+400    	; 0x2624 <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    2494:	ab e3       	ldi	r26, 0x3B	; 59
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	eb e3       	ldi	r30, 0x3B	; 59
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	48 2f       	mov	r20, r24
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	02 2e       	mov	r0, r18
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <DIO_voidSetPinValue+0x98>
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	0a 94       	dec	r0
    24b4:	e2 f7       	brpl	.-8      	; 0x24ae <DIO_voidSetPinValue+0x94>
    24b6:	84 2b       	or	r24, r20
    24b8:	8c 93       	st	X, r24
    24ba:	b4 c0       	rjmp	.+360    	; 0x2624 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    24bc:	a8 e3       	ldi	r26, 0x38	; 56
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e8 e3       	ldi	r30, 0x38	; 56
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	48 2f       	mov	r20, r24
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	02 2e       	mov	r0, r18
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <DIO_voidSetPinValue+0xc0>
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	0a 94       	dec	r0
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <DIO_voidSetPinValue+0xbc>
    24de:	84 2b       	or	r24, r20
    24e0:	8c 93       	st	X, r24
    24e2:	a0 c0       	rjmp	.+320    	; 0x2624 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    24e4:	a5 e3       	ldi	r26, 0x35	; 53
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e5 e3       	ldi	r30, 0x35	; 53
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	48 2f       	mov	r20, r24
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 2e       	mov	r0, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <DIO_voidSetPinValue+0xe8>
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	0a 94       	dec	r0
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <DIO_voidSetPinValue+0xe4>
    2506:	84 2b       	or	r24, r20
    2508:	8c 93       	st	X, r24
    250a:	8c c0       	rjmp	.+280    	; 0x2624 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    250c:	a2 e3       	ldi	r26, 0x32	; 50
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e2 e3       	ldi	r30, 0x32	; 50
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	48 2f       	mov	r20, r24
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 2e       	mov	r0, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <DIO_voidSetPinValue+0x110>
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	0a 94       	dec	r0
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <DIO_voidSetPinValue+0x10c>
    252e:	84 2b       	or	r24, r20
    2530:	8c 93       	st	X, r24
    2532:	78 c0       	rjmp	.+240    	; 0x2624 <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	88 23       	and	r24, r24
    2538:	09 f0       	breq	.+2      	; 0x253c <DIO_voidSetPinValue+0x122>
    253a:	74 c0       	rjmp	.+232    	; 0x2624 <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	3d 83       	std	Y+5, r19	; 0x05
    2544:	2c 83       	std	Y+4, r18	; 0x04
    2546:	8c 81       	ldd	r24, Y+4	; 0x04
    2548:	9d 81       	ldd	r25, Y+5	; 0x05
    254a:	82 30       	cpi	r24, 0x02	; 2
    254c:	91 05       	cpc	r25, r1
    254e:	61 f1       	breq	.+88     	; 0x25a8 <DIO_voidSetPinValue+0x18e>
    2550:	2c 81       	ldd	r18, Y+4	; 0x04
    2552:	3d 81       	ldd	r19, Y+5	; 0x05
    2554:	23 30       	cpi	r18, 0x03	; 3
    2556:	31 05       	cpc	r19, r1
    2558:	34 f4       	brge	.+12     	; 0x2566 <DIO_voidSetPinValue+0x14c>
    255a:	8c 81       	ldd	r24, Y+4	; 0x04
    255c:	9d 81       	ldd	r25, Y+5	; 0x05
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	91 05       	cpc	r25, r1
    2562:	69 f0       	breq	.+26     	; 0x257e <DIO_voidSetPinValue+0x164>
    2564:	5f c0       	rjmp	.+190    	; 0x2624 <DIO_voidSetPinValue+0x20a>
    2566:	2c 81       	ldd	r18, Y+4	; 0x04
    2568:	3d 81       	ldd	r19, Y+5	; 0x05
    256a:	23 30       	cpi	r18, 0x03	; 3
    256c:	31 05       	cpc	r19, r1
    256e:	89 f1       	breq	.+98     	; 0x25d2 <DIO_voidSetPinValue+0x1b8>
    2570:	8c 81       	ldd	r24, Y+4	; 0x04
    2572:	9d 81       	ldd	r25, Y+5	; 0x05
    2574:	84 30       	cpi	r24, 0x04	; 4
    2576:	91 05       	cpc	r25, r1
    2578:	09 f4       	brne	.+2      	; 0x257c <DIO_voidSetPinValue+0x162>
    257a:	40 c0       	rjmp	.+128    	; 0x25fc <DIO_voidSetPinValue+0x1e2>
    257c:	53 c0       	rjmp	.+166    	; 0x2624 <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    257e:	ab e3       	ldi	r26, 0x3B	; 59
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	eb e3       	ldi	r30, 0x3B	; 59
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	48 2f       	mov	r20, r24
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	02 2e       	mov	r0, r18
    2596:	02 c0       	rjmp	.+4      	; 0x259c <DIO_voidSetPinValue+0x182>
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	0a 94       	dec	r0
    259e:	e2 f7       	brpl	.-8      	; 0x2598 <DIO_voidSetPinValue+0x17e>
    25a0:	80 95       	com	r24
    25a2:	84 23       	and	r24, r20
    25a4:	8c 93       	st	X, r24
    25a6:	3e c0       	rjmp	.+124    	; 0x2624 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    25a8:	a8 e3       	ldi	r26, 0x38	; 56
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e8 e3       	ldi	r30, 0x38	; 56
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	48 2f       	mov	r20, r24
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	02 2e       	mov	r0, r18
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <DIO_voidSetPinValue+0x1ac>
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	0a 94       	dec	r0
    25c8:	e2 f7       	brpl	.-8      	; 0x25c2 <DIO_voidSetPinValue+0x1a8>
    25ca:	80 95       	com	r24
    25cc:	84 23       	and	r24, r20
    25ce:	8c 93       	st	X, r24
    25d0:	29 c0       	rjmp	.+82     	; 0x2624 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    25d2:	a5 e3       	ldi	r26, 0x35	; 53
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e5 e3       	ldi	r30, 0x35	; 53
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	48 2f       	mov	r20, r24
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	02 2e       	mov	r0, r18
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <DIO_voidSetPinValue+0x1d6>
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	0a 94       	dec	r0
    25f2:	e2 f7       	brpl	.-8      	; 0x25ec <DIO_voidSetPinValue+0x1d2>
    25f4:	80 95       	com	r24
    25f6:	84 23       	and	r24, r20
    25f8:	8c 93       	st	X, r24
    25fa:	14 c0       	rjmp	.+40     	; 0x2624 <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    25fc:	a2 e3       	ldi	r26, 0x32	; 50
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e2 e3       	ldi	r30, 0x32	; 50
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	48 2f       	mov	r20, r24
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	02 2e       	mov	r0, r18
    2614:	02 c0       	rjmp	.+4      	; 0x261a <DIO_voidSetPinValue+0x200>
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	0a 94       	dec	r0
    261c:	e2 f7       	brpl	.-8      	; 0x2616 <DIO_voidSetPinValue+0x1fc>
    261e:	80 95       	com	r24
    2620:	84 23       	and	r24, r20
    2622:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    2624:	27 96       	adiw	r28, 0x07	; 7
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	00 d0       	rcall	.+0      	; 0x263c <DIO_u8GetPinValue+0x6>
    263c:	00 d0       	rcall	.+0      	; 0x263e <DIO_u8GetPinValue+0x8>
    263e:	0f 92       	push	r0
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	85 30       	cpi	r24, 0x05	; 5
    264c:	08 f0       	brcs	.+2      	; 0x2650 <DIO_u8GetPinValue+0x1a>
    264e:	74 c0       	rjmp	.+232    	; 0x2738 <DIO_u8GetPinValue+0x102>
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	88 23       	and	r24, r24
    2654:	09 f4       	brne	.+2      	; 0x2658 <DIO_u8GetPinValue+0x22>
    2656:	70 c0       	rjmp	.+224    	; 0x2738 <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	88 30       	cpi	r24, 0x08	; 8
    265c:	08 f0       	brcs	.+2      	; 0x2660 <DIO_u8GetPinValue+0x2a>
    265e:	6c c0       	rjmp	.+216    	; 0x2738 <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	3d 83       	std	Y+5, r19	; 0x05
    2668:	2c 83       	std	Y+4, r18	; 0x04
    266a:	4c 81       	ldd	r20, Y+4	; 0x04
    266c:	5d 81       	ldd	r21, Y+5	; 0x05
    266e:	42 30       	cpi	r20, 0x02	; 2
    2670:	51 05       	cpc	r21, r1
    2672:	49 f1       	breq	.+82     	; 0x26c6 <DIO_u8GetPinValue+0x90>
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	9d 81       	ldd	r25, Y+5	; 0x05
    2678:	83 30       	cpi	r24, 0x03	; 3
    267a:	91 05       	cpc	r25, r1
    267c:	34 f4       	brge	.+12     	; 0x268a <DIO_u8GetPinValue+0x54>
    267e:	2c 81       	ldd	r18, Y+4	; 0x04
    2680:	3d 81       	ldd	r19, Y+5	; 0x05
    2682:	21 30       	cpi	r18, 0x01	; 1
    2684:	31 05       	cpc	r19, r1
    2686:	61 f0       	breq	.+24     	; 0x26a0 <DIO_u8GetPinValue+0x6a>
    2688:	57 c0       	rjmp	.+174    	; 0x2738 <DIO_u8GetPinValue+0x102>
    268a:	4c 81       	ldd	r20, Y+4	; 0x04
    268c:	5d 81       	ldd	r21, Y+5	; 0x05
    268e:	43 30       	cpi	r20, 0x03	; 3
    2690:	51 05       	cpc	r21, r1
    2692:	61 f1       	breq	.+88     	; 0x26ec <DIO_u8GetPinValue+0xb6>
    2694:	8c 81       	ldd	r24, Y+4	; 0x04
    2696:	9d 81       	ldd	r25, Y+5	; 0x05
    2698:	84 30       	cpi	r24, 0x04	; 4
    269a:	91 05       	cpc	r25, r1
    269c:	d1 f1       	breq	.+116    	; 0x2712 <DIO_u8GetPinValue+0xdc>
    269e:	4c c0       	rjmp	.+152    	; 0x2738 <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    26a0:	e9 e3       	ldi	r30, 0x39	; 57
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	a9 01       	movw	r20, r18
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <DIO_u8GetPinValue+0x82>
    26b4:	55 95       	asr	r21
    26b6:	47 95       	ror	r20
    26b8:	8a 95       	dec	r24
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <DIO_u8GetPinValue+0x7e>
    26bc:	ca 01       	movw	r24, r20
    26be:	58 2f       	mov	r21, r24
    26c0:	51 70       	andi	r21, 0x01	; 1
    26c2:	5b 83       	std	Y+3, r21	; 0x03
    26c4:	3b c0       	rjmp	.+118    	; 0x273c <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    26c6:	e6 e3       	ldi	r30, 0x36	; 54
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	88 2f       	mov	r24, r24
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a9 01       	movw	r20, r18
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <DIO_u8GetPinValue+0xa8>
    26da:	55 95       	asr	r21
    26dc:	47 95       	ror	r20
    26de:	8a 95       	dec	r24
    26e0:	e2 f7       	brpl	.-8      	; 0x26da <DIO_u8GetPinValue+0xa4>
    26e2:	ca 01       	movw	r24, r20
    26e4:	58 2f       	mov	r21, r24
    26e6:	51 70       	andi	r21, 0x01	; 1
    26e8:	5b 83       	std	Y+3, r21	; 0x03
    26ea:	28 c0       	rjmp	.+80     	; 0x273c <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    26ec:	e3 e3       	ldi	r30, 0x33	; 51
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a9 01       	movw	r20, r18
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <DIO_u8GetPinValue+0xce>
    2700:	55 95       	asr	r21
    2702:	47 95       	ror	r20
    2704:	8a 95       	dec	r24
    2706:	e2 f7       	brpl	.-8      	; 0x2700 <DIO_u8GetPinValue+0xca>
    2708:	ca 01       	movw	r24, r20
    270a:	58 2f       	mov	r21, r24
    270c:	51 70       	andi	r21, 0x01	; 1
    270e:	5b 83       	std	Y+3, r21	; 0x03
    2710:	15 c0       	rjmp	.+42     	; 0x273c <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    2712:	e0 e3       	ldi	r30, 0x30	; 48
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	a9 01       	movw	r20, r18
    2724:	02 c0       	rjmp	.+4      	; 0x272a <DIO_u8GetPinValue+0xf4>
    2726:	55 95       	asr	r21
    2728:	47 95       	ror	r20
    272a:	8a 95       	dec	r24
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <DIO_u8GetPinValue+0xf0>
    272e:	ca 01       	movw	r24, r20
    2730:	58 2f       	mov	r21, r24
    2732:	51 70       	andi	r21, 0x01	; 1
    2734:	5b 83       	std	Y+3, r21	; 0x03
    2736:	02 c0       	rjmp	.+4      	; 0x273c <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    2738:	8f ef       	ldi	r24, 0xFF	; 255
    273a:	8b 83       	std	Y+3, r24	; 0x03
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	00 d0       	rcall	.+0      	; 0x2754 <DIO_voidTogglePin+0x6>
    2754:	00 d0       	rcall	.+0      	; 0x2756 <DIO_voidTogglePin+0x8>
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	85 30       	cpi	r24, 0x05	; 5
    2762:	08 f0       	brcs	.+2      	; 0x2766 <DIO_voidTogglePin+0x18>
    2764:	77 c0       	rjmp	.+238    	; 0x2854 <DIO_voidTogglePin+0x106>
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	88 23       	and	r24, r24
    276a:	09 f4       	brne	.+2      	; 0x276e <DIO_voidTogglePin+0x20>
    276c:	73 c0       	rjmp	.+230    	; 0x2854 <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	88 30       	cpi	r24, 0x08	; 8
    2772:	08 f0       	brcs	.+2      	; 0x2776 <DIO_voidTogglePin+0x28>
    2774:	6f c0       	rjmp	.+222    	; 0x2854 <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	3c 83       	std	Y+4, r19	; 0x04
    277e:	2b 83       	std	Y+3, r18	; 0x03
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	9c 81       	ldd	r25, Y+4	; 0x04
    2784:	82 30       	cpi	r24, 0x02	; 2
    2786:	91 05       	cpc	r25, r1
    2788:	51 f1       	breq	.+84     	; 0x27de <DIO_voidTogglePin+0x90>
    278a:	2b 81       	ldd	r18, Y+3	; 0x03
    278c:	3c 81       	ldd	r19, Y+4	; 0x04
    278e:	23 30       	cpi	r18, 0x03	; 3
    2790:	31 05       	cpc	r19, r1
    2792:	34 f4       	brge	.+12     	; 0x27a0 <DIO_voidTogglePin+0x52>
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	9c 81       	ldd	r25, Y+4	; 0x04
    2798:	81 30       	cpi	r24, 0x01	; 1
    279a:	91 05       	cpc	r25, r1
    279c:	61 f0       	breq	.+24     	; 0x27b6 <DIO_voidTogglePin+0x68>
    279e:	5a c0       	rjmp	.+180    	; 0x2854 <DIO_voidTogglePin+0x106>
    27a0:	2b 81       	ldd	r18, Y+3	; 0x03
    27a2:	3c 81       	ldd	r19, Y+4	; 0x04
    27a4:	23 30       	cpi	r18, 0x03	; 3
    27a6:	31 05       	cpc	r19, r1
    27a8:	71 f1       	breq	.+92     	; 0x2806 <DIO_voidTogglePin+0xb8>
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	9c 81       	ldd	r25, Y+4	; 0x04
    27ae:	84 30       	cpi	r24, 0x04	; 4
    27b0:	91 05       	cpc	r25, r1
    27b2:	e9 f1       	breq	.+122    	; 0x282e <DIO_voidTogglePin+0xe0>
    27b4:	4f c0       	rjmp	.+158    	; 0x2854 <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    27b6:	ab e3       	ldi	r26, 0x3B	; 59
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	eb e3       	ldi	r30, 0x3B	; 59
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	48 2f       	mov	r20, r24
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	02 2e       	mov	r0, r18
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <DIO_voidTogglePin+0x86>
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	0a 94       	dec	r0
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <DIO_voidTogglePin+0x82>
    27d8:	84 27       	eor	r24, r20
    27da:	8c 93       	st	X, r24
    27dc:	3b c0       	rjmp	.+118    	; 0x2854 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    27de:	a8 e3       	ldi	r26, 0x38	; 56
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e8 e3       	ldi	r30, 0x38	; 56
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	48 2f       	mov	r20, r24
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	02 2e       	mov	r0, r18
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <DIO_voidTogglePin+0xae>
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	0a 94       	dec	r0
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <DIO_voidTogglePin+0xaa>
    2800:	84 27       	eor	r24, r20
    2802:	8c 93       	st	X, r24
    2804:	27 c0       	rjmp	.+78     	; 0x2854 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    2806:	a5 e3       	ldi	r26, 0x35	; 53
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e5 e3       	ldi	r30, 0x35	; 53
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	48 2f       	mov	r20, r24
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	28 2f       	mov	r18, r24
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	02 2e       	mov	r0, r18
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <DIO_voidTogglePin+0xd6>
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	0a 94       	dec	r0
    2826:	e2 f7       	brpl	.-8      	; 0x2820 <DIO_voidTogglePin+0xd2>
    2828:	84 27       	eor	r24, r20
    282a:	8c 93       	st	X, r24
    282c:	13 c0       	rjmp	.+38     	; 0x2854 <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    282e:	a2 e3       	ldi	r26, 0x32	; 50
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e2 e3       	ldi	r30, 0x32	; 50
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	48 2f       	mov	r20, r24
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	28 2f       	mov	r18, r24
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	02 2e       	mov	r0, r18
    2846:	02 c0       	rjmp	.+4      	; 0x284c <DIO_voidTogglePin+0xfe>
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	0a 94       	dec	r0
    284e:	e2 f7       	brpl	.-8      	; 0x2848 <DIO_voidTogglePin+0xfa>
    2850:	84 27       	eor	r24, r20
    2852:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	00 d0       	rcall	.+0      	; 0x2868 <DIO_voidSetPortDir+0x6>
    2868:	00 d0       	rcall	.+0      	; 0x286a <DIO_voidSetPortDir+0x8>
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	89 83       	std	Y+1, r24	; 0x01
    2870:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	85 30       	cpi	r24, 0x05	; 5
    2876:	b0 f5       	brcc	.+108    	; 0x28e4 <DIO_voidSetPortDir+0x82>
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	88 23       	and	r24, r24
    287c:	99 f1       	breq	.+102    	; 0x28e4 <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	3c 83       	std	Y+4, r19	; 0x04
    2886:	2b 83       	std	Y+3, r18	; 0x03
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	9c 81       	ldd	r25, Y+4	; 0x04
    288c:	82 30       	cpi	r24, 0x02	; 2
    288e:	91 05       	cpc	r25, r1
    2890:	d9 f0       	breq	.+54     	; 0x28c8 <DIO_voidSetPortDir+0x66>
    2892:	2b 81       	ldd	r18, Y+3	; 0x03
    2894:	3c 81       	ldd	r19, Y+4	; 0x04
    2896:	23 30       	cpi	r18, 0x03	; 3
    2898:	31 05       	cpc	r19, r1
    289a:	34 f4       	brge	.+12     	; 0x28a8 <DIO_voidSetPortDir+0x46>
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	9c 81       	ldd	r25, Y+4	; 0x04
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	91 05       	cpc	r25, r1
    28a4:	61 f0       	breq	.+24     	; 0x28be <DIO_voidSetPortDir+0x5c>
    28a6:	1e c0       	rjmp	.+60     	; 0x28e4 <DIO_voidSetPortDir+0x82>
    28a8:	2b 81       	ldd	r18, Y+3	; 0x03
    28aa:	3c 81       	ldd	r19, Y+4	; 0x04
    28ac:	23 30       	cpi	r18, 0x03	; 3
    28ae:	31 05       	cpc	r19, r1
    28b0:	81 f0       	breq	.+32     	; 0x28d2 <DIO_voidSetPortDir+0x70>
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	84 30       	cpi	r24, 0x04	; 4
    28b8:	91 05       	cpc	r25, r1
    28ba:	81 f0       	breq	.+32     	; 0x28dc <DIO_voidSetPortDir+0x7a>
    28bc:	13 c0       	rjmp	.+38     	; 0x28e4 <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    28be:	ea e3       	ldi	r30, 0x3A	; 58
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	80 83       	st	Z, r24
    28c6:	0e c0       	rjmp	.+28     	; 0x28e4 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    28c8:	e7 e3       	ldi	r30, 0x37	; 55
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	8a 81       	ldd	r24, Y+2	; 0x02
    28ce:	80 83       	st	Z, r24
    28d0:	09 c0       	rjmp	.+18     	; 0x28e4 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    28d2:	e4 e3       	ldi	r30, 0x34	; 52
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	80 83       	st	Z, r24
    28da:	04 c0       	rjmp	.+8      	; 0x28e4 <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    28dc:	e1 e3       	ldi	r30, 0x31	; 49
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <DIO_voidSetPortValue+0x6>
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <DIO_voidSetPortValue+0x8>
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	85 30       	cpi	r24, 0x05	; 5
    2906:	b0 f5       	brcc	.+108    	; 0x2974 <DIO_voidSetPortValue+0x82>
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	88 23       	and	r24, r24
    290c:	99 f1       	breq	.+102    	; 0x2974 <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	3c 83       	std	Y+4, r19	; 0x04
    2916:	2b 83       	std	Y+3, r18	; 0x03
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	82 30       	cpi	r24, 0x02	; 2
    291e:	91 05       	cpc	r25, r1
    2920:	d9 f0       	breq	.+54     	; 0x2958 <DIO_voidSetPortValue+0x66>
    2922:	2b 81       	ldd	r18, Y+3	; 0x03
    2924:	3c 81       	ldd	r19, Y+4	; 0x04
    2926:	23 30       	cpi	r18, 0x03	; 3
    2928:	31 05       	cpc	r19, r1
    292a:	34 f4       	brge	.+12     	; 0x2938 <DIO_voidSetPortValue+0x46>
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	81 30       	cpi	r24, 0x01	; 1
    2932:	91 05       	cpc	r25, r1
    2934:	61 f0       	breq	.+24     	; 0x294e <DIO_voidSetPortValue+0x5c>
    2936:	1e c0       	rjmp	.+60     	; 0x2974 <DIO_voidSetPortValue+0x82>
    2938:	2b 81       	ldd	r18, Y+3	; 0x03
    293a:	3c 81       	ldd	r19, Y+4	; 0x04
    293c:	23 30       	cpi	r18, 0x03	; 3
    293e:	31 05       	cpc	r19, r1
    2940:	81 f0       	breq	.+32     	; 0x2962 <DIO_voidSetPortValue+0x70>
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	9c 81       	ldd	r25, Y+4	; 0x04
    2946:	84 30       	cpi	r24, 0x04	; 4
    2948:	91 05       	cpc	r25, r1
    294a:	81 f0       	breq	.+32     	; 0x296c <DIO_voidSetPortValue+0x7a>
    294c:	13 c0       	rjmp	.+38     	; 0x2974 <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    294e:	eb e3       	ldi	r30, 0x3B	; 59
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	80 83       	st	Z, r24
    2956:	0e c0       	rjmp	.+28     	; 0x2974 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    2958:	e8 e3       	ldi	r30, 0x38	; 56
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	80 83       	st	Z, r24
    2960:	09 c0       	rjmp	.+18     	; 0x2974 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    2962:	e5 e3       	ldi	r30, 0x35	; 53
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	80 83       	st	Z, r24
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    296c:	e2 e3       	ldi	r30, 0x32	; 50
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	80 83       	st	Z, r24
			break;
		}
	}
}
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	00 d0       	rcall	.+0      	; 0x2988 <DIO_u8GetPortValue+0x6>
    2988:	00 d0       	rcall	.+0      	; 0x298a <DIO_u8GetPortValue+0x8>
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	85 30       	cpi	r24, 0x05	; 5
    2994:	b8 f5       	brcc	.+110    	; 0x2a04 <DIO_u8GetPortValue+0x82>
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	88 23       	and	r24, r24
    299a:	a1 f1       	breq	.+104    	; 0x2a04 <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	3c 83       	std	Y+4, r19	; 0x04
    29a4:	2b 83       	std	Y+3, r18	; 0x03
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	82 30       	cpi	r24, 0x02	; 2
    29ac:	91 05       	cpc	r25, r1
    29ae:	d9 f0       	breq	.+54     	; 0x29e6 <DIO_u8GetPortValue+0x64>
    29b0:	2b 81       	ldd	r18, Y+3	; 0x03
    29b2:	3c 81       	ldd	r19, Y+4	; 0x04
    29b4:	23 30       	cpi	r18, 0x03	; 3
    29b6:	31 05       	cpc	r19, r1
    29b8:	34 f4       	brge	.+12     	; 0x29c6 <DIO_u8GetPortValue+0x44>
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	91 05       	cpc	r25, r1
    29c2:	61 f0       	breq	.+24     	; 0x29dc <DIO_u8GetPortValue+0x5a>
    29c4:	1f c0       	rjmp	.+62     	; 0x2a04 <DIO_u8GetPortValue+0x82>
    29c6:	2b 81       	ldd	r18, Y+3	; 0x03
    29c8:	3c 81       	ldd	r19, Y+4	; 0x04
    29ca:	23 30       	cpi	r18, 0x03	; 3
    29cc:	31 05       	cpc	r19, r1
    29ce:	81 f0       	breq	.+32     	; 0x29f0 <DIO_u8GetPortValue+0x6e>
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	84 30       	cpi	r24, 0x04	; 4
    29d6:	91 05       	cpc	r25, r1
    29d8:	81 f0       	breq	.+32     	; 0x29fa <DIO_u8GetPortValue+0x78>
    29da:	14 c0       	rjmp	.+40     	; 0x2a04 <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    29dc:	eb e3       	ldi	r30, 0x3B	; 59
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	90 81       	ld	r25, Z
    29e2:	9a 83       	std	Y+2, r25	; 0x02
    29e4:	11 c0       	rjmp	.+34     	; 0x2a08 <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    29e6:	e8 e3       	ldi	r30, 0x38	; 56
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	20 81       	ld	r18, Z
    29ec:	2a 83       	std	Y+2, r18	; 0x02
    29ee:	0c c0       	rjmp	.+24     	; 0x2a08 <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    29f0:	e5 e3       	ldi	r30, 0x35	; 53
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	30 81       	ld	r19, Z
    29f6:	3a 83       	std	Y+2, r19	; 0x02
    29f8:	07 c0       	rjmp	.+14     	; 0x2a08 <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    29fa:	e2 e3       	ldi	r30, 0x32	; 50
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	8a 83       	std	Y+2, r24	; 0x02
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    2a04:	9f ef       	ldi	r25, 0xFF	; 255
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <DIO_voidTogglePort+0x6>
    2a1e:	0f 92       	push	r0
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	85 30       	cpi	r24, 0x05	; 5
    2a2a:	08 f0       	brcs	.+2      	; 0x2a2e <DIO_voidTogglePort+0x16>
    2a2c:	43 c0       	rjmp	.+134    	; 0x2ab4 <DIO_voidTogglePort+0x9c>
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	88 23       	and	r24, r24
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <DIO_voidTogglePort+0x1e>
    2a34:	3f c0       	rjmp	.+126    	; 0x2ab4 <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	3b 83       	std	Y+3, r19	; 0x03
    2a3e:	2a 83       	std	Y+2, r18	; 0x02
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	9b 81       	ldd	r25, Y+3	; 0x03
    2a44:	82 30       	cpi	r24, 0x02	; 2
    2a46:	91 05       	cpc	r25, r1
    2a48:	f1 f0       	breq	.+60     	; 0x2a86 <DIO_voidTogglePort+0x6e>
    2a4a:	2a 81       	ldd	r18, Y+2	; 0x02
    2a4c:	3b 81       	ldd	r19, Y+3	; 0x03
    2a4e:	23 30       	cpi	r18, 0x03	; 3
    2a50:	31 05       	cpc	r19, r1
    2a52:	34 f4       	brge	.+12     	; 0x2a60 <DIO_voidTogglePort+0x48>
    2a54:	8a 81       	ldd	r24, Y+2	; 0x02
    2a56:	9b 81       	ldd	r25, Y+3	; 0x03
    2a58:	81 30       	cpi	r24, 0x01	; 1
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	61 f0       	breq	.+24     	; 0x2a76 <DIO_voidTogglePort+0x5e>
    2a5e:	2a c0       	rjmp	.+84     	; 0x2ab4 <DIO_voidTogglePort+0x9c>
    2a60:	2a 81       	ldd	r18, Y+2	; 0x02
    2a62:	3b 81       	ldd	r19, Y+3	; 0x03
    2a64:	23 30       	cpi	r18, 0x03	; 3
    2a66:	31 05       	cpc	r19, r1
    2a68:	b1 f0       	breq	.+44     	; 0x2a96 <DIO_voidTogglePort+0x7e>
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6e:	84 30       	cpi	r24, 0x04	; 4
    2a70:	91 05       	cpc	r25, r1
    2a72:	c9 f0       	breq	.+50     	; 0x2aa6 <DIO_voidTogglePort+0x8e>
    2a74:	1f c0       	rjmp	.+62     	; 0x2ab4 <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    2a76:	ab e3       	ldi	r26, 0x3B	; 59
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	eb e3       	ldi	r30, 0x3B	; 59
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	80 95       	com	r24
    2a82:	8c 93       	st	X, r24
    2a84:	17 c0       	rjmp	.+46     	; 0x2ab4 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    2a86:	a8 e3       	ldi	r26, 0x38	; 56
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e8 e3       	ldi	r30, 0x38	; 56
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	80 95       	com	r24
    2a92:	8c 93       	st	X, r24
    2a94:	0f c0       	rjmp	.+30     	; 0x2ab4 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    2a96:	a5 e3       	ldi	r26, 0x35	; 53
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e5 e3       	ldi	r30, 0x35	; 53
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 95       	com	r24
    2aa2:	8c 93       	st	X, r24
    2aa4:	07 c0       	rjmp	.+14     	; 0x2ab4 <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    2aa6:	a2 e3       	ldi	r26, 0x32	; 50
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e2 e3       	ldi	r30, 0x32	; 50
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	80 95       	com	r24
    2ab2:	8c 93       	st	X, r24
				break;
			}
		}
}
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <ADC_voidInit>:

f32 Vref = 5;
void (*Global_ADC_CallBack)(void)= NULL;


void ADC_voidInit(){
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
#if VOLTAGE_REFERENCE == ADC_AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
    2ac8:	a7 e2       	ldi	r26, 0x27	; 39
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e7 e2       	ldi	r30, 0x27	; 39
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	80 64       	ori	r24, 0x40	; 64
    2ad4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
    2ad6:	a7 e2       	ldi	r26, 0x27	; 39
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	e7 e2       	ldi	r30, 0x27	; 39
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	8f 77       	andi	r24, 0x7F	; 127
    2ae2:	8c 93       	st	X, r24
	Vref = 5;
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	a0 ea       	ldi	r26, 0xA0	; 160
    2aea:	b0 e4       	ldi	r27, 0x40	; 64
    2aec:	80 93 84 01 	sts	0x0184, r24
    2af0:	90 93 85 01 	sts	0x0185, r25
    2af4:	a0 93 86 01 	sts	0x0186, r26
    2af8:	b0 93 87 01 	sts	0x0187, r27
#endif

#if ADJUSTMENT == LEFT_ADJUSTMENT
	SET_BIT(ADMUX, ADMUX_ADLAR);
#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	CLR_BIT(ADMUX, ADMUX_ADLAR);
    2afc:	a7 e2       	ldi	r26, 0x27	; 39
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e7 e2       	ldi	r30, 0x27	; 39
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	8f 7d       	andi	r24, 0xDF	; 223
    2b08:	8c 93       	st	X, r24
#endif

#if ADC_PRESCALLER == DIVISION_BY_128
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    2b0a:	a6 e2       	ldi	r26, 0x26	; 38
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e6 e2       	ldi	r30, 0x26	; 38
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	81 60       	ori	r24, 0x01	; 1
    2b16:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS1);
    2b18:	a6 e2       	ldi	r26, 0x26	; 38
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e6 e2       	ldi	r30, 0x26	; 38
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	82 60       	ori	r24, 0x02	; 2
    2b24:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    2b26:	a6 e2       	ldi	r26, 0x26	; 38
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	e6 e2       	ldi	r30, 0x26	; 38
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	84 60       	ori	r24, 0x04	; 4
    2b32:	8c 93       	st	X, r24
#endif

#if ADC_AUTO_TRIGGER_SOURCE == FREE_RUNNING_MODE
	SET_BIT(ADCSRA, ADCSRA_ADATE);
#endif
}
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <ADC_voidEnable>:

void ADC_voidEnable(){
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    2b42:	a6 e2       	ldi	r26, 0x26	; 38
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e6 e2       	ldi	r30, 0x26	; 38
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	80 68       	ori	r24, 0x80	; 128
    2b4e:	8c 93       	st	X, r24
}
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable(){
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    2b5e:	a6 e2       	ldi	r26, 0x26	; 38
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e6 e2       	ldi	r30, 0x26	; 38
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	88 60       	ori	r24, 0x08	; 8
    2b6a:	8c 93       	st	X, r24
}
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <ADC_voidInterrputDisable>:

void ADC_voidInterrputDisable(){
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2b7a:	a6 e2       	ldi	r26, 0x26	; 38
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e6 e2       	ldi	r30, 0x26	; 38
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	87 7f       	andi	r24, 0xF7	; 247
    2b86:	8c 93       	st	X, r24
}
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <ADC_voidDisable>:

void ADC_voidDisable(){
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADCSRA_ADEN);
    2b96:	a6 e2       	ldi	r26, 0x26	; 38
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e6 e2       	ldi	r30, 0x26	; 38
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	8f 77       	andi	r24, 0x7F	; 127
    2ba2:	8c 93       	st	X, r24
}
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <ADC_u16ReadADC>:

u16 ADC_u16ReadADC(){
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	00 d0       	rcall	.+0      	; 0x2bb0 <ADC_u16ReadADC+0x6>
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    2bb4:	1a 82       	std	Y+2, r1	; 0x02
    2bb6:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * Vref)/1024;
    2bb8:	e4 e2       	ldi	r30, 0x24	; 36
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	91 81       	ldd	r25, Z+1	; 0x01
    2bc0:	cc 01       	movw	r24, r24
    2bc2:	a0 e0       	ldi	r26, 0x00	; 0
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	20 91 84 01 	lds	r18, 0x0184
    2bd6:	30 91 85 01 	lds	r19, 0x0185
    2bda:	40 91 86 01 	lds	r20, 0x0186
    2bde:	50 91 87 01 	lds	r21, 0x0187
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	54 e4       	ldi	r21, 0x44	; 68
    2bfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9a 83       	std	Y+2, r25	; 0x02
    2c10:	89 83       	std	Y+1, r24	; 0x01
	return result;
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	cf 91       	pop	r28
    2c1c:	df 91       	pop	r29
    2c1e:	08 95       	ret

00002c20 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 addresscpy){
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	0f 92       	push	r0
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    2c2c:	a7 e2       	ldi	r26, 0x27	; 39
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	e7 e2       	ldi	r30, 0x27	; 39
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	80 7e       	andi	r24, 0xE0	; 224
    2c38:	8c 93       	st	X, r24

	/*set required channel*/
	ADMUX |= addresscpy;
    2c3a:	a7 e2       	ldi	r26, 0x27	; 39
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	e7 e2       	ldi	r30, 0x27	; 39
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	90 81       	ld	r25, Z
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	89 2b       	or	r24, r25
    2c48:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    2c4a:	a6 e2       	ldi	r26, 0x26	; 38
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e6 e2       	ldi	r30, 0x26	; 38
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	80 64       	ori	r24, 0x40	; 64
    2c56:	8c 93       	st	X, r24
	/*Busy waiting (polling) until the conversion is complete*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    2c58:	e6 e2       	ldi	r30, 0x26	; 38
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	82 95       	swap	r24
    2c60:	8f 70       	andi	r24, 0x0F	; 15
    2c62:	88 2f       	mov	r24, r24
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	81 70       	andi	r24, 0x01	; 1
    2c68:	90 70       	andi	r25, 0x00	; 0
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	a9 f3       	breq	.-22     	; 0x2c58 <ADC_voidStartConversion+0x38>

	/*clear the interrupt flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    2c6e:	a6 e2       	ldi	r26, 0x26	; 38
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e6 e2       	ldi	r30, 0x26	; 38
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	80 61       	ori	r24, 0x10	; 16
    2c7a:	8c 93       	st	X, r24
}
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 addresscpy){
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	0f 92       	push	r0
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    2c90:	a7 e2       	ldi	r26, 0x27	; 39
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e7 e2       	ldi	r30, 0x27	; 39
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 7e       	andi	r24, 0xE0	; 224
    2c9c:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    2c9e:	a7 e2       	ldi	r26, 0x27	; 39
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e7 e2       	ldi	r30, 0x27	; 39
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	90 81       	ld	r25, Z
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	89 2b       	or	r24, r25
    2cac:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    2cae:	a6 e2       	ldi	r26, 0x26	; 38
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	e6 e2       	ldi	r30, 0x26	; 38
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	80 64       	ori	r24, 0x40	; 64
    2cba:	8c 93       	st	X, r24
}
    2cbc:	0f 90       	pop	r0
    2cbe:	cf 91       	pop	r28
    2cc0:	df 91       	pop	r29
    2cc2:	08 95       	ret

00002cc4 <ADC_voidChaining>:

void ADC_voidChaining(u8 addresscpy){
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	0f 92       	push	r0
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    2cd0:	a7 e2       	ldi	r26, 0x27	; 39
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	e7 e2       	ldi	r30, 0x27	; 39
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	80 81       	ld	r24, Z
    2cda:	80 7e       	andi	r24, 0xE0	; 224
    2cdc:	8c 93       	st	X, r24
	/*set required channel*/
	ADMUX |= addresscpy;
    2cde:	a7 e2       	ldi	r26, 0x27	; 39
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e7 e2       	ldi	r30, 0x27	; 39
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	90 81       	ld	r25, Z
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	89 2b       	or	r24, r25
    2cec:	8c 93       	st	X, r24
}
    2cee:	0f 90       	pop	r0
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <ADC_u16ReadADCInMV>:

u16 ADC_u16ReadADCInMV(){
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <ADC_u16ReadADCInMV+0x6>
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
    2d00:	1a 82       	std	Y+2, r1	; 0x02
    2d02:	19 82       	std	Y+1, r1	; 0x01
	result = (ADC * 1000UL * Vref)/1024;
    2d04:	e4 e2       	ldi	r30, 0x24	; 36
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	cc 01       	movw	r24, r24
    2d0e:	a0 e0       	ldi	r26, 0x00	; 0
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	28 ee       	ldi	r18, 0xE8	; 232
    2d14:	33 e0       	ldi	r19, 0x03	; 3
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	50 e0       	ldi	r21, 0x00	; 0
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 35 30 	call	0x606a	; 0x606a <__mulsi3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	20 91 84 01 	lds	r18, 0x0184
    2d36:	30 91 85 01 	lds	r19, 0x0185
    2d3a:	40 91 86 01 	lds	r20, 0x0186
    2d3e:	50 91 87 01 	lds	r21, 0x0187
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	40 e8       	ldi	r20, 0x80	; 128
    2d58:	54 e4       	ldi	r21, 0x44	; 68
    2d5a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	89 83       	std	Y+1, r24	; 0x01
	return result;
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <ADC_voidSetCallback>:


void ADC_voidSetCallback( void (*ptr) (void) ){
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <ADC_voidSetCallback+0x6>
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
	Global_ADC_CallBack = ptr;
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	90 93 ff 01 	sts	0x01FF, r25
    2d96:	80 93 fe 01 	sts	0x01FE, r24
}
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <__vector_16>:

void __vector_16 (void){
    2da4:	1f 92       	push	r1
    2da6:	0f 92       	push	r0
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	0f 92       	push	r0
    2dac:	11 24       	eor	r1, r1
    2dae:	2f 93       	push	r18
    2db0:	3f 93       	push	r19
    2db2:	4f 93       	push	r20
    2db4:	5f 93       	push	r21
    2db6:	6f 93       	push	r22
    2db8:	7f 93       	push	r23
    2dba:	8f 93       	push	r24
    2dbc:	9f 93       	push	r25
    2dbe:	af 93       	push	r26
    2dc0:	bf 93       	push	r27
    2dc2:	ef 93       	push	r30
    2dc4:	ff 93       	push	r31
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62

	if(Global_ADC_CallBack != NULL){
    2dce:	80 91 fe 01 	lds	r24, 0x01FE
    2dd2:	90 91 ff 01 	lds	r25, 0x01FF
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	29 f0       	breq	.+10     	; 0x2de4 <__vector_16+0x40>
		Global_ADC_CallBack();
    2dda:	e0 91 fe 01 	lds	r30, 0x01FE
    2dde:	f0 91 ff 01 	lds	r31, 0x01FF
    2de2:	09 95       	icall
	}
}
    2de4:	cf 91       	pop	r28
    2de6:	df 91       	pop	r29
    2de8:	ff 91       	pop	r31
    2dea:	ef 91       	pop	r30
    2dec:	bf 91       	pop	r27
    2dee:	af 91       	pop	r26
    2df0:	9f 91       	pop	r25
    2df2:	8f 91       	pop	r24
    2df4:	7f 91       	pop	r23
    2df6:	6f 91       	pop	r22
    2df8:	5f 91       	pop	r21
    2dfa:	4f 91       	pop	r20
    2dfc:	3f 91       	pop	r19
    2dfe:	2f 91       	pop	r18
    2e00:	0f 90       	pop	r0
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	0f 90       	pop	r0
    2e06:	1f 90       	pop	r1
    2e08:	18 95       	reti

00002e0a <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	6f e7       	ldi	r22, 0x7F	; 127
    2e16:	0e 94 31 14 	call	0x2862	; 0x2862 <DIO_voidSetPortDir>
}
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	08 95       	ret

00002e20 <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	6f e7       	ldi	r22, 0x7F	; 127
    2e2c:	0e 94 31 14 	call	0x2862	; 0x2862 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    2e30:	84 e0       	ldi	r24, 0x04	; 4
    2e32:	6f e7       	ldi	r22, 0x7F	; 127
    2e34:	0e 94 31 14 	call	0x2862	; 0x2862 <DIO_voidSetPortDir>
}
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	60 97       	sbiw	r28, 0x10	; 16
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    2e54:	ce 01       	movw	r24, r28
    2e56:	01 96       	adiw	r24, 0x01	; 1
    2e58:	9d 87       	std	Y+13, r25	; 0x0d
    2e5a:	8c 87       	std	Y+12, r24	; 0x0c
    2e5c:	e6 ea       	ldi	r30, 0xA6	; 166
    2e5e:	f1 e0       	ldi	r31, 0x01	; 1
    2e60:	ff 87       	std	Y+15, r31	; 0x0f
    2e62:	ee 87       	std	Y+14, r30	; 0x0e
    2e64:	fa e0       	ldi	r31, 0x0A	; 10
    2e66:	f8 8b       	std	Y+16, r31	; 0x10
    2e68:	ee 85       	ldd	r30, Y+14	; 0x0e
    2e6a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2e6c:	00 80       	ld	r0, Z
    2e6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e70:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e72:	01 96       	adiw	r24, 0x01	; 1
    2e74:	9f 87       	std	Y+15, r25	; 0x0f
    2e76:	8e 87       	std	Y+14, r24	; 0x0e
    2e78:	ec 85       	ldd	r30, Y+12	; 0x0c
    2e7a:	fd 85       	ldd	r31, Y+13	; 0x0d
    2e7c:	00 82       	st	Z, r0
    2e7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e80:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	9d 87       	std	Y+13, r25	; 0x0d
    2e86:	8c 87       	std	Y+12, r24	; 0x0c
    2e88:	98 89       	ldd	r25, Y+16	; 0x10
    2e8a:	91 50       	subi	r25, 0x01	; 1
    2e8c:	98 8b       	std	Y+16, r25	; 0x10
    2e8e:	e8 89       	ldd	r30, Y+16	; 0x10
    2e90:	ee 23       	and	r30, r30
    2e92:	51 f7       	brne	.-44     	; 0x2e68 <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    2e94:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e96:	8a 30       	cpi	r24, 0x0A	; 10
    2e98:	70 f4       	brcc	.+28     	; 0x2eb6 <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    2e9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	01 96       	adiw	r24, 0x01	; 1
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	e2 0f       	add	r30, r18
    2ea8:	f3 1f       	adc	r31, r19
    2eaa:	80 81       	ld	r24, Z
    2eac:	98 2f       	mov	r25, r24
    2eae:	82 e0       	ldi	r24, 0x02	; 2
    2eb0:	69 2f       	mov	r22, r25
    2eb2:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
	}
}
    2eb6:	60 96       	adiw	r28, 0x10	; 16
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	a1 97       	sbiw	r28, 0x21	; 33
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    2edc:	ce 01       	movw	r24, r28
    2ede:	43 96       	adiw	r24, 0x13	; 19
    2ee0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ee2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ee4:	e0 eb       	ldi	r30, 0xB0	; 176
    2ee6:	f1 e0       	ldi	r31, 0x01	; 1
    2ee8:	f8 a3       	std	Y+32, r31	; 0x20
    2eea:	ef 8f       	std	Y+31, r30	; 0x1f
    2eec:	fa e0       	ldi	r31, 0x0A	; 10
    2eee:	f9 a3       	std	Y+33, r31	; 0x21
    2ef0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2ef2:	f8 a1       	ldd	r31, Y+32	; 0x20
    2ef4:	00 80       	ld	r0, Z
    2ef6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ef8:	98 a1       	ldd	r25, Y+32	; 0x20
    2efa:	01 96       	adiw	r24, 0x01	; 1
    2efc:	98 a3       	std	Y+32, r25	; 0x20
    2efe:	8f 8f       	std	Y+31, r24	; 0x1f
    2f00:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2f02:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2f04:	00 82       	st	Z, r0
    2f06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f0a:	01 96       	adiw	r24, 0x01	; 1
    2f0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f0e:	8d 8f       	std	Y+29, r24	; 0x1d
    2f10:	99 a1       	ldd	r25, Y+33	; 0x21
    2f12:	91 50       	subi	r25, 0x01	; 1
    2f14:	99 a3       	std	Y+33, r25	; 0x21
    2f16:	e9 a1       	ldd	r30, Y+33	; 0x21
    2f18:	ee 23       	and	r30, r30
    2f1a:	51 f7       	brne	.-44     	; 0x2ef0 <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    2f1c:	1f 86       	std	Y+15, r1	; 0x0f
    2f1e:	18 8a       	std	Y+16, r1	; 0x10
    2f20:	19 8a       	std	Y+17, r1	; 0x11
    2f22:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    2f24:	1f 86       	std	Y+15, r1	; 0x0f
    2f26:	18 8a       	std	Y+16, r1	; 0x10
    2f28:	19 8a       	std	Y+17, r1	; 0x11
    2f2a:	1a 8a       	std	Y+18, r1	; 0x12
    2f2c:	8d c0       	rjmp	.+282    	; 0x3048 <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    2f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f30:	98 89       	ldd	r25, Y+16	; 0x10
    2f32:	a9 89       	ldd	r26, Y+17	; 0x11
    2f34:	ba 89       	ldd	r27, Y+18	; 0x12
    2f36:	9e 01       	movw	r18, r28
    2f38:	2d 5e       	subi	r18, 0xED	; 237
    2f3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f3c:	f9 01       	movw	r30, r18
    2f3e:	e8 0f       	add	r30, r24
    2f40:	f9 1f       	adc	r31, r25
    2f42:	80 81       	ld	r24, Z
    2f44:	98 2f       	mov	r25, r24
    2f46:	82 e0       	ldi	r24, 0x02	; 2
    2f48:	69 2f       	mov	r22, r25
    2f4a:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	a0 e2       	ldi	r26, 0x20	; 32
    2f54:	b1 e4       	ldi	r27, 0x41	; 65
    2f56:	8b 87       	std	Y+11, r24	; 0x0b
    2f58:	9c 87       	std	Y+12, r25	; 0x0c
    2f5a:	ad 87       	std	Y+13, r26	; 0x0d
    2f5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	4a e7       	ldi	r20, 0x7A	; 122
    2f6c:	55 e4       	ldi	r21, 0x45	; 69
    2f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	8f 83       	std	Y+7, r24	; 0x07
    2f78:	98 87       	std	Y+8, r25	; 0x08
    2f7a:	a9 87       	std	Y+9, r26	; 0x09
    2f7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f80:	78 85       	ldd	r23, Y+8	; 0x08
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e8       	ldi	r20, 0x80	; 128
    2f8c:	5f e3       	ldi	r21, 0x3F	; 63
    2f8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f92:	88 23       	and	r24, r24
    2f94:	2c f4       	brge	.+10     	; 0x2fa0 <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	9e 83       	std	Y+6, r25	; 0x06
    2f9c:	8d 83       	std	Y+5, r24	; 0x05
    2f9e:	3f c0       	rjmp	.+126    	; 0x301e <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	3f ef       	ldi	r19, 0xFF	; 255
    2fac:	4f e7       	ldi	r20, 0x7F	; 127
    2fae:	57 e4       	ldi	r21, 0x47	; 71
    2fb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fb4:	18 16       	cp	r1, r24
    2fb6:	4c f5       	brge	.+82     	; 0x300a <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	51 e4       	ldi	r21, 0x41	; 65
    2fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
    2fe0:	0f c0       	rjmp	.+30     	; 0x3000 <SevSeg_voidSingleAutoCounter+0x138>
    2fe2:	80 e9       	ldi	r24, 0x90	; 144
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	9c 83       	std	Y+4, r25	; 0x04
    2fe8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	9c 81       	ldd	r25, Y+4	; 0x04
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <SevSeg_voidSingleAutoCounter+0x126>
    2ff2:	9c 83       	std	Y+4, r25	; 0x04
    2ff4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	9e 83       	std	Y+6, r25	; 0x06
    2ffe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3000:	8d 81       	ldd	r24, Y+5	; 0x05
    3002:	9e 81       	ldd	r25, Y+6	; 0x06
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	69 f7       	brne	.-38     	; 0x2fe2 <SevSeg_voidSingleAutoCounter+0x11a>
    3008:	14 c0       	rjmp	.+40     	; 0x3032 <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300a:	6f 81       	ldd	r22, Y+7	; 0x07
    300c:	78 85       	ldd	r23, Y+8	; 0x08
    300e:	89 85       	ldd	r24, Y+9	; 0x09
    3010:	9a 85       	ldd	r25, Y+10	; 0x0a
    3012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	9e 83       	std	Y+6, r25	; 0x06
    301c:	8d 83       	std	Y+5, r24	; 0x05
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <SevSeg_voidSingleAutoCounter+0x162>
    302e:	9a 83       	std	Y+2, r25	; 0x02
    3030:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    3032:	8f 85       	ldd	r24, Y+15	; 0x0f
    3034:	98 89       	ldd	r25, Y+16	; 0x10
    3036:	a9 89       	ldd	r26, Y+17	; 0x11
    3038:	ba 89       	ldd	r27, Y+18	; 0x12
    303a:	01 96       	adiw	r24, 0x01	; 1
    303c:	a1 1d       	adc	r26, r1
    303e:	b1 1d       	adc	r27, r1
    3040:	8f 87       	std	Y+15, r24	; 0x0f
    3042:	98 8b       	std	Y+16, r25	; 0x10
    3044:	a9 8b       	std	Y+17, r26	; 0x11
    3046:	ba 8b       	std	Y+18, r27	; 0x12
    3048:	8f 85       	ldd	r24, Y+15	; 0x0f
    304a:	98 89       	ldd	r25, Y+16	; 0x10
    304c:	a9 89       	ldd	r26, Y+17	; 0x11
    304e:	ba 89       	ldd	r27, Y+18	; 0x12
    3050:	8a 30       	cpi	r24, 0x0A	; 10
    3052:	91 05       	cpc	r25, r1
    3054:	a1 05       	cpc	r26, r1
    3056:	b1 05       	cpc	r27, r1
    3058:	0c f4       	brge	.+2      	; 0x305c <SevSeg_voidSingleAutoCounter+0x194>
    305a:	69 cf       	rjmp	.-302    	; 0x2f2e <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    305c:	a1 96       	adiw	r28, 0x21	; 33
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	08 95       	ret

0000306e <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	a5 97       	sbiw	r28, 0x25	; 37
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    3082:	ce 01       	movw	r24, r28
    3084:	47 96       	adiw	r24, 0x17	; 23
    3086:	9a a3       	std	Y+34, r25	; 0x22
    3088:	89 a3       	std	Y+33, r24	; 0x21
    308a:	ea eb       	ldi	r30, 0xBA	; 186
    308c:	f1 e0       	ldi	r31, 0x01	; 1
    308e:	fc a3       	std	Y+36, r31	; 0x24
    3090:	eb a3       	std	Y+35, r30	; 0x23
    3092:	fa e0       	ldi	r31, 0x0A	; 10
    3094:	fd a3       	std	Y+37, r31	; 0x25
    3096:	eb a1       	ldd	r30, Y+35	; 0x23
    3098:	fc a1       	ldd	r31, Y+36	; 0x24
    309a:	00 80       	ld	r0, Z
    309c:	8b a1       	ldd	r24, Y+35	; 0x23
    309e:	9c a1       	ldd	r25, Y+36	; 0x24
    30a0:	01 96       	adiw	r24, 0x01	; 1
    30a2:	9c a3       	std	Y+36, r25	; 0x24
    30a4:	8b a3       	std	Y+35, r24	; 0x23
    30a6:	e9 a1       	ldd	r30, Y+33	; 0x21
    30a8:	fa a1       	ldd	r31, Y+34	; 0x22
    30aa:	00 82       	st	Z, r0
    30ac:	89 a1       	ldd	r24, Y+33	; 0x21
    30ae:	9a a1       	ldd	r25, Y+34	; 0x22
    30b0:	01 96       	adiw	r24, 0x01	; 1
    30b2:	9a a3       	std	Y+34, r25	; 0x22
    30b4:	89 a3       	std	Y+33, r24	; 0x21
    30b6:	9d a1       	ldd	r25, Y+37	; 0x25
    30b8:	91 50       	subi	r25, 0x01	; 1
    30ba:	9d a3       	std	Y+37, r25	; 0x25
    30bc:	ed a1       	ldd	r30, Y+37	; 0x25
    30be:	ee 23       	and	r30, r30
    30c0:	51 f7       	brne	.-44     	; 0x3096 <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    30c2:	1b 8a       	std	Y+19, r1	; 0x13
    30c4:	1c 8a       	std	Y+20, r1	; 0x14
    30c6:	1d 8a       	std	Y+21, r1	; 0x15
    30c8:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    30ca:	1f 86       	std	Y+15, r1	; 0x0f
    30cc:	18 8a       	std	Y+16, r1	; 0x10
    30ce:	19 8a       	std	Y+17, r1	; 0x11
    30d0:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    30d2:	1b 8a       	std	Y+19, r1	; 0x13
    30d4:	1c 8a       	std	Y+20, r1	; 0x14
    30d6:	1d 8a       	std	Y+21, r1	; 0x15
    30d8:	1e 8a       	std	Y+22, r1	; 0x16
    30da:	b7 c0       	rjmp	.+366    	; 0x324a <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    30dc:	8b 89       	ldd	r24, Y+19	; 0x13
    30de:	9c 89       	ldd	r25, Y+20	; 0x14
    30e0:	ad 89       	ldd	r26, Y+21	; 0x15
    30e2:	be 89       	ldd	r27, Y+22	; 0x16
    30e4:	9e 01       	movw	r18, r28
    30e6:	29 5e       	subi	r18, 0xE9	; 233
    30e8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ea:	f9 01       	movw	r30, r18
    30ec:	e8 0f       	add	r30, r24
    30ee:	f9 1f       	adc	r31, r25
    30f0:	80 81       	ld	r24, Z
    30f2:	98 2f       	mov	r25, r24
    30f4:	84 e0       	ldi	r24, 0x04	; 4
    30f6:	69 2f       	mov	r22, r25
    30f8:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    30fc:	1f 86       	std	Y+15, r1	; 0x0f
    30fe:	18 8a       	std	Y+16, r1	; 0x10
    3100:	19 8a       	std	Y+17, r1	; 0x11
    3102:	1a 8a       	std	Y+18, r1	; 0x12
    3104:	8d c0       	rjmp	.+282    	; 0x3220 <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    3106:	8f 85       	ldd	r24, Y+15	; 0x0f
    3108:	98 89       	ldd	r25, Y+16	; 0x10
    310a:	a9 89       	ldd	r26, Y+17	; 0x11
    310c:	ba 89       	ldd	r27, Y+18	; 0x12
    310e:	9e 01       	movw	r18, r28
    3110:	29 5e       	subi	r18, 0xE9	; 233
    3112:	3f 4f       	sbci	r19, 0xFF	; 255
    3114:	f9 01       	movw	r30, r18
    3116:	e8 0f       	add	r30, r24
    3118:	f9 1f       	adc	r31, r25
    311a:	80 81       	ld	r24, Z
    311c:	98 2f       	mov	r25, r24
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	69 2f       	mov	r22, r25
    3122:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	a0 e2       	ldi	r26, 0x20	; 32
    312c:	b1 e4       	ldi	r27, 0x41	; 65
    312e:	8b 87       	std	Y+11, r24	; 0x0b
    3130:	9c 87       	std	Y+12, r25	; 0x0c
    3132:	ad 87       	std	Y+13, r26	; 0x0d
    3134:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3136:	6b 85       	ldd	r22, Y+11	; 0x0b
    3138:	7c 85       	ldd	r23, Y+12	; 0x0c
    313a:	8d 85       	ldd	r24, Y+13	; 0x0d
    313c:	9e 85       	ldd	r25, Y+14	; 0x0e
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	4a e7       	ldi	r20, 0x7A	; 122
    3144:	55 e4       	ldi	r21, 0x45	; 69
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	8f 83       	std	Y+7, r24	; 0x07
    3150:	98 87       	std	Y+8, r25	; 0x08
    3152:	a9 87       	std	Y+9, r26	; 0x09
    3154:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3156:	6f 81       	ldd	r22, Y+7	; 0x07
    3158:	78 85       	ldd	r23, Y+8	; 0x08
    315a:	89 85       	ldd	r24, Y+9	; 0x09
    315c:	9a 85       	ldd	r25, Y+10	; 0x0a
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e8       	ldi	r20, 0x80	; 128
    3164:	5f e3       	ldi	r21, 0x3F	; 63
    3166:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    316a:	88 23       	and	r24, r24
    316c:	2c f4       	brge	.+10     	; 0x3178 <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9e 83       	std	Y+6, r25	; 0x06
    3174:	8d 83       	std	Y+5, r24	; 0x05
    3176:	3f c0       	rjmp	.+126    	; 0x31f6 <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    3178:	6f 81       	ldd	r22, Y+7	; 0x07
    317a:	78 85       	ldd	r23, Y+8	; 0x08
    317c:	89 85       	ldd	r24, Y+9	; 0x09
    317e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	3f ef       	ldi	r19, 0xFF	; 255
    3184:	4f e7       	ldi	r20, 0x7F	; 127
    3186:	57 e4       	ldi	r21, 0x47	; 71
    3188:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318c:	18 16       	cp	r1, r24
    318e:	4c f5       	brge	.+82     	; 0x31e2 <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3190:	6b 85       	ldd	r22, Y+11	; 0x0b
    3192:	7c 85       	ldd	r23, Y+12	; 0x0c
    3194:	8d 85       	ldd	r24, Y+13	; 0x0d
    3196:	9e 85       	ldd	r25, Y+14	; 0x0e
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	40 e2       	ldi	r20, 0x20	; 32
    319e:	51 e4       	ldi	r21, 0x41	; 65
    31a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9e 83       	std	Y+6, r25	; 0x06
    31b6:	8d 83       	std	Y+5, r24	; 0x05
    31b8:	0f c0       	rjmp	.+30     	; 0x31d8 <SevSeg_voidDoubleAutoCounter+0x16a>
    31ba:	80 e9       	ldi	r24, 0x90	; 144
    31bc:	91 e0       	ldi	r25, 0x01	; 1
    31be:	9c 83       	std	Y+4, r25	; 0x04
    31c0:	8b 83       	std	Y+3, r24	; 0x03
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	9c 81       	ldd	r25, Y+4	; 0x04
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	f1 f7       	brne	.-4      	; 0x31c6 <SevSeg_voidDoubleAutoCounter+0x158>
    31ca:	9c 83       	std	Y+4, r25	; 0x04
    31cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05
    31d0:	9e 81       	ldd	r25, Y+6	; 0x06
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	9e 83       	std	Y+6, r25	; 0x06
    31d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d8:	8d 81       	ldd	r24, Y+5	; 0x05
    31da:	9e 81       	ldd	r25, Y+6	; 0x06
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	69 f7       	brne	.-38     	; 0x31ba <SevSeg_voidDoubleAutoCounter+0x14c>
    31e0:	14 c0       	rjmp	.+40     	; 0x320a <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e2:	6f 81       	ldd	r22, Y+7	; 0x07
    31e4:	78 85       	ldd	r23, Y+8	; 0x08
    31e6:	89 85       	ldd	r24, Y+9	; 0x09
    31e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	9a 83       	std	Y+2, r25	; 0x02
    31fc:	89 83       	std	Y+1, r24	; 0x01
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	9a 81       	ldd	r25, Y+2	; 0x02
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <SevSeg_voidDoubleAutoCounter+0x194>
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    320a:	8f 85       	ldd	r24, Y+15	; 0x0f
    320c:	98 89       	ldd	r25, Y+16	; 0x10
    320e:	a9 89       	ldd	r26, Y+17	; 0x11
    3210:	ba 89       	ldd	r27, Y+18	; 0x12
    3212:	01 96       	adiw	r24, 0x01	; 1
    3214:	a1 1d       	adc	r26, r1
    3216:	b1 1d       	adc	r27, r1
    3218:	8f 87       	std	Y+15, r24	; 0x0f
    321a:	98 8b       	std	Y+16, r25	; 0x10
    321c:	a9 8b       	std	Y+17, r26	; 0x11
    321e:	ba 8b       	std	Y+18, r27	; 0x12
    3220:	8f 85       	ldd	r24, Y+15	; 0x0f
    3222:	98 89       	ldd	r25, Y+16	; 0x10
    3224:	a9 89       	ldd	r26, Y+17	; 0x11
    3226:	ba 89       	ldd	r27, Y+18	; 0x12
    3228:	8a 30       	cpi	r24, 0x0A	; 10
    322a:	91 05       	cpc	r25, r1
    322c:	a1 05       	cpc	r26, r1
    322e:	b1 05       	cpc	r27, r1
    3230:	0c f4       	brge	.+2      	; 0x3234 <SevSeg_voidDoubleAutoCounter+0x1c6>
    3232:	69 cf       	rjmp	.-302    	; 0x3106 <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    3234:	8b 89       	ldd	r24, Y+19	; 0x13
    3236:	9c 89       	ldd	r25, Y+20	; 0x14
    3238:	ad 89       	ldd	r26, Y+21	; 0x15
    323a:	be 89       	ldd	r27, Y+22	; 0x16
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	a1 1d       	adc	r26, r1
    3240:	b1 1d       	adc	r27, r1
    3242:	8b 8b       	std	Y+19, r24	; 0x13
    3244:	9c 8b       	std	Y+20, r25	; 0x14
    3246:	ad 8b       	std	Y+21, r26	; 0x15
    3248:	be 8b       	std	Y+22, r27	; 0x16
    324a:	8b 89       	ldd	r24, Y+19	; 0x13
    324c:	9c 89       	ldd	r25, Y+20	; 0x14
    324e:	ad 89       	ldd	r26, Y+21	; 0x15
    3250:	be 89       	ldd	r27, Y+22	; 0x16
    3252:	8a 30       	cpi	r24, 0x0A	; 10
    3254:	91 05       	cpc	r25, r1
    3256:	a1 05       	cpc	r26, r1
    3258:	b1 05       	cpc	r27, r1
    325a:	0c f4       	brge	.+2      	; 0x325e <SevSeg_voidDoubleAutoCounter+0x1f0>
    325c:	3f cf       	rjmp	.-386    	; 0x30dc <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    325e:	a5 96       	adiw	r28, 0x25	; 37
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	de bf       	out	0x3e, r29	; 62
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	cd bf       	out	0x3d, r28	; 61
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	e1 97       	sbiw	r28, 0x31	; 49
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	8b a7       	std	Y+43, r24	; 0x2b
    3286:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    3288:	ce 01       	movw	r24, r28
    328a:	81 96       	adiw	r24, 0x21	; 33
    328c:	9e a7       	std	Y+46, r25	; 0x2e
    328e:	8d a7       	std	Y+45, r24	; 0x2d
    3290:	e4 ec       	ldi	r30, 0xC4	; 196
    3292:	f1 e0       	ldi	r31, 0x01	; 1
    3294:	f8 ab       	std	Y+48, r31	; 0x30
    3296:	ef a7       	std	Y+47, r30	; 0x2f
    3298:	fa e0       	ldi	r31, 0x0A	; 10
    329a:	f9 ab       	std	Y+49, r31	; 0x31
    329c:	ef a5       	ldd	r30, Y+47	; 0x2f
    329e:	f8 a9       	ldd	r31, Y+48	; 0x30
    32a0:	00 80       	ld	r0, Z
    32a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a4:	98 a9       	ldd	r25, Y+48	; 0x30
    32a6:	01 96       	adiw	r24, 0x01	; 1
    32a8:	98 ab       	std	Y+48, r25	; 0x30
    32aa:	8f a7       	std	Y+47, r24	; 0x2f
    32ac:	ed a5       	ldd	r30, Y+45	; 0x2d
    32ae:	fe a5       	ldd	r31, Y+46	; 0x2e
    32b0:	00 82       	st	Z, r0
    32b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    32b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    32b6:	01 96       	adiw	r24, 0x01	; 1
    32b8:	9e a7       	std	Y+46, r25	; 0x2e
    32ba:	8d a7       	std	Y+45, r24	; 0x2d
    32bc:	99 a9       	ldd	r25, Y+49	; 0x31
    32be:	91 50       	subi	r25, 0x01	; 1
    32c0:	99 ab       	std	Y+49, r25	; 0x31
    32c2:	e9 a9       	ldd	r30, Y+49	; 0x31
    32c4:	ee 23       	and	r30, r30
    32c6:	51 f7       	brne	.-44     	; 0x329c <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    32c8:	1d 8e       	std	Y+29, r1	; 0x1d
    32ca:	1e 8e       	std	Y+30, r1	; 0x1e
    32cc:	1f 8e       	std	Y+31, r1	; 0x1f
    32ce:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    32d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    32d2:	88 23       	and	r24, r24
    32d4:	0c f4       	brge	.+2      	; 0x32d8 <SevSeg_voidSingleRangeCounter+0x68>
    32d6:	64 c1       	rjmp	.+712    	; 0x35a0 <SevSeg_voidSingleRangeCounter+0x330>
    32d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    32da:	8a 30       	cpi	r24, 0x0A	; 10
    32dc:	0c f0       	brlt	.+2      	; 0x32e0 <SevSeg_voidSingleRangeCounter+0x70>
    32de:	60 c1       	rjmp	.+704    	; 0x35a0 <SevSeg_voidSingleRangeCounter+0x330>
    32e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    32e2:	8a 30       	cpi	r24, 0x0A	; 10
    32e4:	0c f0       	brlt	.+2      	; 0x32e8 <SevSeg_voidSingleRangeCounter+0x78>
    32e6:	5c c1       	rjmp	.+696    	; 0x35a0 <SevSeg_voidSingleRangeCounter+0x330>
    32e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    32ea:	88 23       	and	r24, r24
    32ec:	0c f4       	brge	.+2      	; 0x32f0 <SevSeg_voidSingleRangeCounter+0x80>
    32ee:	58 c1       	rjmp	.+688    	; 0x35a0 <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    32f0:	9b a5       	ldd	r25, Y+43	; 0x2b
    32f2:	8c a5       	ldd	r24, Y+44	; 0x2c
    32f4:	98 17       	cp	r25, r24
    32f6:	0c f0       	brlt	.+2      	; 0x32fa <SevSeg_voidSingleRangeCounter+0x8a>
    32f8:	aa c0       	rjmp	.+340    	; 0x344e <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    32fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    32fc:	99 27       	eor	r25, r25
    32fe:	87 fd       	sbrc	r24, 7
    3300:	90 95       	com	r25
    3302:	a9 2f       	mov	r26, r25
    3304:	b9 2f       	mov	r27, r25
    3306:	8d 8f       	std	Y+29, r24	; 0x1d
    3308:	9e 8f       	std	Y+30, r25	; 0x1e
    330a:	af 8f       	std	Y+31, r26	; 0x1f
    330c:	b8 a3       	std	Y+32, r27	; 0x20
    330e:	8d c0       	rjmp	.+282    	; 0x342a <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    3310:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3312:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3314:	af 8d       	ldd	r26, Y+31	; 0x1f
    3316:	b8 a1       	ldd	r27, Y+32	; 0x20
    3318:	9e 01       	movw	r18, r28
    331a:	2f 5d       	subi	r18, 0xDF	; 223
    331c:	3f 4f       	sbci	r19, 0xFF	; 255
    331e:	f9 01       	movw	r30, r18
    3320:	e8 0f       	add	r30, r24
    3322:	f9 1f       	adc	r31, r25
    3324:	80 81       	ld	r24, Z
    3326:	98 2f       	mov	r25, r24
    3328:	82 e0       	ldi	r24, 0x02	; 2
    332a:	69 2f       	mov	r22, r25
    332c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a0 e2       	ldi	r26, 0x20	; 32
    3336:	b1 e4       	ldi	r27, 0x41	; 65
    3338:	89 8f       	std	Y+25, r24	; 0x19
    333a:	9a 8f       	std	Y+26, r25	; 0x1a
    333c:	ab 8f       	std	Y+27, r26	; 0x1b
    333e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	69 8d       	ldd	r22, Y+25	; 0x19
    3342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a e7       	ldi	r20, 0x7A	; 122
    334e:	55 e4       	ldi	r21, 0x45	; 69
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	8d 8b       	std	Y+21, r24	; 0x15
    335a:	9e 8b       	std	Y+22, r25	; 0x16
    335c:	af 8b       	std	Y+23, r26	; 0x17
    335e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3360:	6d 89       	ldd	r22, Y+21	; 0x15
    3362:	7e 89       	ldd	r23, Y+22	; 0x16
    3364:	8f 89       	ldd	r24, Y+23	; 0x17
    3366:	98 8d       	ldd	r25, Y+24	; 0x18
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	2c f4       	brge	.+10     	; 0x3382 <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9c 8b       	std	Y+20, r25	; 0x14
    337e:	8b 8b       	std	Y+19, r24	; 0x13
    3380:	3f c0       	rjmp	.+126    	; 0x3400 <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    3382:	6d 89       	ldd	r22, Y+21	; 0x15
    3384:	7e 89       	ldd	r23, Y+22	; 0x16
    3386:	8f 89       	ldd	r24, Y+23	; 0x17
    3388:	98 8d       	ldd	r25, Y+24	; 0x18
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	4c f5       	brge	.+82     	; 0x33ec <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	69 8d       	ldd	r22, Y+25	; 0x19
    339c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	51 e4       	ldi	r21, 0x41	; 65
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	9c 8b       	std	Y+20, r25	; 0x14
    33c0:	8b 8b       	std	Y+19, r24	; 0x13
    33c2:	0f c0       	rjmp	.+30     	; 0x33e2 <SevSeg_voidSingleRangeCounter+0x172>
    33c4:	80 e9       	ldi	r24, 0x90	; 144
    33c6:	91 e0       	ldi	r25, 0x01	; 1
    33c8:	9a 8b       	std	Y+18, r25	; 0x12
    33ca:	89 8b       	std	Y+17, r24	; 0x11
    33cc:	89 89       	ldd	r24, Y+17	; 0x11
    33ce:	9a 89       	ldd	r25, Y+18	; 0x12
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <SevSeg_voidSingleRangeCounter+0x160>
    33d4:	9a 8b       	std	Y+18, r25	; 0x12
    33d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	8b 89       	ldd	r24, Y+19	; 0x13
    33da:	9c 89       	ldd	r25, Y+20	; 0x14
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	9c 8b       	std	Y+20, r25	; 0x14
    33e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	8b 89       	ldd	r24, Y+19	; 0x13
    33e4:	9c 89       	ldd	r25, Y+20	; 0x14
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <SevSeg_voidSingleRangeCounter+0x154>
    33ea:	14 c0       	rjmp	.+40     	; 0x3414 <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	6d 89       	ldd	r22, Y+21	; 0x15
    33ee:	7e 89       	ldd	r23, Y+22	; 0x16
    33f0:	8f 89       	ldd	r24, Y+23	; 0x17
    33f2:	98 8d       	ldd	r25, Y+24	; 0x18
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	9c 8b       	std	Y+20, r25	; 0x14
    33fe:	8b 8b       	std	Y+19, r24	; 0x13
    3400:	8b 89       	ldd	r24, Y+19	; 0x13
    3402:	9c 89       	ldd	r25, Y+20	; 0x14
    3404:	98 8b       	std	Y+16, r25	; 0x10
    3406:	8f 87       	std	Y+15, r24	; 0x0f
    3408:	8f 85       	ldd	r24, Y+15	; 0x0f
    340a:	98 89       	ldd	r25, Y+16	; 0x10
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <SevSeg_voidSingleRangeCounter+0x19c>
    3410:	98 8b       	std	Y+16, r25	; 0x10
    3412:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    3414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3416:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3418:	af 8d       	ldd	r26, Y+31	; 0x1f
    341a:	b8 a1       	ldd	r27, Y+32	; 0x20
    341c:	01 96       	adiw	r24, 0x01	; 1
    341e:	a1 1d       	adc	r26, r1
    3420:	b1 1d       	adc	r27, r1
    3422:	8d 8f       	std	Y+29, r24	; 0x1d
    3424:	9e 8f       	std	Y+30, r25	; 0x1e
    3426:	af 8f       	std	Y+31, r26	; 0x1f
    3428:	b8 a3       	std	Y+32, r27	; 0x20
    342a:	8c a5       	ldd	r24, Y+44	; 0x2c
    342c:	28 2f       	mov	r18, r24
    342e:	33 27       	eor	r19, r19
    3430:	27 fd       	sbrc	r18, 7
    3432:	30 95       	com	r19
    3434:	43 2f       	mov	r20, r19
    3436:	53 2f       	mov	r21, r19
    3438:	8d 8d       	ldd	r24, Y+29	; 0x1d
    343a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    343c:	af 8d       	ldd	r26, Y+31	; 0x1f
    343e:	b8 a1       	ldd	r27, Y+32	; 0x20
    3440:	82 17       	cp	r24, r18
    3442:	93 07       	cpc	r25, r19
    3444:	a4 07       	cpc	r26, r20
    3446:	b5 07       	cpc	r27, r21
    3448:	0c f4       	brge	.+2      	; 0x344c <SevSeg_voidSingleRangeCounter+0x1dc>
    344a:	62 cf       	rjmp	.-316    	; 0x3310 <SevSeg_voidSingleRangeCounter+0xa0>
    344c:	a9 c0       	rjmp	.+338    	; 0x35a0 <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    344e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3450:	99 27       	eor	r25, r25
    3452:	87 fd       	sbrc	r24, 7
    3454:	90 95       	com	r25
    3456:	a9 2f       	mov	r26, r25
    3458:	b9 2f       	mov	r27, r25
    345a:	8d 8f       	std	Y+29, r24	; 0x1d
    345c:	9e 8f       	std	Y+30, r25	; 0x1e
    345e:	af 8f       	std	Y+31, r26	; 0x1f
    3460:	b8 a3       	std	Y+32, r27	; 0x20
    3462:	8d c0       	rjmp	.+282    	; 0x357e <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    3464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3466:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3468:	af 8d       	ldd	r26, Y+31	; 0x1f
    346a:	b8 a1       	ldd	r27, Y+32	; 0x20
    346c:	9e 01       	movw	r18, r28
    346e:	2f 5d       	subi	r18, 0xDF	; 223
    3470:	3f 4f       	sbci	r19, 0xFF	; 255
    3472:	f9 01       	movw	r30, r18
    3474:	e8 0f       	add	r30, r24
    3476:	f9 1f       	adc	r31, r25
    3478:	80 81       	ld	r24, Z
    347a:	98 2f       	mov	r25, r24
    347c:	82 e0       	ldi	r24, 0x02	; 2
    347e:	69 2f       	mov	r22, r25
    3480:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	a0 e2       	ldi	r26, 0x20	; 32
    348a:	b1 e4       	ldi	r27, 0x41	; 65
    348c:	8b 87       	std	Y+11, r24	; 0x0b
    348e:	9c 87       	std	Y+12, r25	; 0x0c
    3490:	ad 87       	std	Y+13, r26	; 0x0d
    3492:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3494:	6b 85       	ldd	r22, Y+11	; 0x0b
    3496:	7c 85       	ldd	r23, Y+12	; 0x0c
    3498:	8d 85       	ldd	r24, Y+13	; 0x0d
    349a:	9e 85       	ldd	r25, Y+14	; 0x0e
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a e7       	ldi	r20, 0x7A	; 122
    34a2:	55 e4       	ldi	r21, 0x45	; 69
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	8f 83       	std	Y+7, r24	; 0x07
    34ae:	98 87       	std	Y+8, r25	; 0x08
    34b0:	a9 87       	std	Y+9, r26	; 0x09
    34b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34b4:	6f 81       	ldd	r22, Y+7	; 0x07
    34b6:	78 85       	ldd	r23, Y+8	; 0x08
    34b8:	89 85       	ldd	r24, Y+9	; 0x09
    34ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f e3       	ldi	r21, 0x3F	; 63
    34c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c8:	88 23       	and	r24, r24
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9e 83       	std	Y+6, r25	; 0x06
    34d2:	8d 83       	std	Y+5, r24	; 0x05
    34d4:	3f c0       	rjmp	.+126    	; 0x3554 <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	78 85       	ldd	r23, Y+8	; 0x08
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	4c f5       	brge	.+82     	; 0x3540 <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e2       	ldi	r20, 0x20	; 32
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9e 83       	std	Y+6, r25	; 0x06
    3514:	8d 83       	std	Y+5, r24	; 0x05
    3516:	0f c0       	rjmp	.+30     	; 0x3536 <SevSeg_voidSingleRangeCounter+0x2c6>
    3518:	80 e9       	ldi	r24, 0x90	; 144
    351a:	91 e0       	ldi	r25, 0x01	; 1
    351c:	9c 83       	std	Y+4, r25	; 0x04
    351e:	8b 83       	std	Y+3, r24	; 0x03
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	9c 81       	ldd	r25, Y+4	; 0x04
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <SevSeg_voidSingleRangeCounter+0x2b4>
    3528:	9c 83       	std	Y+4, r25	; 0x04
    352a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352c:	8d 81       	ldd	r24, Y+5	; 0x05
    352e:	9e 81       	ldd	r25, Y+6	; 0x06
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9e 83       	std	Y+6, r25	; 0x06
    3534:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	9e 81       	ldd	r25, Y+6	; 0x06
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f7       	brne	.-38     	; 0x3518 <SevSeg_voidSingleRangeCounter+0x2a8>
    353e:	14 c0       	rjmp	.+40     	; 0x3568 <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3540:	6f 81       	ldd	r22, Y+7	; 0x07
    3542:	78 85       	ldd	r23, Y+8	; 0x08
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	8d 83       	std	Y+5, r24	; 0x05
    3554:	8d 81       	ldd	r24, Y+5	; 0x05
    3556:	9e 81       	ldd	r25, Y+6	; 0x06
    3558:	9a 83       	std	Y+2, r25	; 0x02
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <SevSeg_voidSingleRangeCounter+0x2f0>
    3564:	9a 83       	std	Y+2, r25	; 0x02
    3566:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    3568:	8d 8d       	ldd	r24, Y+29	; 0x1d
    356a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    356c:	af 8d       	ldd	r26, Y+31	; 0x1f
    356e:	b8 a1       	ldd	r27, Y+32	; 0x20
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	a1 09       	sbc	r26, r1
    3574:	b1 09       	sbc	r27, r1
    3576:	8d 8f       	std	Y+29, r24	; 0x1d
    3578:	9e 8f       	std	Y+30, r25	; 0x1e
    357a:	af 8f       	std	Y+31, r26	; 0x1f
    357c:	b8 a3       	std	Y+32, r27	; 0x20
    357e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3580:	28 2f       	mov	r18, r24
    3582:	33 27       	eor	r19, r19
    3584:	27 fd       	sbrc	r18, 7
    3586:	30 95       	com	r19
    3588:	43 2f       	mov	r20, r19
    358a:	53 2f       	mov	r21, r19
    358c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    358e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3590:	af 8d       	ldd	r26, Y+31	; 0x1f
    3592:	b8 a1       	ldd	r27, Y+32	; 0x20
    3594:	82 17       	cp	r24, r18
    3596:	93 07       	cpc	r25, r19
    3598:	a4 07       	cpc	r26, r20
    359a:	b5 07       	cpc	r27, r21
    359c:	0c f0       	brlt	.+2      	; 0x35a0 <SevSeg_voidSingleRangeCounter+0x330>
    359e:	62 cf       	rjmp	.-316    	; 0x3464 <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    35a0:	e1 96       	adiw	r28, 0x31	; 49
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	e9 97       	sbiw	r28, 0x39	; 57
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	8b ab       	std	Y+51, r24	; 0x33
    35c8:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    35ca:	ce 01       	movw	r24, r28
    35cc:	89 96       	adiw	r24, 0x29	; 41
    35ce:	9e ab       	std	Y+54, r25	; 0x36
    35d0:	8d ab       	std	Y+53, r24	; 0x35
    35d2:	ee ec       	ldi	r30, 0xCE	; 206
    35d4:	f1 e0       	ldi	r31, 0x01	; 1
    35d6:	f8 af       	std	Y+56, r31	; 0x38
    35d8:	ef ab       	std	Y+55, r30	; 0x37
    35da:	fa e0       	ldi	r31, 0x0A	; 10
    35dc:	f9 af       	std	Y+57, r31	; 0x39
    35de:	ef a9       	ldd	r30, Y+55	; 0x37
    35e0:	f8 ad       	ldd	r31, Y+56	; 0x38
    35e2:	00 80       	ld	r0, Z
    35e4:	8f a9       	ldd	r24, Y+55	; 0x37
    35e6:	98 ad       	ldd	r25, Y+56	; 0x38
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	98 af       	std	Y+56, r25	; 0x38
    35ec:	8f ab       	std	Y+55, r24	; 0x37
    35ee:	ed a9       	ldd	r30, Y+53	; 0x35
    35f0:	fe a9       	ldd	r31, Y+54	; 0x36
    35f2:	00 82       	st	Z, r0
    35f4:	8d a9       	ldd	r24, Y+53	; 0x35
    35f6:	9e a9       	ldd	r25, Y+54	; 0x36
    35f8:	01 96       	adiw	r24, 0x01	; 1
    35fa:	9e ab       	std	Y+54, r25	; 0x36
    35fc:	8d ab       	std	Y+53, r24	; 0x35
    35fe:	99 ad       	ldd	r25, Y+57	; 0x39
    3600:	91 50       	subi	r25, 0x01	; 1
    3602:	99 af       	std	Y+57, r25	; 0x39
    3604:	e9 ad       	ldd	r30, Y+57	; 0x39
    3606:	ee 23       	and	r30, r30
    3608:	51 f7       	brne	.-44     	; 0x35de <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    360a:	8b a9       	ldd	r24, Y+51	; 0x33
    360c:	9a e0       	ldi	r25, 0x0A	; 10
    360e:	69 2f       	mov	r22, r25
    3610:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3614:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    3616:	8b a9       	ldd	r24, Y+51	; 0x33
    3618:	9a e0       	ldi	r25, 0x0A	; 10
    361a:	69 2f       	mov	r22, r25
    361c:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3620:	89 2f       	mov	r24, r25
    3622:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    3624:	8c a9       	ldd	r24, Y+52	; 0x34
    3626:	9a e0       	ldi	r25, 0x0A	; 10
    3628:	69 2f       	mov	r22, r25
    362a:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    362e:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    3630:	8c a9       	ldd	r24, Y+52	; 0x34
    3632:	9a e0       	ldi	r25, 0x0A	; 10
    3634:	69 2f       	mov	r22, r25
    3636:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    363a:	89 2f       	mov	r24, r25
    363c:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    363e:	19 a2       	std	Y+33, r1	; 0x21
    3640:	1a a2       	std	Y+34, r1	; 0x22
    3642:	1b a2       	std	Y+35, r1	; 0x23
    3644:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    3646:	1d 8e       	std	Y+29, r1	; 0x1d
    3648:	1e 8e       	std	Y+30, r1	; 0x1e
    364a:	1f 8e       	std	Y+31, r1	; 0x1f
    364c:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    364e:	88 a5       	ldd	r24, Y+40	; 0x28
    3650:	88 23       	and	r24, r24
    3652:	0c f4       	brge	.+2      	; 0x3656 <SevSeg_voidDoubleRangeCounter+0xa4>
    3654:	05 c2       	rjmp	.+1034   	; 0x3a60 <SevSeg_voidDoubleRangeCounter+0x4ae>
    3656:	88 a5       	ldd	r24, Y+40	; 0x28
    3658:	8a 30       	cpi	r24, 0x0A	; 10
    365a:	0c f0       	brlt	.+2      	; 0x365e <SevSeg_voidDoubleRangeCounter+0xac>
    365c:	01 c2       	rjmp	.+1026   	; 0x3a60 <SevSeg_voidDoubleRangeCounter+0x4ae>
    365e:	8e a1       	ldd	r24, Y+38	; 0x26
    3660:	8a 30       	cpi	r24, 0x0A	; 10
    3662:	0c f0       	brlt	.+2      	; 0x3666 <SevSeg_voidDoubleRangeCounter+0xb4>
    3664:	fd c1       	rjmp	.+1018   	; 0x3a60 <SevSeg_voidDoubleRangeCounter+0x4ae>
    3666:	8e a1       	ldd	r24, Y+38	; 0x26
    3668:	88 23       	and	r24, r24
    366a:	0c f4       	brge	.+2      	; 0x366e <SevSeg_voidDoubleRangeCounter+0xbc>
    366c:	f9 c1       	rjmp	.+1010   	; 0x3a60 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    366e:	9b a9       	ldd	r25, Y+51	; 0x33
    3670:	8c a9       	ldd	r24, Y+52	; 0x34
    3672:	98 17       	cp	r25, r24
    3674:	0c f0       	brlt	.+2      	; 0x3678 <SevSeg_voidDoubleRangeCounter+0xc6>
    3676:	fc c0       	rjmp	.+504    	; 0x3870 <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3678:	88 a5       	ldd	r24, Y+40	; 0x28
    367a:	99 27       	eor	r25, r25
    367c:	87 fd       	sbrc	r24, 7
    367e:	90 95       	com	r25
    3680:	a9 2f       	mov	r26, r25
    3682:	b9 2f       	mov	r27, r25
    3684:	89 a3       	std	Y+33, r24	; 0x21
    3686:	9a a3       	std	Y+34, r25	; 0x22
    3688:	ab a3       	std	Y+35, r26	; 0x23
    368a:	bc a3       	std	Y+36, r27	; 0x24
    368c:	df c0       	rjmp	.+446    	; 0x384c <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    368e:	89 a1       	ldd	r24, Y+33	; 0x21
    3690:	9a a1       	ldd	r25, Y+34	; 0x22
    3692:	ab a1       	ldd	r26, Y+35	; 0x23
    3694:	bc a1       	ldd	r27, Y+36	; 0x24
    3696:	9e 01       	movw	r18, r28
    3698:	27 5d       	subi	r18, 0xD7	; 215
    369a:	3f 4f       	sbci	r19, 0xFF	; 255
    369c:	f9 01       	movw	r30, r18
    369e:	e8 0f       	add	r30, r24
    36a0:	f9 1f       	adc	r31, r25
    36a2:	80 81       	ld	r24, Z
    36a4:	98 2f       	mov	r25, r24
    36a6:	84 e0       	ldi	r24, 0x04	; 4
    36a8:	69 2f       	mov	r22, r25
    36aa:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    36ae:	8f a1       	ldd	r24, Y+39	; 0x27
    36b0:	99 27       	eor	r25, r25
    36b2:	87 fd       	sbrc	r24, 7
    36b4:	90 95       	com	r25
    36b6:	a9 2f       	mov	r26, r25
    36b8:	b9 2f       	mov	r27, r25
    36ba:	8d 8f       	std	Y+29, r24	; 0x1d
    36bc:	9e 8f       	std	Y+30, r25	; 0x1e
    36be:	af 8f       	std	Y+31, r26	; 0x1f
    36c0:	b8 a3       	std	Y+32, r27	; 0x20
    36c2:	ae c0       	rjmp	.+348    	; 0x3820 <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    36c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36c8:	af 8d       	ldd	r26, Y+31	; 0x1f
    36ca:	b8 a1       	ldd	r27, Y+32	; 0x20
    36cc:	9e 01       	movw	r18, r28
    36ce:	27 5d       	subi	r18, 0xD7	; 215
    36d0:	3f 4f       	sbci	r19, 0xFF	; 255
    36d2:	f9 01       	movw	r30, r18
    36d4:	e8 0f       	add	r30, r24
    36d6:	f9 1f       	adc	r31, r25
    36d8:	80 81       	ld	r24, Z
    36da:	98 2f       	mov	r25, r24
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	69 2f       	mov	r22, r25
    36e0:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	a0 e2       	ldi	r26, 0x20	; 32
    36ea:	b1 e4       	ldi	r27, 0x41	; 65
    36ec:	89 8f       	std	Y+25, r24	; 0x19
    36ee:	9a 8f       	std	Y+26, r25	; 0x1a
    36f0:	ab 8f       	std	Y+27, r26	; 0x1b
    36f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f4:	69 8d       	ldd	r22, Y+25	; 0x19
    36f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	4a e7       	ldi	r20, 0x7A	; 122
    3702:	55 e4       	ldi	r21, 0x45	; 69
    3704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	8d 8b       	std	Y+21, r24	; 0x15
    370e:	9e 8b       	std	Y+22, r25	; 0x16
    3710:	af 8b       	std	Y+23, r26	; 0x17
    3712:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3714:	6d 89       	ldd	r22, Y+21	; 0x15
    3716:	7e 89       	ldd	r23, Y+22	; 0x16
    3718:	8f 89       	ldd	r24, Y+23	; 0x17
    371a:	98 8d       	ldd	r25, Y+24	; 0x18
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	40 e8       	ldi	r20, 0x80	; 128
    3722:	5f e3       	ldi	r21, 0x3F	; 63
    3724:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3728:	88 23       	and	r24, r24
    372a:	2c f4       	brge	.+10     	; 0x3736 <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	9c 8b       	std	Y+20, r25	; 0x14
    3732:	8b 8b       	std	Y+19, r24	; 0x13
    3734:	3f c0       	rjmp	.+126    	; 0x37b4 <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    3736:	6d 89       	ldd	r22, Y+21	; 0x15
    3738:	7e 89       	ldd	r23, Y+22	; 0x16
    373a:	8f 89       	ldd	r24, Y+23	; 0x17
    373c:	98 8d       	ldd	r25, Y+24	; 0x18
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	3f ef       	ldi	r19, 0xFF	; 255
    3742:	4f e7       	ldi	r20, 0x7F	; 127
    3744:	57 e4       	ldi	r21, 0x47	; 71
    3746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    374a:	18 16       	cp	r1, r24
    374c:	4c f5       	brge	.+82     	; 0x37a0 <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374e:	69 8d       	ldd	r22, Y+25	; 0x19
    3750:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3752:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3754:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	40 e2       	ldi	r20, 0x20	; 32
    375c:	51 e4       	ldi	r21, 0x41	; 65
    375e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	9c 8b       	std	Y+20, r25	; 0x14
    3774:	8b 8b       	std	Y+19, r24	; 0x13
    3776:	0f c0       	rjmp	.+30     	; 0x3796 <SevSeg_voidDoubleRangeCounter+0x1e4>
    3778:	80 e9       	ldi	r24, 0x90	; 144
    377a:	91 e0       	ldi	r25, 0x01	; 1
    377c:	9a 8b       	std	Y+18, r25	; 0x12
    377e:	89 8b       	std	Y+17, r24	; 0x11
    3780:	89 89       	ldd	r24, Y+17	; 0x11
    3782:	9a 89       	ldd	r25, Y+18	; 0x12
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <SevSeg_voidDoubleRangeCounter+0x1d2>
    3788:	9a 8b       	std	Y+18, r25	; 0x12
    378a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378c:	8b 89       	ldd	r24, Y+19	; 0x13
    378e:	9c 89       	ldd	r25, Y+20	; 0x14
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	9c 8b       	std	Y+20, r25	; 0x14
    3794:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3796:	8b 89       	ldd	r24, Y+19	; 0x13
    3798:	9c 89       	ldd	r25, Y+20	; 0x14
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	69 f7       	brne	.-38     	; 0x3778 <SevSeg_voidDoubleRangeCounter+0x1c6>
    379e:	14 c0       	rjmp	.+40     	; 0x37c8 <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a0:	6d 89       	ldd	r22, Y+21	; 0x15
    37a2:	7e 89       	ldd	r23, Y+22	; 0x16
    37a4:	8f 89       	ldd	r24, Y+23	; 0x17
    37a6:	98 8d       	ldd	r25, Y+24	; 0x18
    37a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	9c 8b       	std	Y+20, r25	; 0x14
    37b2:	8b 8b       	std	Y+19, r24	; 0x13
    37b4:	8b 89       	ldd	r24, Y+19	; 0x13
    37b6:	9c 89       	ldd	r25, Y+20	; 0x14
    37b8:	98 8b       	std	Y+16, r25	; 0x10
    37ba:	8f 87       	std	Y+15, r24	; 0x0f
    37bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    37be:	98 89       	ldd	r25, Y+16	; 0x10
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <SevSeg_voidDoubleRangeCounter+0x20e>
    37c4:	98 8b       	std	Y+16, r25	; 0x10
    37c6:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    37c8:	8d a1       	ldd	r24, Y+37	; 0x25
    37ca:	28 2f       	mov	r18, r24
    37cc:	33 27       	eor	r19, r19
    37ce:	27 fd       	sbrc	r18, 7
    37d0:	30 95       	com	r19
    37d2:	43 2f       	mov	r20, r19
    37d4:	53 2f       	mov	r21, r19
    37d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37da:	af 8d       	ldd	r26, Y+31	; 0x1f
    37dc:	b8 a1       	ldd	r27, Y+32	; 0x20
    37de:	28 17       	cp	r18, r24
    37e0:	39 07       	cpc	r19, r25
    37e2:	4a 07       	cpc	r20, r26
    37e4:	5b 07       	cpc	r21, r27
    37e6:	89 f4       	brne	.+34     	; 0x380a <SevSeg_voidDoubleRangeCounter+0x258>
    37e8:	8e a1       	ldd	r24, Y+38	; 0x26
    37ea:	28 2f       	mov	r18, r24
    37ec:	33 27       	eor	r19, r19
    37ee:	27 fd       	sbrc	r18, 7
    37f0:	30 95       	com	r19
    37f2:	43 2f       	mov	r20, r19
    37f4:	53 2f       	mov	r21, r19
    37f6:	89 a1       	ldd	r24, Y+33	; 0x21
    37f8:	9a a1       	ldd	r25, Y+34	; 0x22
    37fa:	ab a1       	ldd	r26, Y+35	; 0x23
    37fc:	bc a1       	ldd	r27, Y+36	; 0x24
    37fe:	28 17       	cp	r18, r24
    3800:	39 07       	cpc	r19, r25
    3802:	4a 07       	cpc	r20, r26
    3804:	5b 07       	cpc	r21, r27
    3806:	09 f4       	brne	.+2      	; 0x380a <SevSeg_voidDoubleRangeCounter+0x258>
    3808:	2b c1       	rjmp	.+598    	; 0x3a60 <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    380a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    380c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    380e:	af 8d       	ldd	r26, Y+31	; 0x1f
    3810:	b8 a1       	ldd	r27, Y+32	; 0x20
    3812:	01 96       	adiw	r24, 0x01	; 1
    3814:	a1 1d       	adc	r26, r1
    3816:	b1 1d       	adc	r27, r1
    3818:	8d 8f       	std	Y+29, r24	; 0x1d
    381a:	9e 8f       	std	Y+30, r25	; 0x1e
    381c:	af 8f       	std	Y+31, r26	; 0x1f
    381e:	b8 a3       	std	Y+32, r27	; 0x20
    3820:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3822:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3824:	af 8d       	ldd	r26, Y+31	; 0x1f
    3826:	b8 a1       	ldd	r27, Y+32	; 0x20
    3828:	8a 30       	cpi	r24, 0x0A	; 10
    382a:	91 05       	cpc	r25, r1
    382c:	a1 05       	cpc	r26, r1
    382e:	b1 05       	cpc	r27, r1
    3830:	0c f4       	brge	.+2      	; 0x3834 <SevSeg_voidDoubleRangeCounter+0x282>
    3832:	48 cf       	rjmp	.-368    	; 0x36c4 <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    3834:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3836:	89 a1       	ldd	r24, Y+33	; 0x21
    3838:	9a a1       	ldd	r25, Y+34	; 0x22
    383a:	ab a1       	ldd	r26, Y+35	; 0x23
    383c:	bc a1       	ldd	r27, Y+36	; 0x24
    383e:	01 96       	adiw	r24, 0x01	; 1
    3840:	a1 1d       	adc	r26, r1
    3842:	b1 1d       	adc	r27, r1
    3844:	89 a3       	std	Y+33, r24	; 0x21
    3846:	9a a3       	std	Y+34, r25	; 0x22
    3848:	ab a3       	std	Y+35, r26	; 0x23
    384a:	bc a3       	std	Y+36, r27	; 0x24
    384c:	8e a1       	ldd	r24, Y+38	; 0x26
    384e:	28 2f       	mov	r18, r24
    3850:	33 27       	eor	r19, r19
    3852:	27 fd       	sbrc	r18, 7
    3854:	30 95       	com	r19
    3856:	43 2f       	mov	r20, r19
    3858:	53 2f       	mov	r21, r19
    385a:	89 a1       	ldd	r24, Y+33	; 0x21
    385c:	9a a1       	ldd	r25, Y+34	; 0x22
    385e:	ab a1       	ldd	r26, Y+35	; 0x23
    3860:	bc a1       	ldd	r27, Y+36	; 0x24
    3862:	28 17       	cp	r18, r24
    3864:	39 07       	cpc	r19, r25
    3866:	4a 07       	cpc	r20, r26
    3868:	5b 07       	cpc	r21, r27
    386a:	0c f0       	brlt	.+2      	; 0x386e <SevSeg_voidDoubleRangeCounter+0x2bc>
    386c:	10 cf       	rjmp	.-480    	; 0x368e <SevSeg_voidDoubleRangeCounter+0xdc>
    386e:	f8 c0       	rjmp	.+496    	; 0x3a60 <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3870:	88 a5       	ldd	r24, Y+40	; 0x28
    3872:	99 27       	eor	r25, r25
    3874:	87 fd       	sbrc	r24, 7
    3876:	90 95       	com	r25
    3878:	a9 2f       	mov	r26, r25
    387a:	b9 2f       	mov	r27, r25
    387c:	89 a3       	std	Y+33, r24	; 0x21
    387e:	9a a3       	std	Y+34, r25	; 0x22
    3880:	ab a3       	std	Y+35, r26	; 0x23
    3882:	bc a3       	std	Y+36, r27	; 0x24
    3884:	dc c0       	rjmp	.+440    	; 0x3a3e <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    3886:	89 a1       	ldd	r24, Y+33	; 0x21
    3888:	9a a1       	ldd	r25, Y+34	; 0x22
    388a:	ab a1       	ldd	r26, Y+35	; 0x23
    388c:	bc a1       	ldd	r27, Y+36	; 0x24
    388e:	9e 01       	movw	r18, r28
    3890:	27 5d       	subi	r18, 0xD7	; 215
    3892:	3f 4f       	sbci	r19, 0xFF	; 255
    3894:	f9 01       	movw	r30, r18
    3896:	e8 0f       	add	r30, r24
    3898:	f9 1f       	adc	r31, r25
    389a:	80 81       	ld	r24, Z
    389c:	98 2f       	mov	r25, r24
    389e:	84 e0       	ldi	r24, 0x04	; 4
    38a0:	69 2f       	mov	r22, r25
    38a2:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    38a6:	8f a1       	ldd	r24, Y+39	; 0x27
    38a8:	99 27       	eor	r25, r25
    38aa:	87 fd       	sbrc	r24, 7
    38ac:	90 95       	com	r25
    38ae:	a9 2f       	mov	r26, r25
    38b0:	b9 2f       	mov	r27, r25
    38b2:	8d 8f       	std	Y+29, r24	; 0x1d
    38b4:	9e 8f       	std	Y+30, r25	; 0x1e
    38b6:	af 8f       	std	Y+31, r26	; 0x1f
    38b8:	b8 a3       	std	Y+32, r27	; 0x20
    38ba:	ad c0       	rjmp	.+346    	; 0x3a16 <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    38bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38c0:	af 8d       	ldd	r26, Y+31	; 0x1f
    38c2:	b8 a1       	ldd	r27, Y+32	; 0x20
    38c4:	9e 01       	movw	r18, r28
    38c6:	27 5d       	subi	r18, 0xD7	; 215
    38c8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ca:	f9 01       	movw	r30, r18
    38cc:	e8 0f       	add	r30, r24
    38ce:	f9 1f       	adc	r31, r25
    38d0:	80 81       	ld	r24, Z
    38d2:	98 2f       	mov	r25, r24
    38d4:	82 e0       	ldi	r24, 0x02	; 2
    38d6:	69 2f       	mov	r22, r25
    38d8:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	a0 e2       	ldi	r26, 0x20	; 32
    38e2:	b1 e4       	ldi	r27, 0x41	; 65
    38e4:	8b 87       	std	Y+11, r24	; 0x0b
    38e6:	9c 87       	std	Y+12, r25	; 0x0c
    38e8:	ad 87       	std	Y+13, r26	; 0x0d
    38ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	4a e7       	ldi	r20, 0x7A	; 122
    38fa:	55 e4       	ldi	r21, 0x45	; 69
    38fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	8f 83       	std	Y+7, r24	; 0x07
    3906:	98 87       	std	Y+8, r25	; 0x08
    3908:	a9 87       	std	Y+9, r26	; 0x09
    390a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    390c:	6f 81       	ldd	r22, Y+7	; 0x07
    390e:	78 85       	ldd	r23, Y+8	; 0x08
    3910:	89 85       	ldd	r24, Y+9	; 0x09
    3912:	9a 85       	ldd	r25, Y+10	; 0x0a
    3914:	20 e0       	ldi	r18, 0x00	; 0
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	40 e8       	ldi	r20, 0x80	; 128
    391a:	5f e3       	ldi	r21, 0x3F	; 63
    391c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3920:	88 23       	and	r24, r24
    3922:	2c f4       	brge	.+10     	; 0x392e <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	9e 83       	std	Y+6, r25	; 0x06
    392a:	8d 83       	std	Y+5, r24	; 0x05
    392c:	3f c0       	rjmp	.+126    	; 0x39ac <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    392e:	6f 81       	ldd	r22, Y+7	; 0x07
    3930:	78 85       	ldd	r23, Y+8	; 0x08
    3932:	89 85       	ldd	r24, Y+9	; 0x09
    3934:	9a 85       	ldd	r25, Y+10	; 0x0a
    3936:	20 e0       	ldi	r18, 0x00	; 0
    3938:	3f ef       	ldi	r19, 0xFF	; 255
    393a:	4f e7       	ldi	r20, 0x7F	; 127
    393c:	57 e4       	ldi	r21, 0x47	; 71
    393e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3942:	18 16       	cp	r1, r24
    3944:	4c f5       	brge	.+82     	; 0x3998 <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3946:	6b 85       	ldd	r22, Y+11	; 0x0b
    3948:	7c 85       	ldd	r23, Y+12	; 0x0c
    394a:	8d 85       	ldd	r24, Y+13	; 0x0d
    394c:	9e 85       	ldd	r25, Y+14	; 0x0e
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	40 e2       	ldi	r20, 0x20	; 32
    3954:	51 e4       	ldi	r21, 0x41	; 65
    3956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	bc 01       	movw	r22, r24
    3960:	cd 01       	movw	r24, r26
    3962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	9e 83       	std	Y+6, r25	; 0x06
    396c:	8d 83       	std	Y+5, r24	; 0x05
    396e:	0f c0       	rjmp	.+30     	; 0x398e <SevSeg_voidDoubleRangeCounter+0x3dc>
    3970:	80 e9       	ldi	r24, 0x90	; 144
    3972:	91 e0       	ldi	r25, 0x01	; 1
    3974:	9c 83       	std	Y+4, r25	; 0x04
    3976:	8b 83       	std	Y+3, r24	; 0x03
    3978:	8b 81       	ldd	r24, Y+3	; 0x03
    397a:	9c 81       	ldd	r25, Y+4	; 0x04
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	f1 f7       	brne	.-4      	; 0x397c <SevSeg_voidDoubleRangeCounter+0x3ca>
    3980:	9c 83       	std	Y+4, r25	; 0x04
    3982:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3984:	8d 81       	ldd	r24, Y+5	; 0x05
    3986:	9e 81       	ldd	r25, Y+6	; 0x06
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	9e 83       	std	Y+6, r25	; 0x06
    398c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    398e:	8d 81       	ldd	r24, Y+5	; 0x05
    3990:	9e 81       	ldd	r25, Y+6	; 0x06
    3992:	00 97       	sbiw	r24, 0x00	; 0
    3994:	69 f7       	brne	.-38     	; 0x3970 <SevSeg_voidDoubleRangeCounter+0x3be>
    3996:	14 c0       	rjmp	.+40     	; 0x39c0 <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3998:	6f 81       	ldd	r22, Y+7	; 0x07
    399a:	78 85       	ldd	r23, Y+8	; 0x08
    399c:	89 85       	ldd	r24, Y+9	; 0x09
    399e:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	9e 83       	std	Y+6, r25	; 0x06
    39aa:	8d 83       	std	Y+5, r24	; 0x05
    39ac:	8d 81       	ldd	r24, Y+5	; 0x05
    39ae:	9e 81       	ldd	r25, Y+6	; 0x06
    39b0:	9a 83       	std	Y+2, r25	; 0x02
    39b2:	89 83       	std	Y+1, r24	; 0x01
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	9a 81       	ldd	r25, Y+2	; 0x02
    39b8:	01 97       	sbiw	r24, 0x01	; 1
    39ba:	f1 f7       	brne	.-4      	; 0x39b8 <SevSeg_voidDoubleRangeCounter+0x406>
    39bc:	9a 83       	std	Y+2, r25	; 0x02
    39be:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    39c0:	8d a1       	ldd	r24, Y+37	; 0x25
    39c2:	28 2f       	mov	r18, r24
    39c4:	33 27       	eor	r19, r19
    39c6:	27 fd       	sbrc	r18, 7
    39c8:	30 95       	com	r19
    39ca:	43 2f       	mov	r20, r19
    39cc:	53 2f       	mov	r21, r19
    39ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39d2:	af 8d       	ldd	r26, Y+31	; 0x1f
    39d4:	b8 a1       	ldd	r27, Y+32	; 0x20
    39d6:	28 17       	cp	r18, r24
    39d8:	39 07       	cpc	r19, r25
    39da:	4a 07       	cpc	r20, r26
    39dc:	5b 07       	cpc	r21, r27
    39de:	81 f4       	brne	.+32     	; 0x3a00 <SevSeg_voidDoubleRangeCounter+0x44e>
    39e0:	8e a1       	ldd	r24, Y+38	; 0x26
    39e2:	28 2f       	mov	r18, r24
    39e4:	33 27       	eor	r19, r19
    39e6:	27 fd       	sbrc	r18, 7
    39e8:	30 95       	com	r19
    39ea:	43 2f       	mov	r20, r19
    39ec:	53 2f       	mov	r21, r19
    39ee:	89 a1       	ldd	r24, Y+33	; 0x21
    39f0:	9a a1       	ldd	r25, Y+34	; 0x22
    39f2:	ab a1       	ldd	r26, Y+35	; 0x23
    39f4:	bc a1       	ldd	r27, Y+36	; 0x24
    39f6:	28 17       	cp	r18, r24
    39f8:	39 07       	cpc	r19, r25
    39fa:	4a 07       	cpc	r20, r26
    39fc:	5b 07       	cpc	r21, r27
    39fe:	81 f1       	breq	.+96     	; 0x3a60 <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    3a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a04:	af 8d       	ldd	r26, Y+31	; 0x1f
    3a06:	b8 a1       	ldd	r27, Y+32	; 0x20
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	a1 09       	sbc	r26, r1
    3a0c:	b1 09       	sbc	r27, r1
    3a0e:	8d 8f       	std	Y+29, r24	; 0x1d
    3a10:	9e 8f       	std	Y+30, r25	; 0x1e
    3a12:	af 8f       	std	Y+31, r26	; 0x1f
    3a14:	b8 a3       	std	Y+32, r27	; 0x20
    3a16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a1a:	af 8d       	ldd	r26, Y+31	; 0x1f
    3a1c:	b8 a1       	ldd	r27, Y+32	; 0x20
    3a1e:	bb 23       	and	r27, r27
    3a20:	0c f0       	brlt	.+2      	; 0x3a24 <SevSeg_voidDoubleRangeCounter+0x472>
    3a22:	4c cf       	rjmp	.-360    	; 0x38bc <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    3a24:	89 e0       	ldi	r24, 0x09	; 9
    3a26:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3a28:	89 a1       	ldd	r24, Y+33	; 0x21
    3a2a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a2c:	ab a1       	ldd	r26, Y+35	; 0x23
    3a2e:	bc a1       	ldd	r27, Y+36	; 0x24
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	a1 09       	sbc	r26, r1
    3a34:	b1 09       	sbc	r27, r1
    3a36:	89 a3       	std	Y+33, r24	; 0x21
    3a38:	9a a3       	std	Y+34, r25	; 0x22
    3a3a:	ab a3       	std	Y+35, r26	; 0x23
    3a3c:	bc a3       	std	Y+36, r27	; 0x24
    3a3e:	8e a1       	ldd	r24, Y+38	; 0x26
    3a40:	28 2f       	mov	r18, r24
    3a42:	33 27       	eor	r19, r19
    3a44:	27 fd       	sbrc	r18, 7
    3a46:	30 95       	com	r19
    3a48:	43 2f       	mov	r20, r19
    3a4a:	53 2f       	mov	r21, r19
    3a4c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a4e:	9a a1       	ldd	r25, Y+34	; 0x22
    3a50:	ab a1       	ldd	r26, Y+35	; 0x23
    3a52:	bc a1       	ldd	r27, Y+36	; 0x24
    3a54:	82 17       	cp	r24, r18
    3a56:	93 07       	cpc	r25, r19
    3a58:	a4 07       	cpc	r26, r20
    3a5a:	b5 07       	cpc	r27, r21
    3a5c:	0c f0       	brlt	.+2      	; 0x3a60 <SevSeg_voidDoubleRangeCounter+0x4ae>
    3a5e:	13 cf       	rjmp	.-474    	; 0x3886 <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    3a60:	e9 96       	adiw	r28, 0x39	; 57
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	cd bf       	out	0x3d, r28	; 61
    3a6c:	cf 91       	pop	r28
    3a6e:	df 91       	pop	r29
    3a70:	08 95       	ret

00003a72 <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    3a72:	df 93       	push	r29
    3a74:	cf 93       	push	r28
    3a76:	00 d0       	rcall	.+0      	; 0x3a78 <SevSeg_voidBCDDisplay+0x6>
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
    3a7c:	89 83       	std	Y+1, r24	; 0x01
    3a7e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	6a 81       	ldd	r22, Y+2	; 0x02
    3a84:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
}
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	cf 91       	pop	r28
    3a8e:	df 91       	pop	r29
    3a90:	08 95       	ret

00003a92 <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
    3a9a:	ab 97       	sbiw	r28, 0x2b	; 43
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	de bf       	out	0x3e, r29	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	cd bf       	out	0x3d, r28	; 61
    3aa6:	8a a7       	std	Y+42, r24	; 0x2a
    3aa8:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    3aaa:	8a a5       	ldd	r24, Y+42	; 0x2a
    3aac:	9a e0       	ldi	r25, 0x0A	; 10
    3aae:	69 2f       	mov	r22, r25
    3ab0:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3ab4:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    3ab6:	8a a5       	ldd	r24, Y+42	; 0x2a
    3ab8:	9a e0       	ldi	r25, 0x0A	; 10
    3aba:	69 2f       	mov	r22, r25
    3abc:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3ac0:	89 2f       	mov	r24, r25
    3ac2:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    3ac4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ac6:	9a e0       	ldi	r25, 0x0A	; 10
    3ac8:	69 2f       	mov	r22, r25
    3aca:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3ace:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    3ad0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ad2:	9a e0       	ldi	r25, 0x0A	; 10
    3ad4:	69 2f       	mov	r22, r25
    3ad6:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3ada:	89 2f       	mov	r24, r25
    3adc:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    3ade:	1a a2       	std	Y+34, r1	; 0x22
    3ae0:	1b a2       	std	Y+35, r1	; 0x23
    3ae2:	1c a2       	std	Y+36, r1	; 0x24
    3ae4:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    3ae6:	1e 8e       	std	Y+30, r1	; 0x1e
    3ae8:	1f 8e       	std	Y+31, r1	; 0x1f
    3aea:	18 a2       	std	Y+32, r1	; 0x20
    3aec:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    3aee:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    3af0:	89 a5       	ldd	r24, Y+41	; 0x29
    3af2:	88 23       	and	r24, r24
    3af4:	0c f4       	brge	.+2      	; 0x3af8 <SevSeg_voidBCDDoubleDisplay+0x66>
    3af6:	11 c2       	rjmp	.+1058   	; 0x3f1a <SevSeg_voidBCDDoubleDisplay+0x488>
    3af8:	89 a5       	ldd	r24, Y+41	; 0x29
    3afa:	8a 30       	cpi	r24, 0x0A	; 10
    3afc:	0c f0       	brlt	.+2      	; 0x3b00 <SevSeg_voidBCDDoubleDisplay+0x6e>
    3afe:	0d c2       	rjmp	.+1050   	; 0x3f1a <SevSeg_voidBCDDoubleDisplay+0x488>
    3b00:	8f a1       	ldd	r24, Y+39	; 0x27
    3b02:	8a 30       	cpi	r24, 0x0A	; 10
    3b04:	0c f0       	brlt	.+2      	; 0x3b08 <SevSeg_voidBCDDoubleDisplay+0x76>
    3b06:	09 c2       	rjmp	.+1042   	; 0x3f1a <SevSeg_voidBCDDoubleDisplay+0x488>
    3b08:	8f a1       	ldd	r24, Y+39	; 0x27
    3b0a:	88 23       	and	r24, r24
    3b0c:	0c f4       	brge	.+2      	; 0x3b10 <SevSeg_voidBCDDoubleDisplay+0x7e>
    3b0e:	05 c2       	rjmp	.+1034   	; 0x3f1a <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    3b10:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b12:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b14:	98 17       	cp	r25, r24
    3b16:	0c f0       	brlt	.+2      	; 0x3b1a <SevSeg_voidBCDDoubleDisplay+0x88>
    3b18:	02 c1       	rjmp	.+516    	; 0x3d1e <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3b1a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b1c:	99 27       	eor	r25, r25
    3b1e:	87 fd       	sbrc	r24, 7
    3b20:	90 95       	com	r25
    3b22:	a9 2f       	mov	r26, r25
    3b24:	b9 2f       	mov	r27, r25
    3b26:	8a a3       	std	Y+34, r24	; 0x22
    3b28:	9b a3       	std	Y+35, r25	; 0x23
    3b2a:	ac a3       	std	Y+36, r26	; 0x24
    3b2c:	bd a3       	std	Y+37, r27	; 0x25
    3b2e:	e5 c0       	rjmp	.+458    	; 0x3cfa <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    3b30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b32:	8f 70       	andi	r24, 0x0F	; 15
    3b34:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    3b36:	8a a1       	ldd	r24, Y+34	; 0x22
    3b38:	9b a1       	ldd	r25, Y+35	; 0x23
    3b3a:	ac a1       	ldd	r26, Y+36	; 0x24
    3b3c:	bd a1       	ldd	r27, Y+37	; 0x25
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	aa 1f       	adc	r26, r26
    3b44:	bb 1f       	adc	r27, r27
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	aa 1f       	adc	r26, r26
    3b4c:	bb 1f       	adc	r27, r27
    3b4e:	88 0f       	add	r24, r24
    3b50:	99 1f       	adc	r25, r25
    3b52:	aa 1f       	adc	r26, r26
    3b54:	bb 1f       	adc	r27, r27
    3b56:	88 0f       	add	r24, r24
    3b58:	99 1f       	adc	r25, r25
    3b5a:	aa 1f       	adc	r26, r26
    3b5c:	bb 1f       	adc	r27, r27
    3b5e:	98 2f       	mov	r25, r24
    3b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b62:	89 2b       	or	r24, r25
    3b64:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    3b66:	88 a5       	ldd	r24, Y+40	; 0x28
    3b68:	99 27       	eor	r25, r25
    3b6a:	87 fd       	sbrc	r24, 7
    3b6c:	90 95       	com	r25
    3b6e:	a9 2f       	mov	r26, r25
    3b70:	b9 2f       	mov	r27, r25
    3b72:	8e 8f       	std	Y+30, r24	; 0x1e
    3b74:	9f 8f       	std	Y+31, r25	; 0x1f
    3b76:	a8 a3       	std	Y+32, r26	; 0x20
    3b78:	b9 a3       	std	Y+33, r27	; 0x21
    3b7a:	a9 c0       	rjmp	.+338    	; 0x3cce <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    3b7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b7e:	80 7f       	andi	r24, 0xF0	; 240
    3b80:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    3b82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b86:	89 2b       	or	r24, r25
    3b88:	8d 8f       	std	Y+29, r24	; 0x1d
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	a0 e2       	ldi	r26, 0x20	; 32
    3b90:	b1 e4       	ldi	r27, 0x41	; 65
    3b92:	89 8f       	std	Y+25, r24	; 0x19
    3b94:	9a 8f       	std	Y+26, r25	; 0x1a
    3b96:	ab 8f       	std	Y+27, r26	; 0x1b
    3b98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b9a:	69 8d       	ldd	r22, Y+25	; 0x19
    3b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	4a e7       	ldi	r20, 0x7A	; 122
    3ba8:	55 e4       	ldi	r21, 0x45	; 69
    3baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	8d 8b       	std	Y+21, r24	; 0x15
    3bb4:	9e 8b       	std	Y+22, r25	; 0x16
    3bb6:	af 8b       	std	Y+23, r26	; 0x17
    3bb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bba:	6d 89       	ldd	r22, Y+21	; 0x15
    3bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    3bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	40 e8       	ldi	r20, 0x80	; 128
    3bc8:	5f e3       	ldi	r21, 0x3F	; 63
    3bca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bce:	88 23       	and	r24, r24
    3bd0:	2c f4       	brge	.+10     	; 0x3bdc <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	9c 8b       	std	Y+20, r25	; 0x14
    3bd8:	8b 8b       	std	Y+19, r24	; 0x13
    3bda:	3f c0       	rjmp	.+126    	; 0x3c5a <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    3bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    3bde:	7e 89       	ldd	r23, Y+22	; 0x16
    3be0:	8f 89       	ldd	r24, Y+23	; 0x17
    3be2:	98 8d       	ldd	r25, Y+24	; 0x18
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	3f ef       	ldi	r19, 0xFF	; 255
    3be8:	4f e7       	ldi	r20, 0x7F	; 127
    3bea:	57 e4       	ldi	r21, 0x47	; 71
    3bec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bf0:	18 16       	cp	r1, r24
    3bf2:	4c f5       	brge	.+82     	; 0x3c46 <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    3bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	40 e2       	ldi	r20, 0x20	; 32
    3c02:	51 e4       	ldi	r21, 0x41	; 65
    3c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c08:	dc 01       	movw	r26, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	bc 01       	movw	r22, r24
    3c0e:	cd 01       	movw	r24, r26
    3c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	9c 8b       	std	Y+20, r25	; 0x14
    3c1a:	8b 8b       	std	Y+19, r24	; 0x13
    3c1c:	0f c0       	rjmp	.+30     	; 0x3c3c <SevSeg_voidBCDDoubleDisplay+0x1aa>
    3c1e:	80 e9       	ldi	r24, 0x90	; 144
    3c20:	91 e0       	ldi	r25, 0x01	; 1
    3c22:	9a 8b       	std	Y+18, r25	; 0x12
    3c24:	89 8b       	std	Y+17, r24	; 0x11
    3c26:	89 89       	ldd	r24, Y+17	; 0x11
    3c28:	9a 89       	ldd	r25, Y+18	; 0x12
    3c2a:	01 97       	sbiw	r24, 0x01	; 1
    3c2c:	f1 f7       	brne	.-4      	; 0x3c2a <SevSeg_voidBCDDoubleDisplay+0x198>
    3c2e:	9a 8b       	std	Y+18, r25	; 0x12
    3c30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c32:	8b 89       	ldd	r24, Y+19	; 0x13
    3c34:	9c 89       	ldd	r25, Y+20	; 0x14
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	9c 8b       	std	Y+20, r25	; 0x14
    3c3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c40:	00 97       	sbiw	r24, 0x00	; 0
    3c42:	69 f7       	brne	.-38     	; 0x3c1e <SevSeg_voidBCDDoubleDisplay+0x18c>
    3c44:	14 c0       	rjmp	.+40     	; 0x3c6e <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c46:	6d 89       	ldd	r22, Y+21	; 0x15
    3c48:	7e 89       	ldd	r23, Y+22	; 0x16
    3c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	9c 8b       	std	Y+20, r25	; 0x14
    3c58:	8b 8b       	std	Y+19, r24	; 0x13
    3c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c5e:	98 8b       	std	Y+16, r25	; 0x10
    3c60:	8f 87       	std	Y+15, r24	; 0x0f
    3c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c64:	98 89       	ldd	r25, Y+16	; 0x10
    3c66:	01 97       	sbiw	r24, 0x01	; 1
    3c68:	f1 f7       	brne	.-4      	; 0x3c66 <SevSeg_voidBCDDoubleDisplay+0x1d4>
    3c6a:	98 8b       	std	Y+16, r25	; 0x10
    3c6c:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    3c6e:	82 e0       	ldi	r24, 0x02	; 2
    3c70:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3c72:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    3c76:	8e a1       	ldd	r24, Y+38	; 0x26
    3c78:	28 2f       	mov	r18, r24
    3c7a:	33 27       	eor	r19, r19
    3c7c:	27 fd       	sbrc	r18, 7
    3c7e:	30 95       	com	r19
    3c80:	43 2f       	mov	r20, r19
    3c82:	53 2f       	mov	r21, r19
    3c84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c88:	a8 a1       	ldd	r26, Y+32	; 0x20
    3c8a:	b9 a1       	ldd	r27, Y+33	; 0x21
    3c8c:	28 17       	cp	r18, r24
    3c8e:	39 07       	cpc	r19, r25
    3c90:	4a 07       	cpc	r20, r26
    3c92:	5b 07       	cpc	r21, r27
    3c94:	89 f4       	brne	.+34     	; 0x3cb8 <SevSeg_voidBCDDoubleDisplay+0x226>
    3c96:	8f a1       	ldd	r24, Y+39	; 0x27
    3c98:	28 2f       	mov	r18, r24
    3c9a:	33 27       	eor	r19, r19
    3c9c:	27 fd       	sbrc	r18, 7
    3c9e:	30 95       	com	r19
    3ca0:	43 2f       	mov	r20, r19
    3ca2:	53 2f       	mov	r21, r19
    3ca4:	8a a1       	ldd	r24, Y+34	; 0x22
    3ca6:	9b a1       	ldd	r25, Y+35	; 0x23
    3ca8:	ac a1       	ldd	r26, Y+36	; 0x24
    3caa:	bd a1       	ldd	r27, Y+37	; 0x25
    3cac:	28 17       	cp	r18, r24
    3cae:	39 07       	cpc	r19, r25
    3cb0:	4a 07       	cpc	r20, r26
    3cb2:	5b 07       	cpc	r21, r27
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <SevSeg_voidBCDDoubleDisplay+0x226>
    3cb6:	31 c1       	rjmp	.+610    	; 0x3f1a <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    3cb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3cbc:	a8 a1       	ldd	r26, Y+32	; 0x20
    3cbe:	b9 a1       	ldd	r27, Y+33	; 0x21
    3cc0:	01 96       	adiw	r24, 0x01	; 1
    3cc2:	a1 1d       	adc	r26, r1
    3cc4:	b1 1d       	adc	r27, r1
    3cc6:	8e 8f       	std	Y+30, r24	; 0x1e
    3cc8:	9f 8f       	std	Y+31, r25	; 0x1f
    3cca:	a8 a3       	std	Y+32, r26	; 0x20
    3ccc:	b9 a3       	std	Y+33, r27	; 0x21
    3cce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cd0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3cd2:	a8 a1       	ldd	r26, Y+32	; 0x20
    3cd4:	b9 a1       	ldd	r27, Y+33	; 0x21
    3cd6:	8a 30       	cpi	r24, 0x0A	; 10
    3cd8:	91 05       	cpc	r25, r1
    3cda:	a1 05       	cpc	r26, r1
    3cdc:	b1 05       	cpc	r27, r1
    3cde:	0c f4       	brge	.+2      	; 0x3ce2 <SevSeg_voidBCDDoubleDisplay+0x250>
    3ce0:	4d cf       	rjmp	.-358    	; 0x3b7c <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    3ce2:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3ce4:	8a a1       	ldd	r24, Y+34	; 0x22
    3ce6:	9b a1       	ldd	r25, Y+35	; 0x23
    3ce8:	ac a1       	ldd	r26, Y+36	; 0x24
    3cea:	bd a1       	ldd	r27, Y+37	; 0x25
    3cec:	01 96       	adiw	r24, 0x01	; 1
    3cee:	a1 1d       	adc	r26, r1
    3cf0:	b1 1d       	adc	r27, r1
    3cf2:	8a a3       	std	Y+34, r24	; 0x22
    3cf4:	9b a3       	std	Y+35, r25	; 0x23
    3cf6:	ac a3       	std	Y+36, r26	; 0x24
    3cf8:	bd a3       	std	Y+37, r27	; 0x25
    3cfa:	8f a1       	ldd	r24, Y+39	; 0x27
    3cfc:	28 2f       	mov	r18, r24
    3cfe:	33 27       	eor	r19, r19
    3d00:	27 fd       	sbrc	r18, 7
    3d02:	30 95       	com	r19
    3d04:	43 2f       	mov	r20, r19
    3d06:	53 2f       	mov	r21, r19
    3d08:	8a a1       	ldd	r24, Y+34	; 0x22
    3d0a:	9b a1       	ldd	r25, Y+35	; 0x23
    3d0c:	ac a1       	ldd	r26, Y+36	; 0x24
    3d0e:	bd a1       	ldd	r27, Y+37	; 0x25
    3d10:	28 17       	cp	r18, r24
    3d12:	39 07       	cpc	r19, r25
    3d14:	4a 07       	cpc	r20, r26
    3d16:	5b 07       	cpc	r21, r27
    3d18:	0c f0       	brlt	.+2      	; 0x3d1c <SevSeg_voidBCDDoubleDisplay+0x28a>
    3d1a:	0a cf       	rjmp	.-492    	; 0x3b30 <SevSeg_voidBCDDoubleDisplay+0x9e>
    3d1c:	fe c0       	rjmp	.+508    	; 0x3f1a <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3d1e:	89 a5       	ldd	r24, Y+41	; 0x29
    3d20:	99 27       	eor	r25, r25
    3d22:	87 fd       	sbrc	r24, 7
    3d24:	90 95       	com	r25
    3d26:	a9 2f       	mov	r26, r25
    3d28:	b9 2f       	mov	r27, r25
    3d2a:	8a a3       	std	Y+34, r24	; 0x22
    3d2c:	9b a3       	std	Y+35, r25	; 0x23
    3d2e:	ac a3       	std	Y+36, r26	; 0x24
    3d30:	bd a3       	std	Y+37, r27	; 0x25
    3d32:	e2 c0       	rjmp	.+452    	; 0x3ef8 <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    3d34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d36:	8f 70       	andi	r24, 0x0F	; 15
    3d38:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    3d3a:	8a a1       	ldd	r24, Y+34	; 0x22
    3d3c:	9b a1       	ldd	r25, Y+35	; 0x23
    3d3e:	ac a1       	ldd	r26, Y+36	; 0x24
    3d40:	bd a1       	ldd	r27, Y+37	; 0x25
    3d42:	88 0f       	add	r24, r24
    3d44:	99 1f       	adc	r25, r25
    3d46:	aa 1f       	adc	r26, r26
    3d48:	bb 1f       	adc	r27, r27
    3d4a:	88 0f       	add	r24, r24
    3d4c:	99 1f       	adc	r25, r25
    3d4e:	aa 1f       	adc	r26, r26
    3d50:	bb 1f       	adc	r27, r27
    3d52:	88 0f       	add	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	aa 1f       	adc	r26, r26
    3d58:	bb 1f       	adc	r27, r27
    3d5a:	88 0f       	add	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	aa 1f       	adc	r26, r26
    3d60:	bb 1f       	adc	r27, r27
    3d62:	98 2f       	mov	r25, r24
    3d64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d66:	89 2b       	or	r24, r25
    3d68:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    3d6a:	88 a5       	ldd	r24, Y+40	; 0x28
    3d6c:	99 27       	eor	r25, r25
    3d6e:	87 fd       	sbrc	r24, 7
    3d70:	90 95       	com	r25
    3d72:	a9 2f       	mov	r26, r25
    3d74:	b9 2f       	mov	r27, r25
    3d76:	8e 8f       	std	Y+30, r24	; 0x1e
    3d78:	9f 8f       	std	Y+31, r25	; 0x1f
    3d7a:	a8 a3       	std	Y+32, r26	; 0x20
    3d7c:	b9 a3       	std	Y+33, r27	; 0x21
    3d7e:	a8 c0       	rjmp	.+336    	; 0x3ed0 <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    3d80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d82:	80 7f       	andi	r24, 0xF0	; 240
    3d84:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    3d86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d8a:	89 2b       	or	r24, r25
    3d8c:	8d 8f       	std	Y+29, r24	; 0x1d
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	a0 e2       	ldi	r26, 0x20	; 32
    3d94:	b1 e4       	ldi	r27, 0x41	; 65
    3d96:	8b 87       	std	Y+11, r24	; 0x0b
    3d98:	9c 87       	std	Y+12, r25	; 0x0c
    3d9a:	ad 87       	std	Y+13, r26	; 0x0d
    3d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	4a e7       	ldi	r20, 0x7A	; 122
    3dac:	55 e4       	ldi	r21, 0x45	; 69
    3dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	8f 83       	std	Y+7, r24	; 0x07
    3db8:	98 87       	std	Y+8, r25	; 0x08
    3dba:	a9 87       	std	Y+9, r26	; 0x09
    3dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc0:	78 85       	ldd	r23, Y+8	; 0x08
    3dc2:	89 85       	ldd	r24, Y+9	; 0x09
    3dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 e8       	ldi	r20, 0x80	; 128
    3dcc:	5f e3       	ldi	r21, 0x3F	; 63
    3dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dd2:	88 23       	and	r24, r24
    3dd4:	2c f4       	brge	.+10     	; 0x3de0 <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	9e 83       	std	Y+6, r25	; 0x06
    3ddc:	8d 83       	std	Y+5, r24	; 0x05
    3dde:	3f c0       	rjmp	.+126    	; 0x3e5e <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    3de0:	6f 81       	ldd	r22, Y+7	; 0x07
    3de2:	78 85       	ldd	r23, Y+8	; 0x08
    3de4:	89 85       	ldd	r24, Y+9	; 0x09
    3de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	3f ef       	ldi	r19, 0xFF	; 255
    3dec:	4f e7       	ldi	r20, 0x7F	; 127
    3dee:	57 e4       	ldi	r21, 0x47	; 71
    3df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3df4:	18 16       	cp	r1, r24
    3df6:	4c f5       	brge	.+82     	; 0x3e4a <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	40 e2       	ldi	r20, 0x20	; 32
    3e06:	51 e4       	ldi	r21, 0x41	; 65
    3e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	bc 01       	movw	r22, r24
    3e12:	cd 01       	movw	r24, r26
    3e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	9e 83       	std	Y+6, r25	; 0x06
    3e1e:	8d 83       	std	Y+5, r24	; 0x05
    3e20:	0f c0       	rjmp	.+30     	; 0x3e40 <SevSeg_voidBCDDoubleDisplay+0x3ae>
    3e22:	80 e9       	ldi	r24, 0x90	; 144
    3e24:	91 e0       	ldi	r25, 0x01	; 1
    3e26:	9c 83       	std	Y+4, r25	; 0x04
    3e28:	8b 83       	std	Y+3, r24	; 0x03
    3e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <SevSeg_voidBCDDoubleDisplay+0x39c>
    3e32:	9c 83       	std	Y+4, r25	; 0x04
    3e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e36:	8d 81       	ldd	r24, Y+5	; 0x05
    3e38:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	9e 83       	std	Y+6, r25	; 0x06
    3e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e40:	8d 81       	ldd	r24, Y+5	; 0x05
    3e42:	9e 81       	ldd	r25, Y+6	; 0x06
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	69 f7       	brne	.-38     	; 0x3e22 <SevSeg_voidBCDDoubleDisplay+0x390>
    3e48:	14 c0       	rjmp	.+40     	; 0x3e72 <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e4c:	78 85       	ldd	r23, Y+8	; 0x08
    3e4e:	89 85       	ldd	r24, Y+9	; 0x09
    3e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	9e 83       	std	Y+6, r25	; 0x06
    3e5c:	8d 83       	std	Y+5, r24	; 0x05
    3e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e60:	9e 81       	ldd	r25, Y+6	; 0x06
    3e62:	9a 83       	std	Y+2, r25	; 0x02
    3e64:	89 83       	std	Y+1, r24	; 0x01
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <SevSeg_voidBCDDoubleDisplay+0x3d8>
    3e6e:	9a 83       	std	Y+2, r25	; 0x02
    3e70:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    3e72:	82 e0       	ldi	r24, 0x02	; 2
    3e74:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3e76:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    3e7a:	8e a1       	ldd	r24, Y+38	; 0x26
    3e7c:	28 2f       	mov	r18, r24
    3e7e:	33 27       	eor	r19, r19
    3e80:	27 fd       	sbrc	r18, 7
    3e82:	30 95       	com	r19
    3e84:	43 2f       	mov	r20, r19
    3e86:	53 2f       	mov	r21, r19
    3e88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e8c:	a8 a1       	ldd	r26, Y+32	; 0x20
    3e8e:	b9 a1       	ldd	r27, Y+33	; 0x21
    3e90:	28 17       	cp	r18, r24
    3e92:	39 07       	cpc	r19, r25
    3e94:	4a 07       	cpc	r20, r26
    3e96:	5b 07       	cpc	r21, r27
    3e98:	81 f4       	brne	.+32     	; 0x3eba <SevSeg_voidBCDDoubleDisplay+0x428>
    3e9a:	8f a1       	ldd	r24, Y+39	; 0x27
    3e9c:	28 2f       	mov	r18, r24
    3e9e:	33 27       	eor	r19, r19
    3ea0:	27 fd       	sbrc	r18, 7
    3ea2:	30 95       	com	r19
    3ea4:	43 2f       	mov	r20, r19
    3ea6:	53 2f       	mov	r21, r19
    3ea8:	8a a1       	ldd	r24, Y+34	; 0x22
    3eaa:	9b a1       	ldd	r25, Y+35	; 0x23
    3eac:	ac a1       	ldd	r26, Y+36	; 0x24
    3eae:	bd a1       	ldd	r27, Y+37	; 0x25
    3eb0:	28 17       	cp	r18, r24
    3eb2:	39 07       	cpc	r19, r25
    3eb4:	4a 07       	cpc	r20, r26
    3eb6:	5b 07       	cpc	r21, r27
    3eb8:	81 f1       	breq	.+96     	; 0x3f1a <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    3eba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ebc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ebe:	a8 a1       	ldd	r26, Y+32	; 0x20
    3ec0:	b9 a1       	ldd	r27, Y+33	; 0x21
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	a1 09       	sbc	r26, r1
    3ec6:	b1 09       	sbc	r27, r1
    3ec8:	8e 8f       	std	Y+30, r24	; 0x1e
    3eca:	9f 8f       	std	Y+31, r25	; 0x1f
    3ecc:	a8 a3       	std	Y+32, r26	; 0x20
    3ece:	b9 a3       	std	Y+33, r27	; 0x21
    3ed0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ed2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ed4:	a8 a1       	ldd	r26, Y+32	; 0x20
    3ed6:	b9 a1       	ldd	r27, Y+33	; 0x21
    3ed8:	bb 23       	and	r27, r27
    3eda:	0c f0       	brlt	.+2      	; 0x3ede <SevSeg_voidBCDDoubleDisplay+0x44c>
    3edc:	51 cf       	rjmp	.-350    	; 0x3d80 <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    3ede:	89 e0       	ldi	r24, 0x09	; 9
    3ee0:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    3ee2:	8a a1       	ldd	r24, Y+34	; 0x22
    3ee4:	9b a1       	ldd	r25, Y+35	; 0x23
    3ee6:	ac a1       	ldd	r26, Y+36	; 0x24
    3ee8:	bd a1       	ldd	r27, Y+37	; 0x25
    3eea:	01 97       	sbiw	r24, 0x01	; 1
    3eec:	a1 09       	sbc	r26, r1
    3eee:	b1 09       	sbc	r27, r1
    3ef0:	8a a3       	std	Y+34, r24	; 0x22
    3ef2:	9b a3       	std	Y+35, r25	; 0x23
    3ef4:	ac a3       	std	Y+36, r26	; 0x24
    3ef6:	bd a3       	std	Y+37, r27	; 0x25
    3ef8:	8f a1       	ldd	r24, Y+39	; 0x27
    3efa:	28 2f       	mov	r18, r24
    3efc:	33 27       	eor	r19, r19
    3efe:	27 fd       	sbrc	r18, 7
    3f00:	30 95       	com	r19
    3f02:	43 2f       	mov	r20, r19
    3f04:	53 2f       	mov	r21, r19
    3f06:	8a a1       	ldd	r24, Y+34	; 0x22
    3f08:	9b a1       	ldd	r25, Y+35	; 0x23
    3f0a:	ac a1       	ldd	r26, Y+36	; 0x24
    3f0c:	bd a1       	ldd	r27, Y+37	; 0x25
    3f0e:	82 17       	cp	r24, r18
    3f10:	93 07       	cpc	r25, r19
    3f12:	a4 07       	cpc	r26, r20
    3f14:	b5 07       	cpc	r27, r21
    3f16:	0c f0       	brlt	.+2      	; 0x3f1a <SevSeg_voidBCDDoubleDisplay+0x488>
    3f18:	0d cf       	rjmp	.-486    	; 0x3d34 <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    3f1a:	ab 96       	adiw	r28, 0x2b	; 43
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	08 95       	ret

00003f2c <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    3f2c:	df 93       	push	r29
    3f2e:	cf 93       	push	r28
    3f30:	cd b7       	in	r28, 0x3d	; 61
    3f32:	de b7       	in	r29, 0x3e	; 62
    3f34:	c1 54       	subi	r28, 0x41	; 65
    3f36:	d0 40       	sbci	r29, 0x00	; 0
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	f8 94       	cli
    3f3c:	de bf       	out	0x3e, r29	; 62
    3f3e:	0f be       	out	0x3f, r0	; 63
    3f40:	cd bf       	out	0x3d, r28	; 61
    3f42:	fe 01       	movw	r30, r28
    3f44:	e0 5c       	subi	r30, 0xC0	; 192
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	80 83       	st	Z, r24
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	ef 5b       	subi	r30, 0xBF	; 191
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    3f52:	fe 01       	movw	r30, r28
    3f54:	e0 5c       	subi	r30, 0xC0	; 192
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	80 81       	ld	r24, Z
    3f5a:	9a e0       	ldi	r25, 0x0A	; 10
    3f5c:	69 2f       	mov	r22, r25
    3f5e:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3f62:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    3f64:	fe 01       	movw	r30, r28
    3f66:	e0 5c       	subi	r30, 0xC0	; 192
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	80 81       	ld	r24, Z
    3f6c:	9a e0       	ldi	r25, 0x0A	; 10
    3f6e:	69 2f       	mov	r22, r25
    3f70:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3f74:	89 2f       	mov	r24, r25
    3f76:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    3f78:	fe 01       	movw	r30, r28
    3f7a:	ef 5b       	subi	r30, 0xBF	; 191
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	80 81       	ld	r24, Z
    3f80:	9a e0       	ldi	r25, 0x0A	; 10
    3f82:	69 2f       	mov	r22, r25
    3f84:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3f88:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	ef 5b       	subi	r30, 0xBF	; 191
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	80 81       	ld	r24, Z
    3f92:	9a e0       	ldi	r25, 0x0A	; 10
    3f94:	69 2f       	mov	r22, r25
    3f96:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__divmodqi4>
    3f9a:	89 2f       	mov	r24, r25
    3f9c:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    3f9e:	18 ae       	std	Y+56, r1	; 0x38
    3fa0:	19 ae       	std	Y+57, r1	; 0x39
    3fa2:	1a ae       	std	Y+58, r1	; 0x3a
    3fa4:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    3fa6:	1c aa       	std	Y+52, r1	; 0x34
    3fa8:	1d aa       	std	Y+53, r1	; 0x35
    3faa:	1e aa       	std	Y+54, r1	; 0x36
    3fac:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    3fae:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    3fb0:	1f a6       	std	Y+47, r1	; 0x2f
    3fb2:	18 aa       	std	Y+48, r1	; 0x30
    3fb4:	19 aa       	std	Y+49, r1	; 0x31
    3fb6:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    3fb8:	82 e3       	ldi	r24, 0x32	; 50
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	a0 e0       	ldi	r26, 0x00	; 0
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	8b a7       	std	Y+43, r24	; 0x2b
    3fc2:	9c a7       	std	Y+44, r25	; 0x2c
    3fc4:	ad a7       	std	Y+45, r26	; 0x2d
    3fc6:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    3fc8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fca:	88 23       	and	r24, r24
    3fcc:	0c f4       	brge	.+2      	; 0x3fd0 <SevSeg_voidMulBCD+0xa4>
    3fce:	ad c2       	rjmp	.+1370   	; 0x452a <SevSeg_voidMulBCD+0x5fe>
    3fd0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fd2:	8a 30       	cpi	r24, 0x0A	; 10
    3fd4:	0c f0       	brlt	.+2      	; 0x3fd8 <SevSeg_voidMulBCD+0xac>
    3fd6:	a9 c2       	rjmp	.+1362   	; 0x452a <SevSeg_voidMulBCD+0x5fe>
    3fd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fda:	8a 30       	cpi	r24, 0x0A	; 10
    3fdc:	0c f0       	brlt	.+2      	; 0x3fe0 <SevSeg_voidMulBCD+0xb4>
    3fde:	a5 c2       	rjmp	.+1354   	; 0x452a <SevSeg_voidMulBCD+0x5fe>
    3fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fe2:	88 23       	and	r24, r24
    3fe4:	0c f4       	brge	.+2      	; 0x3fe8 <SevSeg_voidMulBCD+0xbc>
    3fe6:	a1 c2       	rjmp	.+1346   	; 0x452a <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    3fe8:	de 01       	movw	r26, r28
    3fea:	af 5b       	subi	r26, 0xBF	; 191
    3fec:	bf 4f       	sbci	r27, 0xFF	; 255
    3fee:	fe 01       	movw	r30, r28
    3ff0:	e0 5c       	subi	r30, 0xC0	; 192
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	90 81       	ld	r25, Z
    3ff6:	8c 91       	ld	r24, X
    3ff8:	98 17       	cp	r25, r24
    3ffa:	0c f0       	brlt	.+2      	; 0x3ffe <SevSeg_voidMulBCD+0xd2>
    3ffc:	98 c1       	rjmp	.+816    	; 0x432e <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    3ffe:	8f ad       	ldd	r24, Y+63	; 0x3f
    4000:	99 27       	eor	r25, r25
    4002:	87 fd       	sbrc	r24, 7
    4004:	90 95       	com	r25
    4006:	a9 2f       	mov	r26, r25
    4008:	b9 2f       	mov	r27, r25
    400a:	88 af       	std	Y+56, r24	; 0x38
    400c:	99 af       	std	Y+57, r25	; 0x39
    400e:	aa af       	std	Y+58, r26	; 0x3a
    4010:	bb af       	std	Y+59, r27	; 0x3b
    4012:	7b c1       	rjmp	.+758    	; 0x430a <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    4014:	8e ad       	ldd	r24, Y+62	; 0x3e
    4016:	99 27       	eor	r25, r25
    4018:	87 fd       	sbrc	r24, 7
    401a:	90 95       	com	r25
    401c:	a9 2f       	mov	r26, r25
    401e:	b9 2f       	mov	r27, r25
    4020:	8c ab       	std	Y+52, r24	; 0x34
    4022:	9d ab       	std	Y+53, r25	; 0x35
    4024:	ae ab       	std	Y+54, r26	; 0x36
    4026:	bf ab       	std	Y+55, r27	; 0x37
    4028:	5a c1       	rjmp	.+692    	; 0x42de <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    402a:	1f a6       	std	Y+47, r1	; 0x2f
    402c:	18 aa       	std	Y+48, r1	; 0x30
    402e:	19 aa       	std	Y+49, r1	; 0x31
    4030:	1a aa       	std	Y+50, r1	; 0x32
    4032:	1b c1       	rjmp	.+566    	; 0x426a <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    4034:	88 ad       	ldd	r24, Y+56	; 0x38
    4036:	99 ad       	ldd	r25, Y+57	; 0x39
    4038:	aa ad       	ldd	r26, Y+58	; 0x3a
    403a:	bb ad       	ldd	r27, Y+59	; 0x3b
    403c:	fc 01       	movw	r30, r24
    403e:	e8 57       	subi	r30, 0x78	; 120
    4040:	fe 4f       	sbci	r31, 0xFE	; 254
    4042:	90 81       	ld	r25, Z
    4044:	82 e0       	ldi	r24, 0x02	; 2
    4046:	69 2f       	mov	r22, r25
    4048:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    404c:	82 e0       	ldi	r24, 0x02	; 2
    404e:	66 e0       	ldi	r22, 0x06	; 6
    4050:	40 e0       	ldi	r20, 0x00	; 0
    4052:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    4056:	82 e0       	ldi	r24, 0x02	; 2
    4058:	65 e0       	ldi	r22, 0x05	; 5
    405a:	41 e0       	ldi	r20, 0x01	; 1
    405c:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	a0 e2       	ldi	r26, 0x20	; 32
    4066:	b1 e4       	ldi	r27, 0x41	; 65
    4068:	8f a3       	std	Y+39, r24	; 0x27
    406a:	98 a7       	std	Y+40, r25	; 0x28
    406c:	a9 a7       	std	Y+41, r26	; 0x29
    406e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4070:	6f a1       	ldd	r22, Y+39	; 0x27
    4072:	78 a5       	ldd	r23, Y+40	; 0x28
    4074:	89 a5       	ldd	r24, Y+41	; 0x29
    4076:	9a a5       	ldd	r25, Y+42	; 0x2a
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	4a e7       	ldi	r20, 0x7A	; 122
    407e:	55 e4       	ldi	r21, 0x45	; 69
    4080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	8b a3       	std	Y+35, r24	; 0x23
    408a:	9c a3       	std	Y+36, r25	; 0x24
    408c:	ad a3       	std	Y+37, r26	; 0x25
    408e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4090:	6b a1       	ldd	r22, Y+35	; 0x23
    4092:	7c a1       	ldd	r23, Y+36	; 0x24
    4094:	8d a1       	ldd	r24, Y+37	; 0x25
    4096:	9e a1       	ldd	r25, Y+38	; 0x26
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e8       	ldi	r20, 0x80	; 128
    409e:	5f e3       	ldi	r21, 0x3F	; 63
    40a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40a4:	88 23       	and	r24, r24
    40a6:	2c f4       	brge	.+10     	; 0x40b2 <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	9a a3       	std	Y+34, r25	; 0x22
    40ae:	89 a3       	std	Y+33, r24	; 0x21
    40b0:	3f c0       	rjmp	.+126    	; 0x4130 <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    40b2:	6b a1       	ldd	r22, Y+35	; 0x23
    40b4:	7c a1       	ldd	r23, Y+36	; 0x24
    40b6:	8d a1       	ldd	r24, Y+37	; 0x25
    40b8:	9e a1       	ldd	r25, Y+38	; 0x26
    40ba:	20 e0       	ldi	r18, 0x00	; 0
    40bc:	3f ef       	ldi	r19, 0xFF	; 255
    40be:	4f e7       	ldi	r20, 0x7F	; 127
    40c0:	57 e4       	ldi	r21, 0x47	; 71
    40c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40c6:	18 16       	cp	r1, r24
    40c8:	4c f5       	brge	.+82     	; 0x411c <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ca:	6f a1       	ldd	r22, Y+39	; 0x27
    40cc:	78 a5       	ldd	r23, Y+40	; 0x28
    40ce:	89 a5       	ldd	r24, Y+41	; 0x29
    40d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	40 e2       	ldi	r20, 0x20	; 32
    40d8:	51 e4       	ldi	r21, 0x41	; 65
    40da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	bc 01       	movw	r22, r24
    40e4:	cd 01       	movw	r24, r26
    40e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	9a a3       	std	Y+34, r25	; 0x22
    40f0:	89 a3       	std	Y+33, r24	; 0x21
    40f2:	0f c0       	rjmp	.+30     	; 0x4112 <SevSeg_voidMulBCD+0x1e6>
    40f4:	80 e9       	ldi	r24, 0x90	; 144
    40f6:	91 e0       	ldi	r25, 0x01	; 1
    40f8:	98 a3       	std	Y+32, r25	; 0x20
    40fa:	8f 8f       	std	Y+31, r24	; 0x1f
    40fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40fe:	98 a1       	ldd	r25, Y+32	; 0x20
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	f1 f7       	brne	.-4      	; 0x4100 <SevSeg_voidMulBCD+0x1d4>
    4104:	98 a3       	std	Y+32, r25	; 0x20
    4106:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4108:	89 a1       	ldd	r24, Y+33	; 0x21
    410a:	9a a1       	ldd	r25, Y+34	; 0x22
    410c:	01 97       	sbiw	r24, 0x01	; 1
    410e:	9a a3       	std	Y+34, r25	; 0x22
    4110:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4112:	89 a1       	ldd	r24, Y+33	; 0x21
    4114:	9a a1       	ldd	r25, Y+34	; 0x22
    4116:	00 97       	sbiw	r24, 0x00	; 0
    4118:	69 f7       	brne	.-38     	; 0x40f4 <SevSeg_voidMulBCD+0x1c8>
    411a:	14 c0       	rjmp	.+40     	; 0x4144 <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    411c:	6b a1       	ldd	r22, Y+35	; 0x23
    411e:	7c a1       	ldd	r23, Y+36	; 0x24
    4120:	8d a1       	ldd	r24, Y+37	; 0x25
    4122:	9e a1       	ldd	r25, Y+38	; 0x26
    4124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	9a a3       	std	Y+34, r25	; 0x22
    412e:	89 a3       	std	Y+33, r24	; 0x21
    4130:	89 a1       	ldd	r24, Y+33	; 0x21
    4132:	9a a1       	ldd	r25, Y+34	; 0x22
    4134:	9e 8f       	std	Y+30, r25	; 0x1e
    4136:	8d 8f       	std	Y+29, r24	; 0x1d
    4138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    413a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    413c:	01 97       	sbiw	r24, 0x01	; 1
    413e:	f1 f7       	brne	.-4      	; 0x413c <SevSeg_voidMulBCD+0x210>
    4140:	9e 8f       	std	Y+30, r25	; 0x1e
    4142:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    4144:	8c a9       	ldd	r24, Y+52	; 0x34
    4146:	9d a9       	ldd	r25, Y+53	; 0x35
    4148:	ae a9       	ldd	r26, Y+54	; 0x36
    414a:	bf a9       	ldd	r27, Y+55	; 0x37
    414c:	fc 01       	movw	r30, r24
    414e:	e8 57       	subi	r30, 0x78	; 120
    4150:	fe 4f       	sbci	r31, 0xFE	; 254
    4152:	90 81       	ld	r25, Z
    4154:	82 e0       	ldi	r24, 0x02	; 2
    4156:	69 2f       	mov	r22, r25
    4158:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    415c:	82 e0       	ldi	r24, 0x02	; 2
    415e:	66 e0       	ldi	r22, 0x06	; 6
    4160:	41 e0       	ldi	r20, 0x01	; 1
    4162:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    4166:	82 e0       	ldi	r24, 0x02	; 2
    4168:	65 e0       	ldi	r22, 0x05	; 5
    416a:	40 e0       	ldi	r20, 0x00	; 0
    416c:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	a0 e2       	ldi	r26, 0x20	; 32
    4176:	b1 e4       	ldi	r27, 0x41	; 65
    4178:	89 8f       	std	Y+25, r24	; 0x19
    417a:	9a 8f       	std	Y+26, r25	; 0x1a
    417c:	ab 8f       	std	Y+27, r26	; 0x1b
    417e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4180:	69 8d       	ldd	r22, Y+25	; 0x19
    4182:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4184:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4186:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	4a e7       	ldi	r20, 0x7A	; 122
    418e:	55 e4       	ldi	r21, 0x45	; 69
    4190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	8d 8b       	std	Y+21, r24	; 0x15
    419a:	9e 8b       	std	Y+22, r25	; 0x16
    419c:	af 8b       	std	Y+23, r26	; 0x17
    419e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41a0:	6d 89       	ldd	r22, Y+21	; 0x15
    41a2:	7e 89       	ldd	r23, Y+22	; 0x16
    41a4:	8f 89       	ldd	r24, Y+23	; 0x17
    41a6:	98 8d       	ldd	r25, Y+24	; 0x18
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	40 e8       	ldi	r20, 0x80	; 128
    41ae:	5f e3       	ldi	r21, 0x3F	; 63
    41b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41b4:	88 23       	and	r24, r24
    41b6:	2c f4       	brge	.+10     	; 0x41c2 <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	9c 8b       	std	Y+20, r25	; 0x14
    41be:	8b 8b       	std	Y+19, r24	; 0x13
    41c0:	3f c0       	rjmp	.+126    	; 0x4240 <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    41c2:	6d 89       	ldd	r22, Y+21	; 0x15
    41c4:	7e 89       	ldd	r23, Y+22	; 0x16
    41c6:	8f 89       	ldd	r24, Y+23	; 0x17
    41c8:	98 8d       	ldd	r25, Y+24	; 0x18
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	3f ef       	ldi	r19, 0xFF	; 255
    41ce:	4f e7       	ldi	r20, 0x7F	; 127
    41d0:	57 e4       	ldi	r21, 0x47	; 71
    41d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41d6:	18 16       	cp	r1, r24
    41d8:	4c f5       	brge	.+82     	; 0x422c <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41da:	69 8d       	ldd	r22, Y+25	; 0x19
    41dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 e2       	ldi	r20, 0x20	; 32
    41e8:	51 e4       	ldi	r21, 0x41	; 65
    41ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	bc 01       	movw	r22, r24
    41f4:	cd 01       	movw	r24, r26
    41f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22
    41fe:	9c 8b       	std	Y+20, r25	; 0x14
    4200:	8b 8b       	std	Y+19, r24	; 0x13
    4202:	0f c0       	rjmp	.+30     	; 0x4222 <SevSeg_voidMulBCD+0x2f6>
    4204:	80 e9       	ldi	r24, 0x90	; 144
    4206:	91 e0       	ldi	r25, 0x01	; 1
    4208:	9a 8b       	std	Y+18, r25	; 0x12
    420a:	89 8b       	std	Y+17, r24	; 0x11
    420c:	89 89       	ldd	r24, Y+17	; 0x11
    420e:	9a 89       	ldd	r25, Y+18	; 0x12
    4210:	01 97       	sbiw	r24, 0x01	; 1
    4212:	f1 f7       	brne	.-4      	; 0x4210 <SevSeg_voidMulBCD+0x2e4>
    4214:	9a 8b       	std	Y+18, r25	; 0x12
    4216:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4218:	8b 89       	ldd	r24, Y+19	; 0x13
    421a:	9c 89       	ldd	r25, Y+20	; 0x14
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	9c 8b       	std	Y+20, r25	; 0x14
    4220:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4222:	8b 89       	ldd	r24, Y+19	; 0x13
    4224:	9c 89       	ldd	r25, Y+20	; 0x14
    4226:	00 97       	sbiw	r24, 0x00	; 0
    4228:	69 f7       	brne	.-38     	; 0x4204 <SevSeg_voidMulBCD+0x2d8>
    422a:	14 c0       	rjmp	.+40     	; 0x4254 <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422c:	6d 89       	ldd	r22, Y+21	; 0x15
    422e:	7e 89       	ldd	r23, Y+22	; 0x16
    4230:	8f 89       	ldd	r24, Y+23	; 0x17
    4232:	98 8d       	ldd	r25, Y+24	; 0x18
    4234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	9c 8b       	std	Y+20, r25	; 0x14
    423e:	8b 8b       	std	Y+19, r24	; 0x13
    4240:	8b 89       	ldd	r24, Y+19	; 0x13
    4242:	9c 89       	ldd	r25, Y+20	; 0x14
    4244:	98 8b       	std	Y+16, r25	; 0x10
    4246:	8f 87       	std	Y+15, r24	; 0x0f
    4248:	8f 85       	ldd	r24, Y+15	; 0x0f
    424a:	98 89       	ldd	r25, Y+16	; 0x10
    424c:	01 97       	sbiw	r24, 0x01	; 1
    424e:	f1 f7       	brne	.-4      	; 0x424c <SevSeg_voidMulBCD+0x320>
    4250:	98 8b       	std	Y+16, r25	; 0x10
    4252:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    4254:	8f a5       	ldd	r24, Y+47	; 0x2f
    4256:	98 a9       	ldd	r25, Y+48	; 0x30
    4258:	a9 a9       	ldd	r26, Y+49	; 0x31
    425a:	ba a9       	ldd	r27, Y+50	; 0x32
    425c:	01 96       	adiw	r24, 0x01	; 1
    425e:	a1 1d       	adc	r26, r1
    4260:	b1 1d       	adc	r27, r1
    4262:	8f a7       	std	Y+47, r24	; 0x2f
    4264:	98 ab       	std	Y+48, r25	; 0x30
    4266:	a9 ab       	std	Y+49, r26	; 0x31
    4268:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    426a:	2f a5       	ldd	r18, Y+47	; 0x2f
    426c:	38 a9       	ldd	r19, Y+48	; 0x30
    426e:	49 a9       	ldd	r20, Y+49	; 0x31
    4270:	5a a9       	ldd	r21, Y+50	; 0x32
    4272:	8b a5       	ldd	r24, Y+43	; 0x2b
    4274:	9c a5       	ldd	r25, Y+44	; 0x2c
    4276:	ad a5       	ldd	r26, Y+45	; 0x2d
    4278:	be a5       	ldd	r27, Y+46	; 0x2e
    427a:	28 17       	cp	r18, r24
    427c:	39 07       	cpc	r19, r25
    427e:	4a 07       	cpc	r20, r26
    4280:	5b 07       	cpc	r21, r27
    4282:	08 f4       	brcc	.+2      	; 0x4286 <SevSeg_voidMulBCD+0x35a>
    4284:	d7 ce       	rjmp	.-594    	; 0x4034 <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    4286:	8c ad       	ldd	r24, Y+60	; 0x3c
    4288:	28 2f       	mov	r18, r24
    428a:	33 27       	eor	r19, r19
    428c:	27 fd       	sbrc	r18, 7
    428e:	30 95       	com	r19
    4290:	43 2f       	mov	r20, r19
    4292:	53 2f       	mov	r21, r19
    4294:	8c a9       	ldd	r24, Y+52	; 0x34
    4296:	9d a9       	ldd	r25, Y+53	; 0x35
    4298:	ae a9       	ldd	r26, Y+54	; 0x36
    429a:	bf a9       	ldd	r27, Y+55	; 0x37
    429c:	28 17       	cp	r18, r24
    429e:	39 07       	cpc	r19, r25
    42a0:	4a 07       	cpc	r20, r26
    42a2:	5b 07       	cpc	r21, r27
    42a4:	89 f4       	brne	.+34     	; 0x42c8 <SevSeg_voidMulBCD+0x39c>
    42a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    42a8:	28 2f       	mov	r18, r24
    42aa:	33 27       	eor	r19, r19
    42ac:	27 fd       	sbrc	r18, 7
    42ae:	30 95       	com	r19
    42b0:	43 2f       	mov	r20, r19
    42b2:	53 2f       	mov	r21, r19
    42b4:	88 ad       	ldd	r24, Y+56	; 0x38
    42b6:	99 ad       	ldd	r25, Y+57	; 0x39
    42b8:	aa ad       	ldd	r26, Y+58	; 0x3a
    42ba:	bb ad       	ldd	r27, Y+59	; 0x3b
    42bc:	28 17       	cp	r18, r24
    42be:	39 07       	cpc	r19, r25
    42c0:	4a 07       	cpc	r20, r26
    42c2:	5b 07       	cpc	r21, r27
    42c4:	09 f4       	brne	.+2      	; 0x42c8 <SevSeg_voidMulBCD+0x39c>
    42c6:	31 c1       	rjmp	.+610    	; 0x452a <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    42c8:	8c a9       	ldd	r24, Y+52	; 0x34
    42ca:	9d a9       	ldd	r25, Y+53	; 0x35
    42cc:	ae a9       	ldd	r26, Y+54	; 0x36
    42ce:	bf a9       	ldd	r27, Y+55	; 0x37
    42d0:	01 96       	adiw	r24, 0x01	; 1
    42d2:	a1 1d       	adc	r26, r1
    42d4:	b1 1d       	adc	r27, r1
    42d6:	8c ab       	std	Y+52, r24	; 0x34
    42d8:	9d ab       	std	Y+53, r25	; 0x35
    42da:	ae ab       	std	Y+54, r26	; 0x36
    42dc:	bf ab       	std	Y+55, r27	; 0x37
    42de:	8c a9       	ldd	r24, Y+52	; 0x34
    42e0:	9d a9       	ldd	r25, Y+53	; 0x35
    42e2:	ae a9       	ldd	r26, Y+54	; 0x36
    42e4:	bf a9       	ldd	r27, Y+55	; 0x37
    42e6:	8a 30       	cpi	r24, 0x0A	; 10
    42e8:	91 05       	cpc	r25, r1
    42ea:	a1 05       	cpc	r26, r1
    42ec:	b1 05       	cpc	r27, r1
    42ee:	0c f4       	brge	.+2      	; 0x42f2 <SevSeg_voidMulBCD+0x3c6>
    42f0:	9c ce       	rjmp	.-712    	; 0x402a <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    42f2:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    42f4:	88 ad       	ldd	r24, Y+56	; 0x38
    42f6:	99 ad       	ldd	r25, Y+57	; 0x39
    42f8:	aa ad       	ldd	r26, Y+58	; 0x3a
    42fa:	bb ad       	ldd	r27, Y+59	; 0x3b
    42fc:	01 96       	adiw	r24, 0x01	; 1
    42fe:	a1 1d       	adc	r26, r1
    4300:	b1 1d       	adc	r27, r1
    4302:	88 af       	std	Y+56, r24	; 0x38
    4304:	99 af       	std	Y+57, r25	; 0x39
    4306:	aa af       	std	Y+58, r26	; 0x3a
    4308:	bb af       	std	Y+59, r27	; 0x3b
    430a:	8d ad       	ldd	r24, Y+61	; 0x3d
    430c:	28 2f       	mov	r18, r24
    430e:	33 27       	eor	r19, r19
    4310:	27 fd       	sbrc	r18, 7
    4312:	30 95       	com	r19
    4314:	43 2f       	mov	r20, r19
    4316:	53 2f       	mov	r21, r19
    4318:	88 ad       	ldd	r24, Y+56	; 0x38
    431a:	99 ad       	ldd	r25, Y+57	; 0x39
    431c:	aa ad       	ldd	r26, Y+58	; 0x3a
    431e:	bb ad       	ldd	r27, Y+59	; 0x3b
    4320:	28 17       	cp	r18, r24
    4322:	39 07       	cpc	r19, r25
    4324:	4a 07       	cpc	r20, r26
    4326:	5b 07       	cpc	r21, r27
    4328:	0c f0       	brlt	.+2      	; 0x432c <SevSeg_voidMulBCD+0x400>
    432a:	74 ce       	rjmp	.-792    	; 0x4014 <SevSeg_voidMulBCD+0xe8>
    432c:	fe c0       	rjmp	.+508    	; 0x452a <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    432e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4330:	99 27       	eor	r25, r25
    4332:	87 fd       	sbrc	r24, 7
    4334:	90 95       	com	r25
    4336:	a9 2f       	mov	r26, r25
    4338:	b9 2f       	mov	r27, r25
    433a:	88 af       	std	Y+56, r24	; 0x38
    433c:	99 af       	std	Y+57, r25	; 0x39
    433e:	aa af       	std	Y+58, r26	; 0x3a
    4340:	bb af       	std	Y+59, r27	; 0x3b
    4342:	e2 c0       	rjmp	.+452    	; 0x4508 <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    4344:	8b a9       	ldd	r24, Y+51	; 0x33
    4346:	8f 70       	andi	r24, 0x0F	; 15
    4348:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    434a:	88 ad       	ldd	r24, Y+56	; 0x38
    434c:	99 ad       	ldd	r25, Y+57	; 0x39
    434e:	aa ad       	ldd	r26, Y+58	; 0x3a
    4350:	bb ad       	ldd	r27, Y+59	; 0x3b
    4352:	88 0f       	add	r24, r24
    4354:	99 1f       	adc	r25, r25
    4356:	aa 1f       	adc	r26, r26
    4358:	bb 1f       	adc	r27, r27
    435a:	88 0f       	add	r24, r24
    435c:	99 1f       	adc	r25, r25
    435e:	aa 1f       	adc	r26, r26
    4360:	bb 1f       	adc	r27, r27
    4362:	88 0f       	add	r24, r24
    4364:	99 1f       	adc	r25, r25
    4366:	aa 1f       	adc	r26, r26
    4368:	bb 1f       	adc	r27, r27
    436a:	88 0f       	add	r24, r24
    436c:	99 1f       	adc	r25, r25
    436e:	aa 1f       	adc	r26, r26
    4370:	bb 1f       	adc	r27, r27
    4372:	98 2f       	mov	r25, r24
    4374:	8b a9       	ldd	r24, Y+51	; 0x33
    4376:	89 2b       	or	r24, r25
    4378:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    437a:	8e ad       	ldd	r24, Y+62	; 0x3e
    437c:	99 27       	eor	r25, r25
    437e:	87 fd       	sbrc	r24, 7
    4380:	90 95       	com	r25
    4382:	a9 2f       	mov	r26, r25
    4384:	b9 2f       	mov	r27, r25
    4386:	8c ab       	std	Y+52, r24	; 0x34
    4388:	9d ab       	std	Y+53, r25	; 0x35
    438a:	ae ab       	std	Y+54, r26	; 0x36
    438c:	bf ab       	std	Y+55, r27	; 0x37
    438e:	a8 c0       	rjmp	.+336    	; 0x44e0 <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    4390:	8b a9       	ldd	r24, Y+51	; 0x33
    4392:	80 7f       	andi	r24, 0xF0	; 240
    4394:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    4396:	9c a9       	ldd	r25, Y+52	; 0x34
    4398:	8b a9       	ldd	r24, Y+51	; 0x33
    439a:	89 2b       	or	r24, r25
    439c:	8b ab       	std	Y+51, r24	; 0x33
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	a0 e2       	ldi	r26, 0x20	; 32
    43a4:	b1 e4       	ldi	r27, 0x41	; 65
    43a6:	8b 87       	std	Y+11, r24	; 0x0b
    43a8:	9c 87       	std	Y+12, r25	; 0x0c
    43aa:	ad 87       	std	Y+13, r26	; 0x0d
    43ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    43b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    43b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    43b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	4a e7       	ldi	r20, 0x7A	; 122
    43bc:	55 e4       	ldi	r21, 0x45	; 69
    43be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	8f 83       	std	Y+7, r24	; 0x07
    43c8:	98 87       	std	Y+8, r25	; 0x08
    43ca:	a9 87       	std	Y+9, r26	; 0x09
    43cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43ce:	6f 81       	ldd	r22, Y+7	; 0x07
    43d0:	78 85       	ldd	r23, Y+8	; 0x08
    43d2:	89 85       	ldd	r24, Y+9	; 0x09
    43d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	40 e8       	ldi	r20, 0x80	; 128
    43dc:	5f e3       	ldi	r21, 0x3F	; 63
    43de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43e2:	88 23       	and	r24, r24
    43e4:	2c f4       	brge	.+10     	; 0x43f0 <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	9e 83       	std	Y+6, r25	; 0x06
    43ec:	8d 83       	std	Y+5, r24	; 0x05
    43ee:	3f c0       	rjmp	.+126    	; 0x446e <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    43f0:	6f 81       	ldd	r22, Y+7	; 0x07
    43f2:	78 85       	ldd	r23, Y+8	; 0x08
    43f4:	89 85       	ldd	r24, Y+9	; 0x09
    43f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	3f ef       	ldi	r19, 0xFF	; 255
    43fc:	4f e7       	ldi	r20, 0x7F	; 127
    43fe:	57 e4       	ldi	r21, 0x47	; 71
    4400:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4404:	18 16       	cp	r1, r24
    4406:	4c f5       	brge	.+82     	; 0x445a <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4408:	6b 85       	ldd	r22, Y+11	; 0x0b
    440a:	7c 85       	ldd	r23, Y+12	; 0x0c
    440c:	8d 85       	ldd	r24, Y+13	; 0x0d
    440e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	40 e2       	ldi	r20, 0x20	; 32
    4416:	51 e4       	ldi	r21, 0x41	; 65
    4418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	bc 01       	movw	r22, r24
    4422:	cd 01       	movw	r24, r26
    4424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	9e 83       	std	Y+6, r25	; 0x06
    442e:	8d 83       	std	Y+5, r24	; 0x05
    4430:	0f c0       	rjmp	.+30     	; 0x4450 <SevSeg_voidMulBCD+0x524>
    4432:	80 e9       	ldi	r24, 0x90	; 144
    4434:	91 e0       	ldi	r25, 0x01	; 1
    4436:	9c 83       	std	Y+4, r25	; 0x04
    4438:	8b 83       	std	Y+3, r24	; 0x03
    443a:	8b 81       	ldd	r24, Y+3	; 0x03
    443c:	9c 81       	ldd	r25, Y+4	; 0x04
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	f1 f7       	brne	.-4      	; 0x443e <SevSeg_voidMulBCD+0x512>
    4442:	9c 83       	std	Y+4, r25	; 0x04
    4444:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4446:	8d 81       	ldd	r24, Y+5	; 0x05
    4448:	9e 81       	ldd	r25, Y+6	; 0x06
    444a:	01 97       	sbiw	r24, 0x01	; 1
    444c:	9e 83       	std	Y+6, r25	; 0x06
    444e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4450:	8d 81       	ldd	r24, Y+5	; 0x05
    4452:	9e 81       	ldd	r25, Y+6	; 0x06
    4454:	00 97       	sbiw	r24, 0x00	; 0
    4456:	69 f7       	brne	.-38     	; 0x4432 <SevSeg_voidMulBCD+0x506>
    4458:	14 c0       	rjmp	.+40     	; 0x4482 <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    445a:	6f 81       	ldd	r22, Y+7	; 0x07
    445c:	78 85       	ldd	r23, Y+8	; 0x08
    445e:	89 85       	ldd	r24, Y+9	; 0x09
    4460:	9a 85       	ldd	r25, Y+10	; 0x0a
    4462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	9e 83       	std	Y+6, r25	; 0x06
    446c:	8d 83       	std	Y+5, r24	; 0x05
    446e:	8d 81       	ldd	r24, Y+5	; 0x05
    4470:	9e 81       	ldd	r25, Y+6	; 0x06
    4472:	9a 83       	std	Y+2, r25	; 0x02
    4474:	89 83       	std	Y+1, r24	; 0x01
    4476:	89 81       	ldd	r24, Y+1	; 0x01
    4478:	9a 81       	ldd	r25, Y+2	; 0x02
    447a:	01 97       	sbiw	r24, 0x01	; 1
    447c:	f1 f7       	brne	.-4      	; 0x447a <SevSeg_voidMulBCD+0x54e>
    447e:	9a 83       	std	Y+2, r25	; 0x02
    4480:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    4482:	82 e0       	ldi	r24, 0x02	; 2
    4484:	6b a9       	ldd	r22, Y+51	; 0x33
    4486:	0e 94 79 14 	call	0x28f2	; 0x28f2 <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    448a:	8c ad       	ldd	r24, Y+60	; 0x3c
    448c:	28 2f       	mov	r18, r24
    448e:	33 27       	eor	r19, r19
    4490:	27 fd       	sbrc	r18, 7
    4492:	30 95       	com	r19
    4494:	43 2f       	mov	r20, r19
    4496:	53 2f       	mov	r21, r19
    4498:	8c a9       	ldd	r24, Y+52	; 0x34
    449a:	9d a9       	ldd	r25, Y+53	; 0x35
    449c:	ae a9       	ldd	r26, Y+54	; 0x36
    449e:	bf a9       	ldd	r27, Y+55	; 0x37
    44a0:	28 17       	cp	r18, r24
    44a2:	39 07       	cpc	r19, r25
    44a4:	4a 07       	cpc	r20, r26
    44a6:	5b 07       	cpc	r21, r27
    44a8:	81 f4       	brne	.+32     	; 0x44ca <SevSeg_voidMulBCD+0x59e>
    44aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    44ac:	28 2f       	mov	r18, r24
    44ae:	33 27       	eor	r19, r19
    44b0:	27 fd       	sbrc	r18, 7
    44b2:	30 95       	com	r19
    44b4:	43 2f       	mov	r20, r19
    44b6:	53 2f       	mov	r21, r19
    44b8:	88 ad       	ldd	r24, Y+56	; 0x38
    44ba:	99 ad       	ldd	r25, Y+57	; 0x39
    44bc:	aa ad       	ldd	r26, Y+58	; 0x3a
    44be:	bb ad       	ldd	r27, Y+59	; 0x3b
    44c0:	28 17       	cp	r18, r24
    44c2:	39 07       	cpc	r19, r25
    44c4:	4a 07       	cpc	r20, r26
    44c6:	5b 07       	cpc	r21, r27
    44c8:	81 f1       	breq	.+96     	; 0x452a <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    44ca:	8c a9       	ldd	r24, Y+52	; 0x34
    44cc:	9d a9       	ldd	r25, Y+53	; 0x35
    44ce:	ae a9       	ldd	r26, Y+54	; 0x36
    44d0:	bf a9       	ldd	r27, Y+55	; 0x37
    44d2:	01 97       	sbiw	r24, 0x01	; 1
    44d4:	a1 09       	sbc	r26, r1
    44d6:	b1 09       	sbc	r27, r1
    44d8:	8c ab       	std	Y+52, r24	; 0x34
    44da:	9d ab       	std	Y+53, r25	; 0x35
    44dc:	ae ab       	std	Y+54, r26	; 0x36
    44de:	bf ab       	std	Y+55, r27	; 0x37
    44e0:	8c a9       	ldd	r24, Y+52	; 0x34
    44e2:	9d a9       	ldd	r25, Y+53	; 0x35
    44e4:	ae a9       	ldd	r26, Y+54	; 0x36
    44e6:	bf a9       	ldd	r27, Y+55	; 0x37
    44e8:	bb 23       	and	r27, r27
    44ea:	0c f0       	brlt	.+2      	; 0x44ee <SevSeg_voidMulBCD+0x5c2>
    44ec:	51 cf       	rjmp	.-350    	; 0x4390 <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    44ee:	89 e0       	ldi	r24, 0x09	; 9
    44f0:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    44f2:	88 ad       	ldd	r24, Y+56	; 0x38
    44f4:	99 ad       	ldd	r25, Y+57	; 0x39
    44f6:	aa ad       	ldd	r26, Y+58	; 0x3a
    44f8:	bb ad       	ldd	r27, Y+59	; 0x3b
    44fa:	01 97       	sbiw	r24, 0x01	; 1
    44fc:	a1 09       	sbc	r26, r1
    44fe:	b1 09       	sbc	r27, r1
    4500:	88 af       	std	Y+56, r24	; 0x38
    4502:	99 af       	std	Y+57, r25	; 0x39
    4504:	aa af       	std	Y+58, r26	; 0x3a
    4506:	bb af       	std	Y+59, r27	; 0x3b
    4508:	8d ad       	ldd	r24, Y+61	; 0x3d
    450a:	28 2f       	mov	r18, r24
    450c:	33 27       	eor	r19, r19
    450e:	27 fd       	sbrc	r18, 7
    4510:	30 95       	com	r19
    4512:	43 2f       	mov	r20, r19
    4514:	53 2f       	mov	r21, r19
    4516:	88 ad       	ldd	r24, Y+56	; 0x38
    4518:	99 ad       	ldd	r25, Y+57	; 0x39
    451a:	aa ad       	ldd	r26, Y+58	; 0x3a
    451c:	bb ad       	ldd	r27, Y+59	; 0x3b
    451e:	82 17       	cp	r24, r18
    4520:	93 07       	cpc	r25, r19
    4522:	a4 07       	cpc	r26, r20
    4524:	b5 07       	cpc	r27, r21
    4526:	0c f0       	brlt	.+2      	; 0x452a <SevSeg_voidMulBCD+0x5fe>
    4528:	0d cf       	rjmp	.-486    	; 0x4344 <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    452a:	cf 5b       	subi	r28, 0xBF	; 191
    452c:	df 4f       	sbci	r29, 0xFF	; 255
    452e:	0f b6       	in	r0, 0x3f	; 63
    4530:	f8 94       	cli
    4532:	de bf       	out	0x3e, r29	; 62
    4534:	0f be       	out	0x3f, r0	; 63
    4536:	cd bf       	out	0x3d, r28	; 61
    4538:	cf 91       	pop	r28
    453a:	df 91       	pop	r29
    453c:	08 95       	ret

0000453e <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    453e:	0f 93       	push	r16
    4540:	1f 93       	push	r17
    4542:	df 93       	push	r29
    4544:	cf 93       	push	r28
    4546:	cd b7       	in	r28, 0x3d	; 61
    4548:	de b7       	in	r29, 0x3e	; 62
    454a:	cc 58       	subi	r28, 0x8C	; 140
    454c:	d0 40       	sbci	r29, 0x00	; 0
    454e:	0f b6       	in	r0, 0x3f	; 63
    4550:	f8 94       	cli
    4552:	de bf       	out	0x3e, r29	; 62
    4554:	0f be       	out	0x3f, r0	; 63
    4556:	cd bf       	out	0x3d, r28	; 61
    4558:	fe 01       	movw	r30, r28
    455a:	e7 57       	subi	r30, 0x77	; 119
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	ac e0       	ldi	r26, 0x0C	; 12
    4564:	b2 e4       	ldi	r27, 0x42	; 66
    4566:	80 83       	st	Z, r24
    4568:	91 83       	std	Z+1, r25	; 0x01
    456a:	a2 83       	std	Z+2, r26	; 0x02
    456c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456e:	8e 01       	movw	r16, r28
    4570:	0b 57       	subi	r16, 0x7B	; 123
    4572:	1f 4f       	sbci	r17, 0xFF	; 255
    4574:	fe 01       	movw	r30, r28
    4576:	e7 57       	subi	r30, 0x77	; 119
    4578:	ff 4f       	sbci	r31, 0xFF	; 255
    457a:	60 81       	ld	r22, Z
    457c:	71 81       	ldd	r23, Z+1	; 0x01
    457e:	82 81       	ldd	r24, Z+2	; 0x02
    4580:	93 81       	ldd	r25, Z+3	; 0x03
    4582:	20 e0       	ldi	r18, 0x00	; 0
    4584:	30 e0       	ldi	r19, 0x00	; 0
    4586:	4a e7       	ldi	r20, 0x7A	; 122
    4588:	55 e4       	ldi	r21, 0x45	; 69
    458a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458e:	dc 01       	movw	r26, r24
    4590:	cb 01       	movw	r24, r22
    4592:	f8 01       	movw	r30, r16
    4594:	80 83       	st	Z, r24
    4596:	91 83       	std	Z+1, r25	; 0x01
    4598:	a2 83       	std	Z+2, r26	; 0x02
    459a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    459c:	fe 01       	movw	r30, r28
    459e:	eb 57       	subi	r30, 0x7B	; 123
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	60 81       	ld	r22, Z
    45a4:	71 81       	ldd	r23, Z+1	; 0x01
    45a6:	82 81       	ldd	r24, Z+2	; 0x02
    45a8:	93 81       	ldd	r25, Z+3	; 0x03
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	40 e8       	ldi	r20, 0x80	; 128
    45b0:	5f e3       	ldi	r21, 0x3F	; 63
    45b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45b6:	88 23       	and	r24, r24
    45b8:	44 f4       	brge	.+16     	; 0x45ca <LCD_voidInit+0x8c>
		__ticks = 1;
    45ba:	fe 01       	movw	r30, r28
    45bc:	ed 57       	subi	r30, 0x7D	; 125
    45be:	ff 4f       	sbci	r31, 0xFF	; 255
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	91 83       	std	Z+1, r25	; 0x01
    45c6:	80 83       	st	Z, r24
    45c8:	64 c0       	rjmp	.+200    	; 0x4692 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    45ca:	fe 01       	movw	r30, r28
    45cc:	eb 57       	subi	r30, 0x7B	; 123
    45ce:	ff 4f       	sbci	r31, 0xFF	; 255
    45d0:	60 81       	ld	r22, Z
    45d2:	71 81       	ldd	r23, Z+1	; 0x01
    45d4:	82 81       	ldd	r24, Z+2	; 0x02
    45d6:	93 81       	ldd	r25, Z+3	; 0x03
    45d8:	20 e0       	ldi	r18, 0x00	; 0
    45da:	3f ef       	ldi	r19, 0xFF	; 255
    45dc:	4f e7       	ldi	r20, 0x7F	; 127
    45de:	57 e4       	ldi	r21, 0x47	; 71
    45e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45e4:	18 16       	cp	r1, r24
    45e6:	0c f0       	brlt	.+2      	; 0x45ea <LCD_voidInit+0xac>
    45e8:	43 c0       	rjmp	.+134    	; 0x4670 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ea:	fe 01       	movw	r30, r28
    45ec:	e7 57       	subi	r30, 0x77	; 119
    45ee:	ff 4f       	sbci	r31, 0xFF	; 255
    45f0:	60 81       	ld	r22, Z
    45f2:	71 81       	ldd	r23, Z+1	; 0x01
    45f4:	82 81       	ldd	r24, Z+2	; 0x02
    45f6:	93 81       	ldd	r25, Z+3	; 0x03
    45f8:	20 e0       	ldi	r18, 0x00	; 0
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	40 e2       	ldi	r20, 0x20	; 32
    45fe:	51 e4       	ldi	r21, 0x41	; 65
    4600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	8e 01       	movw	r16, r28
    460a:	0d 57       	subi	r16, 0x7D	; 125
    460c:	1f 4f       	sbci	r17, 0xFF	; 255
    460e:	bc 01       	movw	r22, r24
    4610:	cd 01       	movw	r24, r26
    4612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4616:	dc 01       	movw	r26, r24
    4618:	cb 01       	movw	r24, r22
    461a:	f8 01       	movw	r30, r16
    461c:	91 83       	std	Z+1, r25	; 0x01
    461e:	80 83       	st	Z, r24
    4620:	1f c0       	rjmp	.+62     	; 0x4660 <LCD_voidInit+0x122>
    4622:	fe 01       	movw	r30, r28
    4624:	ef 57       	subi	r30, 0x7F	; 127
    4626:	ff 4f       	sbci	r31, 0xFF	; 255
    4628:	80 e9       	ldi	r24, 0x90	; 144
    462a:	91 e0       	ldi	r25, 0x01	; 1
    462c:	91 83       	std	Z+1, r25	; 0x01
    462e:	80 83       	st	Z, r24
    4630:	fe 01       	movw	r30, r28
    4632:	ef 57       	subi	r30, 0x7F	; 127
    4634:	ff 4f       	sbci	r31, 0xFF	; 255
    4636:	80 81       	ld	r24, Z
    4638:	91 81       	ldd	r25, Z+1	; 0x01
    463a:	01 97       	sbiw	r24, 0x01	; 1
    463c:	f1 f7       	brne	.-4      	; 0x463a <LCD_voidInit+0xfc>
    463e:	fe 01       	movw	r30, r28
    4640:	ef 57       	subi	r30, 0x7F	; 127
    4642:	ff 4f       	sbci	r31, 0xFF	; 255
    4644:	91 83       	std	Z+1, r25	; 0x01
    4646:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4648:	de 01       	movw	r26, r28
    464a:	ad 57       	subi	r26, 0x7D	; 125
    464c:	bf 4f       	sbci	r27, 0xFF	; 255
    464e:	fe 01       	movw	r30, r28
    4650:	ed 57       	subi	r30, 0x7D	; 125
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	80 81       	ld	r24, Z
    4656:	91 81       	ldd	r25, Z+1	; 0x01
    4658:	01 97       	sbiw	r24, 0x01	; 1
    465a:	11 96       	adiw	r26, 0x01	; 1
    465c:	9c 93       	st	X, r25
    465e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4660:	fe 01       	movw	r30, r28
    4662:	ed 57       	subi	r30, 0x7D	; 125
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	80 81       	ld	r24, Z
    4668:	91 81       	ldd	r25, Z+1	; 0x01
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	d1 f6       	brne	.-76     	; 0x4622 <LCD_voidInit+0xe4>
    466e:	27 c0       	rjmp	.+78     	; 0x46be <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4670:	8e 01       	movw	r16, r28
    4672:	0d 57       	subi	r16, 0x7D	; 125
    4674:	1f 4f       	sbci	r17, 0xFF	; 255
    4676:	fe 01       	movw	r30, r28
    4678:	eb 57       	subi	r30, 0x7B	; 123
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	60 81       	ld	r22, Z
    467e:	71 81       	ldd	r23, Z+1	; 0x01
    4680:	82 81       	ldd	r24, Z+2	; 0x02
    4682:	93 81       	ldd	r25, Z+3	; 0x03
    4684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4688:	dc 01       	movw	r26, r24
    468a:	cb 01       	movw	r24, r22
    468c:	f8 01       	movw	r30, r16
    468e:	91 83       	std	Z+1, r25	; 0x01
    4690:	80 83       	st	Z, r24
    4692:	de 01       	movw	r26, r28
    4694:	a1 58       	subi	r26, 0x81	; 129
    4696:	bf 4f       	sbci	r27, 0xFF	; 255
    4698:	fe 01       	movw	r30, r28
    469a:	ed 57       	subi	r30, 0x7D	; 125
    469c:	ff 4f       	sbci	r31, 0xFF	; 255
    469e:	80 81       	ld	r24, Z
    46a0:	91 81       	ldd	r25, Z+1	; 0x01
    46a2:	8d 93       	st	X+, r24
    46a4:	9c 93       	st	X, r25
    46a6:	fe 01       	movw	r30, r28
    46a8:	e1 58       	subi	r30, 0x81	; 129
    46aa:	ff 4f       	sbci	r31, 0xFF	; 255
    46ac:	80 81       	ld	r24, Z
    46ae:	91 81       	ldd	r25, Z+1	; 0x01
    46b0:	01 97       	sbiw	r24, 0x01	; 1
    46b2:	f1 f7       	brne	.-4      	; 0x46b0 <LCD_voidInit+0x172>
    46b4:	fe 01       	movw	r30, r28
    46b6:	e1 58       	subi	r30, 0x81	; 129
    46b8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ba:	91 83       	std	Z+1, r25	; 0x01
    46bc:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    46be:	80 e3       	ldi	r24, 0x30	; 48
    46c0:	0e 94 8f 29 	call	0x531e	; 0x531e <LCD_voidSendInitCommand>
    46c4:	fe 01       	movw	r30, r28
    46c6:	e5 58       	subi	r30, 0x85	; 133
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	a0 ea       	ldi	r26, 0xA0	; 160
    46d0:	b0 e4       	ldi	r27, 0x40	; 64
    46d2:	80 83       	st	Z, r24
    46d4:	91 83       	std	Z+1, r25	; 0x01
    46d6:	a2 83       	std	Z+2, r26	; 0x02
    46d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46da:	8e 01       	movw	r16, r28
    46dc:	09 58       	subi	r16, 0x89	; 137
    46de:	1f 4f       	sbci	r17, 0xFF	; 255
    46e0:	fe 01       	movw	r30, r28
    46e2:	e5 58       	subi	r30, 0x85	; 133
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	60 81       	ld	r22, Z
    46e8:	71 81       	ldd	r23, Z+1	; 0x01
    46ea:	82 81       	ldd	r24, Z+2	; 0x02
    46ec:	93 81       	ldd	r25, Z+3	; 0x03
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	4a e7       	ldi	r20, 0x7A	; 122
    46f4:	55 e4       	ldi	r21, 0x45	; 69
    46f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	f8 01       	movw	r30, r16
    4700:	80 83       	st	Z, r24
    4702:	91 83       	std	Z+1, r25	; 0x01
    4704:	a2 83       	std	Z+2, r26	; 0x02
    4706:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4708:	fe 01       	movw	r30, r28
    470a:	e9 58       	subi	r30, 0x89	; 137
    470c:	ff 4f       	sbci	r31, 0xFF	; 255
    470e:	60 81       	ld	r22, Z
    4710:	71 81       	ldd	r23, Z+1	; 0x01
    4712:	82 81       	ldd	r24, Z+2	; 0x02
    4714:	93 81       	ldd	r25, Z+3	; 0x03
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	40 e8       	ldi	r20, 0x80	; 128
    471c:	5f e3       	ldi	r21, 0x3F	; 63
    471e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4722:	88 23       	and	r24, r24
    4724:	44 f4       	brge	.+16     	; 0x4736 <LCD_voidInit+0x1f8>
		__ticks = 1;
    4726:	fe 01       	movw	r30, r28
    4728:	eb 58       	subi	r30, 0x8B	; 139
    472a:	ff 4f       	sbci	r31, 0xFF	; 255
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	91 83       	std	Z+1, r25	; 0x01
    4732:	80 83       	st	Z, r24
    4734:	64 c0       	rjmp	.+200    	; 0x47fe <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    4736:	fe 01       	movw	r30, r28
    4738:	e9 58       	subi	r30, 0x89	; 137
    473a:	ff 4f       	sbci	r31, 0xFF	; 255
    473c:	60 81       	ld	r22, Z
    473e:	71 81       	ldd	r23, Z+1	; 0x01
    4740:	82 81       	ldd	r24, Z+2	; 0x02
    4742:	93 81       	ldd	r25, Z+3	; 0x03
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	3f ef       	ldi	r19, 0xFF	; 255
    4748:	4f e7       	ldi	r20, 0x7F	; 127
    474a:	57 e4       	ldi	r21, 0x47	; 71
    474c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4750:	18 16       	cp	r1, r24
    4752:	0c f0       	brlt	.+2      	; 0x4756 <LCD_voidInit+0x218>
    4754:	43 c0       	rjmp	.+134    	; 0x47dc <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4756:	fe 01       	movw	r30, r28
    4758:	e5 58       	subi	r30, 0x85	; 133
    475a:	ff 4f       	sbci	r31, 0xFF	; 255
    475c:	60 81       	ld	r22, Z
    475e:	71 81       	ldd	r23, Z+1	; 0x01
    4760:	82 81       	ldd	r24, Z+2	; 0x02
    4762:	93 81       	ldd	r25, Z+3	; 0x03
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	40 e2       	ldi	r20, 0x20	; 32
    476a:	51 e4       	ldi	r21, 0x41	; 65
    476c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	8e 01       	movw	r16, r28
    4776:	0b 58       	subi	r16, 0x8B	; 139
    4778:	1f 4f       	sbci	r17, 0xFF	; 255
    477a:	bc 01       	movw	r22, r24
    477c:	cd 01       	movw	r24, r26
    477e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4782:	dc 01       	movw	r26, r24
    4784:	cb 01       	movw	r24, r22
    4786:	f8 01       	movw	r30, r16
    4788:	91 83       	std	Z+1, r25	; 0x01
    478a:	80 83       	st	Z, r24
    478c:	1f c0       	rjmp	.+62     	; 0x47cc <LCD_voidInit+0x28e>
    478e:	fe 01       	movw	r30, r28
    4790:	ed 58       	subi	r30, 0x8D	; 141
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	80 e9       	ldi	r24, 0x90	; 144
    4796:	91 e0       	ldi	r25, 0x01	; 1
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	80 83       	st	Z, r24
    479c:	fe 01       	movw	r30, r28
    479e:	ed 58       	subi	r30, 0x8D	; 141
    47a0:	ff 4f       	sbci	r31, 0xFF	; 255
    47a2:	80 81       	ld	r24, Z
    47a4:	91 81       	ldd	r25, Z+1	; 0x01
    47a6:	01 97       	sbiw	r24, 0x01	; 1
    47a8:	f1 f7       	brne	.-4      	; 0x47a6 <LCD_voidInit+0x268>
    47aa:	fe 01       	movw	r30, r28
    47ac:	ed 58       	subi	r30, 0x8D	; 141
    47ae:	ff 4f       	sbci	r31, 0xFF	; 255
    47b0:	91 83       	std	Z+1, r25	; 0x01
    47b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b4:	de 01       	movw	r26, r28
    47b6:	ab 58       	subi	r26, 0x8B	; 139
    47b8:	bf 4f       	sbci	r27, 0xFF	; 255
    47ba:	fe 01       	movw	r30, r28
    47bc:	eb 58       	subi	r30, 0x8B	; 139
    47be:	ff 4f       	sbci	r31, 0xFF	; 255
    47c0:	80 81       	ld	r24, Z
    47c2:	91 81       	ldd	r25, Z+1	; 0x01
    47c4:	01 97       	sbiw	r24, 0x01	; 1
    47c6:	11 96       	adiw	r26, 0x01	; 1
    47c8:	9c 93       	st	X, r25
    47ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47cc:	fe 01       	movw	r30, r28
    47ce:	eb 58       	subi	r30, 0x8B	; 139
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	80 81       	ld	r24, Z
    47d4:	91 81       	ldd	r25, Z+1	; 0x01
    47d6:	00 97       	sbiw	r24, 0x00	; 0
    47d8:	d1 f6       	brne	.-76     	; 0x478e <LCD_voidInit+0x250>
    47da:	27 c0       	rjmp	.+78     	; 0x482a <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47dc:	8e 01       	movw	r16, r28
    47de:	0b 58       	subi	r16, 0x8B	; 139
    47e0:	1f 4f       	sbci	r17, 0xFF	; 255
    47e2:	fe 01       	movw	r30, r28
    47e4:	e9 58       	subi	r30, 0x89	; 137
    47e6:	ff 4f       	sbci	r31, 0xFF	; 255
    47e8:	60 81       	ld	r22, Z
    47ea:	71 81       	ldd	r23, Z+1	; 0x01
    47ec:	82 81       	ldd	r24, Z+2	; 0x02
    47ee:	93 81       	ldd	r25, Z+3	; 0x03
    47f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f4:	dc 01       	movw	r26, r24
    47f6:	cb 01       	movw	r24, r22
    47f8:	f8 01       	movw	r30, r16
    47fa:	91 83       	std	Z+1, r25	; 0x01
    47fc:	80 83       	st	Z, r24
    47fe:	de 01       	movw	r26, r28
    4800:	af 58       	subi	r26, 0x8F	; 143
    4802:	bf 4f       	sbci	r27, 0xFF	; 255
    4804:	fe 01       	movw	r30, r28
    4806:	eb 58       	subi	r30, 0x8B	; 139
    4808:	ff 4f       	sbci	r31, 0xFF	; 255
    480a:	80 81       	ld	r24, Z
    480c:	91 81       	ldd	r25, Z+1	; 0x01
    480e:	8d 93       	st	X+, r24
    4810:	9c 93       	st	X, r25
    4812:	fe 01       	movw	r30, r28
    4814:	ef 58       	subi	r30, 0x8F	; 143
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	80 81       	ld	r24, Z
    481a:	91 81       	ldd	r25, Z+1	; 0x01
    481c:	01 97       	sbiw	r24, 0x01	; 1
    481e:	f1 f7       	brne	.-4      	; 0x481c <LCD_voidInit+0x2de>
    4820:	fe 01       	movw	r30, r28
    4822:	ef 58       	subi	r30, 0x8F	; 143
    4824:	ff 4f       	sbci	r31, 0xFF	; 255
    4826:	91 83       	std	Z+1, r25	; 0x01
    4828:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    482a:	80 e3       	ldi	r24, 0x30	; 48
    482c:	0e 94 8f 29 	call	0x531e	; 0x531e <LCD_voidSendInitCommand>
    4830:	fe 01       	movw	r30, r28
    4832:	e3 59       	subi	r30, 0x93	; 147
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	a0 e8       	ldi	r26, 0x80	; 128
    483c:	bf e3       	ldi	r27, 0x3F	; 63
    483e:	80 83       	st	Z, r24
    4840:	91 83       	std	Z+1, r25	; 0x01
    4842:	a2 83       	std	Z+2, r26	; 0x02
    4844:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4846:	8e 01       	movw	r16, r28
    4848:	07 59       	subi	r16, 0x97	; 151
    484a:	1f 4f       	sbci	r17, 0xFF	; 255
    484c:	fe 01       	movw	r30, r28
    484e:	e3 59       	subi	r30, 0x93	; 147
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	60 81       	ld	r22, Z
    4854:	71 81       	ldd	r23, Z+1	; 0x01
    4856:	82 81       	ldd	r24, Z+2	; 0x02
    4858:	93 81       	ldd	r25, Z+3	; 0x03
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	4a e7       	ldi	r20, 0x7A	; 122
    4860:	55 e4       	ldi	r21, 0x45	; 69
    4862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4866:	dc 01       	movw	r26, r24
    4868:	cb 01       	movw	r24, r22
    486a:	f8 01       	movw	r30, r16
    486c:	80 83       	st	Z, r24
    486e:	91 83       	std	Z+1, r25	; 0x01
    4870:	a2 83       	std	Z+2, r26	; 0x02
    4872:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4874:	fe 01       	movw	r30, r28
    4876:	e7 59       	subi	r30, 0x97	; 151
    4878:	ff 4f       	sbci	r31, 0xFF	; 255
    487a:	60 81       	ld	r22, Z
    487c:	71 81       	ldd	r23, Z+1	; 0x01
    487e:	82 81       	ldd	r24, Z+2	; 0x02
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	40 e8       	ldi	r20, 0x80	; 128
    4888:	5f e3       	ldi	r21, 0x3F	; 63
    488a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    488e:	88 23       	and	r24, r24
    4890:	44 f4       	brge	.+16     	; 0x48a2 <LCD_voidInit+0x364>
		__ticks = 1;
    4892:	fe 01       	movw	r30, r28
    4894:	e9 59       	subi	r30, 0x99	; 153
    4896:	ff 4f       	sbci	r31, 0xFF	; 255
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	91 83       	std	Z+1, r25	; 0x01
    489e:	80 83       	st	Z, r24
    48a0:	64 c0       	rjmp	.+200    	; 0x496a <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    48a2:	fe 01       	movw	r30, r28
    48a4:	e7 59       	subi	r30, 0x97	; 151
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	60 81       	ld	r22, Z
    48aa:	71 81       	ldd	r23, Z+1	; 0x01
    48ac:	82 81       	ldd	r24, Z+2	; 0x02
    48ae:	93 81       	ldd	r25, Z+3	; 0x03
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	3f ef       	ldi	r19, 0xFF	; 255
    48b4:	4f e7       	ldi	r20, 0x7F	; 127
    48b6:	57 e4       	ldi	r21, 0x47	; 71
    48b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48bc:	18 16       	cp	r1, r24
    48be:	0c f0       	brlt	.+2      	; 0x48c2 <LCD_voidInit+0x384>
    48c0:	43 c0       	rjmp	.+134    	; 0x4948 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c2:	fe 01       	movw	r30, r28
    48c4:	e3 59       	subi	r30, 0x93	; 147
    48c6:	ff 4f       	sbci	r31, 0xFF	; 255
    48c8:	60 81       	ld	r22, Z
    48ca:	71 81       	ldd	r23, Z+1	; 0x01
    48cc:	82 81       	ldd	r24, Z+2	; 0x02
    48ce:	93 81       	ldd	r25, Z+3	; 0x03
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	40 e2       	ldi	r20, 0x20	; 32
    48d6:	51 e4       	ldi	r21, 0x41	; 65
    48d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	8e 01       	movw	r16, r28
    48e2:	09 59       	subi	r16, 0x99	; 153
    48e4:	1f 4f       	sbci	r17, 0xFF	; 255
    48e6:	bc 01       	movw	r22, r24
    48e8:	cd 01       	movw	r24, r26
    48ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ee:	dc 01       	movw	r26, r24
    48f0:	cb 01       	movw	r24, r22
    48f2:	f8 01       	movw	r30, r16
    48f4:	91 83       	std	Z+1, r25	; 0x01
    48f6:	80 83       	st	Z, r24
    48f8:	1f c0       	rjmp	.+62     	; 0x4938 <LCD_voidInit+0x3fa>
    48fa:	fe 01       	movw	r30, r28
    48fc:	eb 59       	subi	r30, 0x9B	; 155
    48fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4900:	80 e9       	ldi	r24, 0x90	; 144
    4902:	91 e0       	ldi	r25, 0x01	; 1
    4904:	91 83       	std	Z+1, r25	; 0x01
    4906:	80 83       	st	Z, r24
    4908:	fe 01       	movw	r30, r28
    490a:	eb 59       	subi	r30, 0x9B	; 155
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	80 81       	ld	r24, Z
    4910:	91 81       	ldd	r25, Z+1	; 0x01
    4912:	01 97       	sbiw	r24, 0x01	; 1
    4914:	f1 f7       	brne	.-4      	; 0x4912 <LCD_voidInit+0x3d4>
    4916:	fe 01       	movw	r30, r28
    4918:	eb 59       	subi	r30, 0x9B	; 155
    491a:	ff 4f       	sbci	r31, 0xFF	; 255
    491c:	91 83       	std	Z+1, r25	; 0x01
    491e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4920:	de 01       	movw	r26, r28
    4922:	a9 59       	subi	r26, 0x99	; 153
    4924:	bf 4f       	sbci	r27, 0xFF	; 255
    4926:	fe 01       	movw	r30, r28
    4928:	e9 59       	subi	r30, 0x99	; 153
    492a:	ff 4f       	sbci	r31, 0xFF	; 255
    492c:	80 81       	ld	r24, Z
    492e:	91 81       	ldd	r25, Z+1	; 0x01
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	11 96       	adiw	r26, 0x01	; 1
    4934:	9c 93       	st	X, r25
    4936:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4938:	fe 01       	movw	r30, r28
    493a:	e9 59       	subi	r30, 0x99	; 153
    493c:	ff 4f       	sbci	r31, 0xFF	; 255
    493e:	80 81       	ld	r24, Z
    4940:	91 81       	ldd	r25, Z+1	; 0x01
    4942:	00 97       	sbiw	r24, 0x00	; 0
    4944:	d1 f6       	brne	.-76     	; 0x48fa <LCD_voidInit+0x3bc>
    4946:	27 c0       	rjmp	.+78     	; 0x4996 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4948:	8e 01       	movw	r16, r28
    494a:	09 59       	subi	r16, 0x99	; 153
    494c:	1f 4f       	sbci	r17, 0xFF	; 255
    494e:	fe 01       	movw	r30, r28
    4950:	e7 59       	subi	r30, 0x97	; 151
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	60 81       	ld	r22, Z
    4956:	71 81       	ldd	r23, Z+1	; 0x01
    4958:	82 81       	ldd	r24, Z+2	; 0x02
    495a:	93 81       	ldd	r25, Z+3	; 0x03
    495c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	f8 01       	movw	r30, r16
    4966:	91 83       	std	Z+1, r25	; 0x01
    4968:	80 83       	st	Z, r24
    496a:	de 01       	movw	r26, r28
    496c:	ad 59       	subi	r26, 0x9D	; 157
    496e:	bf 4f       	sbci	r27, 0xFF	; 255
    4970:	fe 01       	movw	r30, r28
    4972:	e9 59       	subi	r30, 0x99	; 153
    4974:	ff 4f       	sbci	r31, 0xFF	; 255
    4976:	80 81       	ld	r24, Z
    4978:	91 81       	ldd	r25, Z+1	; 0x01
    497a:	8d 93       	st	X+, r24
    497c:	9c 93       	st	X, r25
    497e:	fe 01       	movw	r30, r28
    4980:	ed 59       	subi	r30, 0x9D	; 157
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	80 81       	ld	r24, Z
    4986:	91 81       	ldd	r25, Z+1	; 0x01
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	f1 f7       	brne	.-4      	; 0x4988 <LCD_voidInit+0x44a>
    498c:	fe 01       	movw	r30, r28
    498e:	ed 59       	subi	r30, 0x9D	; 157
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	91 83       	std	Z+1, r25	; 0x01
    4994:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    4996:	80 e3       	ldi	r24, 0x30	; 48
    4998:	0e 94 8f 29 	call	0x531e	; 0x531e <LCD_voidSendInitCommand>
    499c:	fe 01       	movw	r30, r28
    499e:	e1 5a       	subi	r30, 0xA1	; 161
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	a0 e8       	ldi	r26, 0x80	; 128
    49a8:	bf e3       	ldi	r27, 0x3F	; 63
    49aa:	80 83       	st	Z, r24
    49ac:	91 83       	std	Z+1, r25	; 0x01
    49ae:	a2 83       	std	Z+2, r26	; 0x02
    49b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49b2:	8e 01       	movw	r16, r28
    49b4:	05 5a       	subi	r16, 0xA5	; 165
    49b6:	1f 4f       	sbci	r17, 0xFF	; 255
    49b8:	fe 01       	movw	r30, r28
    49ba:	e1 5a       	subi	r30, 0xA1	; 161
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	60 81       	ld	r22, Z
    49c0:	71 81       	ldd	r23, Z+1	; 0x01
    49c2:	82 81       	ldd	r24, Z+2	; 0x02
    49c4:	93 81       	ldd	r25, Z+3	; 0x03
    49c6:	20 e0       	ldi	r18, 0x00	; 0
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	4a e7       	ldi	r20, 0x7A	; 122
    49cc:	55 e4       	ldi	r21, 0x45	; 69
    49ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	f8 01       	movw	r30, r16
    49d8:	80 83       	st	Z, r24
    49da:	91 83       	std	Z+1, r25	; 0x01
    49dc:	a2 83       	std	Z+2, r26	; 0x02
    49de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49e0:	fe 01       	movw	r30, r28
    49e2:	e5 5a       	subi	r30, 0xA5	; 165
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	60 81       	ld	r22, Z
    49e8:	71 81       	ldd	r23, Z+1	; 0x01
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	40 e8       	ldi	r20, 0x80	; 128
    49f4:	5f e3       	ldi	r21, 0x3F	; 63
    49f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49fa:	88 23       	and	r24, r24
    49fc:	44 f4       	brge	.+16     	; 0x4a0e <LCD_voidInit+0x4d0>
		__ticks = 1;
    49fe:	fe 01       	movw	r30, r28
    4a00:	e7 5a       	subi	r30, 0xA7	; 167
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	81 e0       	ldi	r24, 0x01	; 1
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	91 83       	std	Z+1, r25	; 0x01
    4a0a:	80 83       	st	Z, r24
    4a0c:	64 c0       	rjmp	.+200    	; 0x4ad6 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    4a0e:	fe 01       	movw	r30, r28
    4a10:	e5 5a       	subi	r30, 0xA5	; 165
    4a12:	ff 4f       	sbci	r31, 0xFF	; 255
    4a14:	60 81       	ld	r22, Z
    4a16:	71 81       	ldd	r23, Z+1	; 0x01
    4a18:	82 81       	ldd	r24, Z+2	; 0x02
    4a1a:	93 81       	ldd	r25, Z+3	; 0x03
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	3f ef       	ldi	r19, 0xFF	; 255
    4a20:	4f e7       	ldi	r20, 0x7F	; 127
    4a22:	57 e4       	ldi	r21, 0x47	; 71
    4a24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a28:	18 16       	cp	r1, r24
    4a2a:	0c f0       	brlt	.+2      	; 0x4a2e <LCD_voidInit+0x4f0>
    4a2c:	43 c0       	rjmp	.+134    	; 0x4ab4 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a2e:	fe 01       	movw	r30, r28
    4a30:	e1 5a       	subi	r30, 0xA1	; 161
    4a32:	ff 4f       	sbci	r31, 0xFF	; 255
    4a34:	60 81       	ld	r22, Z
    4a36:	71 81       	ldd	r23, Z+1	; 0x01
    4a38:	82 81       	ldd	r24, Z+2	; 0x02
    4a3a:	93 81       	ldd	r25, Z+3	; 0x03
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	40 e2       	ldi	r20, 0x20	; 32
    4a42:	51 e4       	ldi	r21, 0x41	; 65
    4a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a48:	dc 01       	movw	r26, r24
    4a4a:	cb 01       	movw	r24, r22
    4a4c:	8e 01       	movw	r16, r28
    4a4e:	07 5a       	subi	r16, 0xA7	; 167
    4a50:	1f 4f       	sbci	r17, 0xFF	; 255
    4a52:	bc 01       	movw	r22, r24
    4a54:	cd 01       	movw	r24, r26
    4a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5a:	dc 01       	movw	r26, r24
    4a5c:	cb 01       	movw	r24, r22
    4a5e:	f8 01       	movw	r30, r16
    4a60:	91 83       	std	Z+1, r25	; 0x01
    4a62:	80 83       	st	Z, r24
    4a64:	1f c0       	rjmp	.+62     	; 0x4aa4 <LCD_voidInit+0x566>
    4a66:	fe 01       	movw	r30, r28
    4a68:	e9 5a       	subi	r30, 0xA9	; 169
    4a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6c:	80 e9       	ldi	r24, 0x90	; 144
    4a6e:	91 e0       	ldi	r25, 0x01	; 1
    4a70:	91 83       	std	Z+1, r25	; 0x01
    4a72:	80 83       	st	Z, r24
    4a74:	fe 01       	movw	r30, r28
    4a76:	e9 5a       	subi	r30, 0xA9	; 169
    4a78:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7a:	80 81       	ld	r24, Z
    4a7c:	91 81       	ldd	r25, Z+1	; 0x01
    4a7e:	01 97       	sbiw	r24, 0x01	; 1
    4a80:	f1 f7       	brne	.-4      	; 0x4a7e <LCD_voidInit+0x540>
    4a82:	fe 01       	movw	r30, r28
    4a84:	e9 5a       	subi	r30, 0xA9	; 169
    4a86:	ff 4f       	sbci	r31, 0xFF	; 255
    4a88:	91 83       	std	Z+1, r25	; 0x01
    4a8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a8c:	de 01       	movw	r26, r28
    4a8e:	a7 5a       	subi	r26, 0xA7	; 167
    4a90:	bf 4f       	sbci	r27, 0xFF	; 255
    4a92:	fe 01       	movw	r30, r28
    4a94:	e7 5a       	subi	r30, 0xA7	; 167
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	80 81       	ld	r24, Z
    4a9a:	91 81       	ldd	r25, Z+1	; 0x01
    4a9c:	01 97       	sbiw	r24, 0x01	; 1
    4a9e:	11 96       	adiw	r26, 0x01	; 1
    4aa0:	9c 93       	st	X, r25
    4aa2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa4:	fe 01       	movw	r30, r28
    4aa6:	e7 5a       	subi	r30, 0xA7	; 167
    4aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aaa:	80 81       	ld	r24, Z
    4aac:	91 81       	ldd	r25, Z+1	; 0x01
    4aae:	00 97       	sbiw	r24, 0x00	; 0
    4ab0:	d1 f6       	brne	.-76     	; 0x4a66 <LCD_voidInit+0x528>
    4ab2:	27 c0       	rjmp	.+78     	; 0x4b02 <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab4:	8e 01       	movw	r16, r28
    4ab6:	07 5a       	subi	r16, 0xA7	; 167
    4ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aba:	fe 01       	movw	r30, r28
    4abc:	e5 5a       	subi	r30, 0xA5	; 165
    4abe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac0:	60 81       	ld	r22, Z
    4ac2:	71 81       	ldd	r23, Z+1	; 0x01
    4ac4:	82 81       	ldd	r24, Z+2	; 0x02
    4ac6:	93 81       	ldd	r25, Z+3	; 0x03
    4ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	f8 01       	movw	r30, r16
    4ad2:	91 83       	std	Z+1, r25	; 0x01
    4ad4:	80 83       	st	Z, r24
    4ad6:	de 01       	movw	r26, r28
    4ad8:	ab 5a       	subi	r26, 0xAB	; 171
    4ada:	bf 4f       	sbci	r27, 0xFF	; 255
    4adc:	fe 01       	movw	r30, r28
    4ade:	e7 5a       	subi	r30, 0xA7	; 167
    4ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae2:	80 81       	ld	r24, Z
    4ae4:	91 81       	ldd	r25, Z+1	; 0x01
    4ae6:	8d 93       	st	X+, r24
    4ae8:	9c 93       	st	X, r25
    4aea:	fe 01       	movw	r30, r28
    4aec:	eb 5a       	subi	r30, 0xAB	; 171
    4aee:	ff 4f       	sbci	r31, 0xFF	; 255
    4af0:	80 81       	ld	r24, Z
    4af2:	91 81       	ldd	r25, Z+1	; 0x01
    4af4:	01 97       	sbiw	r24, 0x01	; 1
    4af6:	f1 f7       	brne	.-4      	; 0x4af4 <LCD_voidInit+0x5b6>
    4af8:	fe 01       	movw	r30, r28
    4afa:	eb 5a       	subi	r30, 0xAB	; 171
    4afc:	ff 4f       	sbci	r31, 0xFF	; 255
    4afe:	91 83       	std	Z+1, r25	; 0x01
    4b00:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    4b02:	80 e2       	ldi	r24, 0x20	; 32
    4b04:	0e 94 8f 29 	call	0x531e	; 0x531e <LCD_voidSendInitCommand>
    4b08:	fe 01       	movw	r30, r28
    4b0a:	ef 5a       	subi	r30, 0xAF	; 175
    4b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0e:	80 e0       	ldi	r24, 0x00	; 0
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	a0 e8       	ldi	r26, 0x80	; 128
    4b14:	bf e3       	ldi	r27, 0x3F	; 63
    4b16:	80 83       	st	Z, r24
    4b18:	91 83       	std	Z+1, r25	; 0x01
    4b1a:	a2 83       	std	Z+2, r26	; 0x02
    4b1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b1e:	8e 01       	movw	r16, r28
    4b20:	03 5b       	subi	r16, 0xB3	; 179
    4b22:	1f 4f       	sbci	r17, 0xFF	; 255
    4b24:	fe 01       	movw	r30, r28
    4b26:	ef 5a       	subi	r30, 0xAF	; 175
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	60 81       	ld	r22, Z
    4b2c:	71 81       	ldd	r23, Z+1	; 0x01
    4b2e:	82 81       	ldd	r24, Z+2	; 0x02
    4b30:	93 81       	ldd	r25, Z+3	; 0x03
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	4a e7       	ldi	r20, 0x7A	; 122
    4b38:	55 e4       	ldi	r21, 0x45	; 69
    4b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	cb 01       	movw	r24, r22
    4b42:	f8 01       	movw	r30, r16
    4b44:	80 83       	st	Z, r24
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	a2 83       	std	Z+2, r26	; 0x02
    4b4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	e3 5b       	subi	r30, 0xB3	; 179
    4b50:	ff 4f       	sbci	r31, 0xFF	; 255
    4b52:	60 81       	ld	r22, Z
    4b54:	71 81       	ldd	r23, Z+1	; 0x01
    4b56:	82 81       	ldd	r24, Z+2	; 0x02
    4b58:	93 81       	ldd	r25, Z+3	; 0x03
    4b5a:	20 e0       	ldi	r18, 0x00	; 0
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	40 e8       	ldi	r20, 0x80	; 128
    4b60:	5f e3       	ldi	r21, 0x3F	; 63
    4b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b66:	88 23       	and	r24, r24
    4b68:	44 f4       	brge	.+16     	; 0x4b7a <LCD_voidInit+0x63c>
		__ticks = 1;
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	e5 5b       	subi	r30, 0xB5	; 181
    4b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	91 83       	std	Z+1, r25	; 0x01
    4b76:	80 83       	st	Z, r24
    4b78:	64 c0       	rjmp	.+200    	; 0x4c42 <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    4b7a:	fe 01       	movw	r30, r28
    4b7c:	e3 5b       	subi	r30, 0xB3	; 179
    4b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b80:	60 81       	ld	r22, Z
    4b82:	71 81       	ldd	r23, Z+1	; 0x01
    4b84:	82 81       	ldd	r24, Z+2	; 0x02
    4b86:	93 81       	ldd	r25, Z+3	; 0x03
    4b88:	20 e0       	ldi	r18, 0x00	; 0
    4b8a:	3f ef       	ldi	r19, 0xFF	; 255
    4b8c:	4f e7       	ldi	r20, 0x7F	; 127
    4b8e:	57 e4       	ldi	r21, 0x47	; 71
    4b90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b94:	18 16       	cp	r1, r24
    4b96:	0c f0       	brlt	.+2      	; 0x4b9a <LCD_voidInit+0x65c>
    4b98:	43 c0       	rjmp	.+134    	; 0x4c20 <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	ef 5a       	subi	r30, 0xAF	; 175
    4b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba0:	60 81       	ld	r22, Z
    4ba2:	71 81       	ldd	r23, Z+1	; 0x01
    4ba4:	82 81       	ldd	r24, Z+2	; 0x02
    4ba6:	93 81       	ldd	r25, Z+3	; 0x03
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	30 e0       	ldi	r19, 0x00	; 0
    4bac:	40 e2       	ldi	r20, 0x20	; 32
    4bae:	51 e4       	ldi	r21, 0x41	; 65
    4bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bb4:	dc 01       	movw	r26, r24
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	8e 01       	movw	r16, r28
    4bba:	05 5b       	subi	r16, 0xB5	; 181
    4bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bbe:	bc 01       	movw	r22, r24
    4bc0:	cd 01       	movw	r24, r26
    4bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	cb 01       	movw	r24, r22
    4bca:	f8 01       	movw	r30, r16
    4bcc:	91 83       	std	Z+1, r25	; 0x01
    4bce:	80 83       	st	Z, r24
    4bd0:	1f c0       	rjmp	.+62     	; 0x4c10 <LCD_voidInit+0x6d2>
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	e7 5b       	subi	r30, 0xB7	; 183
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	80 e9       	ldi	r24, 0x90	; 144
    4bda:	91 e0       	ldi	r25, 0x01	; 1
    4bdc:	91 83       	std	Z+1, r25	; 0x01
    4bde:	80 83       	st	Z, r24
    4be0:	fe 01       	movw	r30, r28
    4be2:	e7 5b       	subi	r30, 0xB7	; 183
    4be4:	ff 4f       	sbci	r31, 0xFF	; 255
    4be6:	80 81       	ld	r24, Z
    4be8:	91 81       	ldd	r25, Z+1	; 0x01
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	f1 f7       	brne	.-4      	; 0x4bea <LCD_voidInit+0x6ac>
    4bee:	fe 01       	movw	r30, r28
    4bf0:	e7 5b       	subi	r30, 0xB7	; 183
    4bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf4:	91 83       	std	Z+1, r25	; 0x01
    4bf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bf8:	de 01       	movw	r26, r28
    4bfa:	a5 5b       	subi	r26, 0xB5	; 181
    4bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    4bfe:	fe 01       	movw	r30, r28
    4c00:	e5 5b       	subi	r30, 0xB5	; 181
    4c02:	ff 4f       	sbci	r31, 0xFF	; 255
    4c04:	80 81       	ld	r24, Z
    4c06:	91 81       	ldd	r25, Z+1	; 0x01
    4c08:	01 97       	sbiw	r24, 0x01	; 1
    4c0a:	11 96       	adiw	r26, 0x01	; 1
    4c0c:	9c 93       	st	X, r25
    4c0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c10:	fe 01       	movw	r30, r28
    4c12:	e5 5b       	subi	r30, 0xB5	; 181
    4c14:	ff 4f       	sbci	r31, 0xFF	; 255
    4c16:	80 81       	ld	r24, Z
    4c18:	91 81       	ldd	r25, Z+1	; 0x01
    4c1a:	00 97       	sbiw	r24, 0x00	; 0
    4c1c:	d1 f6       	brne	.-76     	; 0x4bd2 <LCD_voidInit+0x694>
    4c1e:	27 c0       	rjmp	.+78     	; 0x4c6e <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c20:	8e 01       	movw	r16, r28
    4c22:	05 5b       	subi	r16, 0xB5	; 181
    4c24:	1f 4f       	sbci	r17, 0xFF	; 255
    4c26:	fe 01       	movw	r30, r28
    4c28:	e3 5b       	subi	r30, 0xB3	; 179
    4c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2c:	60 81       	ld	r22, Z
    4c2e:	71 81       	ldd	r23, Z+1	; 0x01
    4c30:	82 81       	ldd	r24, Z+2	; 0x02
    4c32:	93 81       	ldd	r25, Z+3	; 0x03
    4c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c38:	dc 01       	movw	r26, r24
    4c3a:	cb 01       	movw	r24, r22
    4c3c:	f8 01       	movw	r30, r16
    4c3e:	91 83       	std	Z+1, r25	; 0x01
    4c40:	80 83       	st	Z, r24
    4c42:	de 01       	movw	r26, r28
    4c44:	a9 5b       	subi	r26, 0xB9	; 185
    4c46:	bf 4f       	sbci	r27, 0xFF	; 255
    4c48:	fe 01       	movw	r30, r28
    4c4a:	e5 5b       	subi	r30, 0xB5	; 181
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	80 81       	ld	r24, Z
    4c50:	91 81       	ldd	r25, Z+1	; 0x01
    4c52:	8d 93       	st	X+, r24
    4c54:	9c 93       	st	X, r25
    4c56:	fe 01       	movw	r30, r28
    4c58:	e9 5b       	subi	r30, 0xB9	; 185
    4c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5c:	80 81       	ld	r24, Z
    4c5e:	91 81       	ldd	r25, Z+1	; 0x01
    4c60:	01 97       	sbiw	r24, 0x01	; 1
    4c62:	f1 f7       	brne	.-4      	; 0x4c60 <LCD_voidInit+0x722>
    4c64:	fe 01       	movw	r30, r28
    4c66:	e9 5b       	subi	r30, 0xB9	; 185
    4c68:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6a:	91 83       	std	Z+1, r25	; 0x01
    4c6c:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    4c6e:	8c e2       	ldi	r24, 0x2C	; 44
    4c70:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_voidSendCommand>
    4c74:	fe 01       	movw	r30, r28
    4c76:	ed 5b       	subi	r30, 0xBD	; 189
    4c78:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	a0 e8       	ldi	r26, 0x80	; 128
    4c80:	bf e3       	ldi	r27, 0x3F	; 63
    4c82:	80 83       	st	Z, r24
    4c84:	91 83       	std	Z+1, r25	; 0x01
    4c86:	a2 83       	std	Z+2, r26	; 0x02
    4c88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c8a:	8e 01       	movw	r16, r28
    4c8c:	01 5c       	subi	r16, 0xC1	; 193
    4c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c90:	fe 01       	movw	r30, r28
    4c92:	ed 5b       	subi	r30, 0xBD	; 189
    4c94:	ff 4f       	sbci	r31, 0xFF	; 255
    4c96:	60 81       	ld	r22, Z
    4c98:	71 81       	ldd	r23, Z+1	; 0x01
    4c9a:	82 81       	ldd	r24, Z+2	; 0x02
    4c9c:	93 81       	ldd	r25, Z+3	; 0x03
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
    4ca2:	4a e7       	ldi	r20, 0x7A	; 122
    4ca4:	55 e4       	ldi	r21, 0x45	; 69
    4ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	f8 01       	movw	r30, r16
    4cb0:	80 83       	st	Z, r24
    4cb2:	91 83       	std	Z+1, r25	; 0x01
    4cb4:	a2 83       	std	Z+2, r26	; 0x02
    4cb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cb8:	fe 01       	movw	r30, r28
    4cba:	ff 96       	adiw	r30, 0x3f	; 63
    4cbc:	60 81       	ld	r22, Z
    4cbe:	71 81       	ldd	r23, Z+1	; 0x01
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	93 81       	ldd	r25, Z+3	; 0x03
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	40 e8       	ldi	r20, 0x80	; 128
    4cca:	5f e3       	ldi	r21, 0x3F	; 63
    4ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cd0:	88 23       	and	r24, r24
    4cd2:	2c f4       	brge	.+10     	; 0x4cde <LCD_voidInit+0x7a0>
		__ticks = 1;
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	9e af       	std	Y+62, r25	; 0x3e
    4cda:	8d af       	std	Y+61, r24	; 0x3d
    4cdc:	46 c0       	rjmp	.+140    	; 0x4d6a <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    4cde:	fe 01       	movw	r30, r28
    4ce0:	ff 96       	adiw	r30, 0x3f	; 63
    4ce2:	60 81       	ld	r22, Z
    4ce4:	71 81       	ldd	r23, Z+1	; 0x01
    4ce6:	82 81       	ldd	r24, Z+2	; 0x02
    4ce8:	93 81       	ldd	r25, Z+3	; 0x03
    4cea:	20 e0       	ldi	r18, 0x00	; 0
    4cec:	3f ef       	ldi	r19, 0xFF	; 255
    4cee:	4f e7       	ldi	r20, 0x7F	; 127
    4cf0:	57 e4       	ldi	r21, 0x47	; 71
    4cf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cf6:	18 16       	cp	r1, r24
    4cf8:	64 f5       	brge	.+88     	; 0x4d52 <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cfa:	fe 01       	movw	r30, r28
    4cfc:	ed 5b       	subi	r30, 0xBD	; 189
    4cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4d00:	60 81       	ld	r22, Z
    4d02:	71 81       	ldd	r23, Z+1	; 0x01
    4d04:	82 81       	ldd	r24, Z+2	; 0x02
    4d06:	93 81       	ldd	r25, Z+3	; 0x03
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	40 e2       	ldi	r20, 0x20	; 32
    4d0e:	51 e4       	ldi	r21, 0x41	; 65
    4d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d14:	dc 01       	movw	r26, r24
    4d16:	cb 01       	movw	r24, r22
    4d18:	bc 01       	movw	r22, r24
    4d1a:	cd 01       	movw	r24, r26
    4d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d20:	dc 01       	movw	r26, r24
    4d22:	cb 01       	movw	r24, r22
    4d24:	9e af       	std	Y+62, r25	; 0x3e
    4d26:	8d af       	std	Y+61, r24	; 0x3d
    4d28:	0f c0       	rjmp	.+30     	; 0x4d48 <LCD_voidInit+0x80a>
    4d2a:	80 e9       	ldi	r24, 0x90	; 144
    4d2c:	91 e0       	ldi	r25, 0x01	; 1
    4d2e:	9c af       	std	Y+60, r25	; 0x3c
    4d30:	8b af       	std	Y+59, r24	; 0x3b
    4d32:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d34:	9c ad       	ldd	r25, Y+60	; 0x3c
    4d36:	01 97       	sbiw	r24, 0x01	; 1
    4d38:	f1 f7       	brne	.-4      	; 0x4d36 <LCD_voidInit+0x7f8>
    4d3a:	9c af       	std	Y+60, r25	; 0x3c
    4d3c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d40:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d42:	01 97       	sbiw	r24, 0x01	; 1
    4d44:	9e af       	std	Y+62, r25	; 0x3e
    4d46:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d48:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d4c:	00 97       	sbiw	r24, 0x00	; 0
    4d4e:	69 f7       	brne	.-38     	; 0x4d2a <LCD_voidInit+0x7ec>
    4d50:	16 c0       	rjmp	.+44     	; 0x4d7e <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d52:	fe 01       	movw	r30, r28
    4d54:	ff 96       	adiw	r30, 0x3f	; 63
    4d56:	60 81       	ld	r22, Z
    4d58:	71 81       	ldd	r23, Z+1	; 0x01
    4d5a:	82 81       	ldd	r24, Z+2	; 0x02
    4d5c:	93 81       	ldd	r25, Z+3	; 0x03
    4d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d62:	dc 01       	movw	r26, r24
    4d64:	cb 01       	movw	r24, r22
    4d66:	9e af       	std	Y+62, r25	; 0x3e
    4d68:	8d af       	std	Y+61, r24	; 0x3d
    4d6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d6e:	9a af       	std	Y+58, r25	; 0x3a
    4d70:	89 af       	std	Y+57, r24	; 0x39
    4d72:	89 ad       	ldd	r24, Y+57	; 0x39
    4d74:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d76:	01 97       	sbiw	r24, 0x01	; 1
    4d78:	f1 f7       	brne	.-4      	; 0x4d76 <LCD_voidInit+0x838>
    4d7a:	9a af       	std	Y+58, r25	; 0x3a
    4d7c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    4d7e:	88 e0       	ldi	r24, 0x08	; 8
    4d80:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_voidSendCommand>
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	a0 e8       	ldi	r26, 0x80	; 128
    4d8a:	bf e3       	ldi	r27, 0x3F	; 63
    4d8c:	8d ab       	std	Y+53, r24	; 0x35
    4d8e:	9e ab       	std	Y+54, r25	; 0x36
    4d90:	af ab       	std	Y+55, r26	; 0x37
    4d92:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d94:	6d a9       	ldd	r22, Y+53	; 0x35
    4d96:	7e a9       	ldd	r23, Y+54	; 0x36
    4d98:	8f a9       	ldd	r24, Y+55	; 0x37
    4d9a:	98 ad       	ldd	r25, Y+56	; 0x38
    4d9c:	20 e0       	ldi	r18, 0x00	; 0
    4d9e:	30 e0       	ldi	r19, 0x00	; 0
    4da0:	4a e7       	ldi	r20, 0x7A	; 122
    4da2:	55 e4       	ldi	r21, 0x45	; 69
    4da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4da8:	dc 01       	movw	r26, r24
    4daa:	cb 01       	movw	r24, r22
    4dac:	89 ab       	std	Y+49, r24	; 0x31
    4dae:	9a ab       	std	Y+50, r25	; 0x32
    4db0:	ab ab       	std	Y+51, r26	; 0x33
    4db2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4db4:	69 a9       	ldd	r22, Y+49	; 0x31
    4db6:	7a a9       	ldd	r23, Y+50	; 0x32
    4db8:	8b a9       	ldd	r24, Y+51	; 0x33
    4dba:	9c a9       	ldd	r25, Y+52	; 0x34
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	40 e8       	ldi	r20, 0x80	; 128
    4dc2:	5f e3       	ldi	r21, 0x3F	; 63
    4dc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dc8:	88 23       	and	r24, r24
    4dca:	2c f4       	brge	.+10     	; 0x4dd6 <LCD_voidInit+0x898>
		__ticks = 1;
    4dcc:	81 e0       	ldi	r24, 0x01	; 1
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	98 ab       	std	Y+48, r25	; 0x30
    4dd2:	8f a7       	std	Y+47, r24	; 0x2f
    4dd4:	3f c0       	rjmp	.+126    	; 0x4e54 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    4dd6:	69 a9       	ldd	r22, Y+49	; 0x31
    4dd8:	7a a9       	ldd	r23, Y+50	; 0x32
    4dda:	8b a9       	ldd	r24, Y+51	; 0x33
    4ddc:	9c a9       	ldd	r25, Y+52	; 0x34
    4dde:	20 e0       	ldi	r18, 0x00	; 0
    4de0:	3f ef       	ldi	r19, 0xFF	; 255
    4de2:	4f e7       	ldi	r20, 0x7F	; 127
    4de4:	57 e4       	ldi	r21, 0x47	; 71
    4de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4dea:	18 16       	cp	r1, r24
    4dec:	4c f5       	brge	.+82     	; 0x4e40 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dee:	6d a9       	ldd	r22, Y+53	; 0x35
    4df0:	7e a9       	ldd	r23, Y+54	; 0x36
    4df2:	8f a9       	ldd	r24, Y+55	; 0x37
    4df4:	98 ad       	ldd	r25, Y+56	; 0x38
    4df6:	20 e0       	ldi	r18, 0x00	; 0
    4df8:	30 e0       	ldi	r19, 0x00	; 0
    4dfa:	40 e2       	ldi	r20, 0x20	; 32
    4dfc:	51 e4       	ldi	r21, 0x41	; 65
    4dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e02:	dc 01       	movw	r26, r24
    4e04:	cb 01       	movw	r24, r22
    4e06:	bc 01       	movw	r22, r24
    4e08:	cd 01       	movw	r24, r26
    4e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e0e:	dc 01       	movw	r26, r24
    4e10:	cb 01       	movw	r24, r22
    4e12:	98 ab       	std	Y+48, r25	; 0x30
    4e14:	8f a7       	std	Y+47, r24	; 0x2f
    4e16:	0f c0       	rjmp	.+30     	; 0x4e36 <LCD_voidInit+0x8f8>
    4e18:	80 e9       	ldi	r24, 0x90	; 144
    4e1a:	91 e0       	ldi	r25, 0x01	; 1
    4e1c:	9e a7       	std	Y+46, r25	; 0x2e
    4e1e:	8d a7       	std	Y+45, r24	; 0x2d
    4e20:	8d a5       	ldd	r24, Y+45	; 0x2d
    4e22:	9e a5       	ldd	r25, Y+46	; 0x2e
    4e24:	01 97       	sbiw	r24, 0x01	; 1
    4e26:	f1 f7       	brne	.-4      	; 0x4e24 <LCD_voidInit+0x8e6>
    4e28:	9e a7       	std	Y+46, r25	; 0x2e
    4e2a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    4e30:	01 97       	sbiw	r24, 0x01	; 1
    4e32:	98 ab       	std	Y+48, r25	; 0x30
    4e34:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e36:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e38:	98 a9       	ldd	r25, Y+48	; 0x30
    4e3a:	00 97       	sbiw	r24, 0x00	; 0
    4e3c:	69 f7       	brne	.-38     	; 0x4e18 <LCD_voidInit+0x8da>
    4e3e:	14 c0       	rjmp	.+40     	; 0x4e68 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e40:	69 a9       	ldd	r22, Y+49	; 0x31
    4e42:	7a a9       	ldd	r23, Y+50	; 0x32
    4e44:	8b a9       	ldd	r24, Y+51	; 0x33
    4e46:	9c a9       	ldd	r25, Y+52	; 0x34
    4e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	cb 01       	movw	r24, r22
    4e50:	98 ab       	std	Y+48, r25	; 0x30
    4e52:	8f a7       	std	Y+47, r24	; 0x2f
    4e54:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e56:	98 a9       	ldd	r25, Y+48	; 0x30
    4e58:	9c a7       	std	Y+44, r25	; 0x2c
    4e5a:	8b a7       	std	Y+43, r24	; 0x2b
    4e5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e60:	01 97       	sbiw	r24, 0x01	; 1
    4e62:	f1 f7       	brne	.-4      	; 0x4e60 <LCD_voidInit+0x922>
    4e64:	9c a7       	std	Y+44, r25	; 0x2c
    4e66:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_voidSendCommand>
    4e6e:	80 e0       	ldi	r24, 0x00	; 0
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	a0 ea       	ldi	r26, 0xA0	; 160
    4e74:	b0 e4       	ldi	r27, 0x40	; 64
    4e76:	8f a3       	std	Y+39, r24	; 0x27
    4e78:	98 a7       	std	Y+40, r25	; 0x28
    4e7a:	a9 a7       	std	Y+41, r26	; 0x29
    4e7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e7e:	6f a1       	ldd	r22, Y+39	; 0x27
    4e80:	78 a5       	ldd	r23, Y+40	; 0x28
    4e82:	89 a5       	ldd	r24, Y+41	; 0x29
    4e84:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	4a e7       	ldi	r20, 0x7A	; 122
    4e8c:	55 e4       	ldi	r21, 0x45	; 69
    4e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e92:	dc 01       	movw	r26, r24
    4e94:	cb 01       	movw	r24, r22
    4e96:	8b a3       	std	Y+35, r24	; 0x23
    4e98:	9c a3       	std	Y+36, r25	; 0x24
    4e9a:	ad a3       	std	Y+37, r26	; 0x25
    4e9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    4ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	40 e8       	ldi	r20, 0x80	; 128
    4eac:	5f e3       	ldi	r21, 0x3F	; 63
    4eae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4eb2:	88 23       	and	r24, r24
    4eb4:	2c f4       	brge	.+10     	; 0x4ec0 <LCD_voidInit+0x982>
		__ticks = 1;
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	9a a3       	std	Y+34, r25	; 0x22
    4ebc:	89 a3       	std	Y+33, r24	; 0x21
    4ebe:	3f c0       	rjmp	.+126    	; 0x4f3e <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    4ec0:	6b a1       	ldd	r22, Y+35	; 0x23
    4ec2:	7c a1       	ldd	r23, Y+36	; 0x24
    4ec4:	8d a1       	ldd	r24, Y+37	; 0x25
    4ec6:	9e a1       	ldd	r25, Y+38	; 0x26
    4ec8:	20 e0       	ldi	r18, 0x00	; 0
    4eca:	3f ef       	ldi	r19, 0xFF	; 255
    4ecc:	4f e7       	ldi	r20, 0x7F	; 127
    4ece:	57 e4       	ldi	r21, 0x47	; 71
    4ed0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ed4:	18 16       	cp	r1, r24
    4ed6:	4c f5       	brge	.+82     	; 0x4f2a <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ed8:	6f a1       	ldd	r22, Y+39	; 0x27
    4eda:	78 a5       	ldd	r23, Y+40	; 0x28
    4edc:	89 a5       	ldd	r24, Y+41	; 0x29
    4ede:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	40 e2       	ldi	r20, 0x20	; 32
    4ee6:	51 e4       	ldi	r21, 0x41	; 65
    4ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eec:	dc 01       	movw	r26, r24
    4eee:	cb 01       	movw	r24, r22
    4ef0:	bc 01       	movw	r22, r24
    4ef2:	cd 01       	movw	r24, r26
    4ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef8:	dc 01       	movw	r26, r24
    4efa:	cb 01       	movw	r24, r22
    4efc:	9a a3       	std	Y+34, r25	; 0x22
    4efe:	89 a3       	std	Y+33, r24	; 0x21
    4f00:	0f c0       	rjmp	.+30     	; 0x4f20 <LCD_voidInit+0x9e2>
    4f02:	80 e9       	ldi	r24, 0x90	; 144
    4f04:	91 e0       	ldi	r25, 0x01	; 1
    4f06:	98 a3       	std	Y+32, r25	; 0x20
    4f08:	8f 8f       	std	Y+31, r24	; 0x1f
    4f0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f0c:	98 a1       	ldd	r25, Y+32	; 0x20
    4f0e:	01 97       	sbiw	r24, 0x01	; 1
    4f10:	f1 f7       	brne	.-4      	; 0x4f0e <LCD_voidInit+0x9d0>
    4f12:	98 a3       	std	Y+32, r25	; 0x20
    4f14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f16:	89 a1       	ldd	r24, Y+33	; 0x21
    4f18:	9a a1       	ldd	r25, Y+34	; 0x22
    4f1a:	01 97       	sbiw	r24, 0x01	; 1
    4f1c:	9a a3       	std	Y+34, r25	; 0x22
    4f1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f20:	89 a1       	ldd	r24, Y+33	; 0x21
    4f22:	9a a1       	ldd	r25, Y+34	; 0x22
    4f24:	00 97       	sbiw	r24, 0x00	; 0
    4f26:	69 f7       	brne	.-38     	; 0x4f02 <LCD_voidInit+0x9c4>
    4f28:	14 c0       	rjmp	.+40     	; 0x4f52 <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f2a:	6b a1       	ldd	r22, Y+35	; 0x23
    4f2c:	7c a1       	ldd	r23, Y+36	; 0x24
    4f2e:	8d a1       	ldd	r24, Y+37	; 0x25
    4f30:	9e a1       	ldd	r25, Y+38	; 0x26
    4f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f36:	dc 01       	movw	r26, r24
    4f38:	cb 01       	movw	r24, r22
    4f3a:	9a a3       	std	Y+34, r25	; 0x22
    4f3c:	89 a3       	std	Y+33, r24	; 0x21
    4f3e:	89 a1       	ldd	r24, Y+33	; 0x21
    4f40:	9a a1       	ldd	r25, Y+34	; 0x22
    4f42:	9e 8f       	std	Y+30, r25	; 0x1e
    4f44:	8d 8f       	std	Y+29, r24	; 0x1d
    4f46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f4a:	01 97       	sbiw	r24, 0x01	; 1
    4f4c:	f1 f7       	brne	.-4      	; 0x4f4a <LCD_voidInit+0xa0c>
    4f4e:	9e 8f       	std	Y+30, r25	; 0x1e
    4f50:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    4f52:	8c e0       	ldi	r24, 0x0C	; 12
    4f54:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_voidSendCommand>
    4f58:	80 e0       	ldi	r24, 0x00	; 0
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	a0 e8       	ldi	r26, 0x80	; 128
    4f5e:	bf e3       	ldi	r27, 0x3F	; 63
    4f60:	89 8f       	std	Y+25, r24	; 0x19
    4f62:	9a 8f       	std	Y+26, r25	; 0x1a
    4f64:	ab 8f       	std	Y+27, r26	; 0x1b
    4f66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f68:	69 8d       	ldd	r22, Y+25	; 0x19
    4f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f70:	20 e0       	ldi	r18, 0x00	; 0
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	4a e7       	ldi	r20, 0x7A	; 122
    4f76:	55 e4       	ldi	r21, 0x45	; 69
    4f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f7c:	dc 01       	movw	r26, r24
    4f7e:	cb 01       	movw	r24, r22
    4f80:	8d 8b       	std	Y+21, r24	; 0x15
    4f82:	9e 8b       	std	Y+22, r25	; 0x16
    4f84:	af 8b       	std	Y+23, r26	; 0x17
    4f86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f88:	6d 89       	ldd	r22, Y+21	; 0x15
    4f8a:	7e 89       	ldd	r23, Y+22	; 0x16
    4f8c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f8e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	40 e8       	ldi	r20, 0x80	; 128
    4f96:	5f e3       	ldi	r21, 0x3F	; 63
    4f98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f9c:	88 23       	and	r24, r24
    4f9e:	2c f4       	brge	.+10     	; 0x4faa <LCD_voidInit+0xa6c>
		__ticks = 1;
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	9c 8b       	std	Y+20, r25	; 0x14
    4fa6:	8b 8b       	std	Y+19, r24	; 0x13
    4fa8:	3f c0       	rjmp	.+126    	; 0x5028 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    4faa:	6d 89       	ldd	r22, Y+21	; 0x15
    4fac:	7e 89       	ldd	r23, Y+22	; 0x16
    4fae:	8f 89       	ldd	r24, Y+23	; 0x17
    4fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    4fb2:	20 e0       	ldi	r18, 0x00	; 0
    4fb4:	3f ef       	ldi	r19, 0xFF	; 255
    4fb6:	4f e7       	ldi	r20, 0x7F	; 127
    4fb8:	57 e4       	ldi	r21, 0x47	; 71
    4fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fbe:	18 16       	cp	r1, r24
    4fc0:	4c f5       	brge	.+82     	; 0x5014 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    4fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	40 e2       	ldi	r20, 0x20	; 32
    4fd0:	51 e4       	ldi	r21, 0x41	; 65
    4fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd6:	dc 01       	movw	r26, r24
    4fd8:	cb 01       	movw	r24, r22
    4fda:	bc 01       	movw	r22, r24
    4fdc:	cd 01       	movw	r24, r26
    4fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fe2:	dc 01       	movw	r26, r24
    4fe4:	cb 01       	movw	r24, r22
    4fe6:	9c 8b       	std	Y+20, r25	; 0x14
    4fe8:	8b 8b       	std	Y+19, r24	; 0x13
    4fea:	0f c0       	rjmp	.+30     	; 0x500a <LCD_voidInit+0xacc>
    4fec:	80 e9       	ldi	r24, 0x90	; 144
    4fee:	91 e0       	ldi	r25, 0x01	; 1
    4ff0:	9a 8b       	std	Y+18, r25	; 0x12
    4ff2:	89 8b       	std	Y+17, r24	; 0x11
    4ff4:	89 89       	ldd	r24, Y+17	; 0x11
    4ff6:	9a 89       	ldd	r25, Y+18	; 0x12
    4ff8:	01 97       	sbiw	r24, 0x01	; 1
    4ffa:	f1 f7       	brne	.-4      	; 0x4ff8 <LCD_voidInit+0xaba>
    4ffc:	9a 8b       	std	Y+18, r25	; 0x12
    4ffe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5000:	8b 89       	ldd	r24, Y+19	; 0x13
    5002:	9c 89       	ldd	r25, Y+20	; 0x14
    5004:	01 97       	sbiw	r24, 0x01	; 1
    5006:	9c 8b       	std	Y+20, r25	; 0x14
    5008:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    500a:	8b 89       	ldd	r24, Y+19	; 0x13
    500c:	9c 89       	ldd	r25, Y+20	; 0x14
    500e:	00 97       	sbiw	r24, 0x00	; 0
    5010:	69 f7       	brne	.-38     	; 0x4fec <LCD_voidInit+0xaae>
    5012:	14 c0       	rjmp	.+40     	; 0x503c <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5014:	6d 89       	ldd	r22, Y+21	; 0x15
    5016:	7e 89       	ldd	r23, Y+22	; 0x16
    5018:	8f 89       	ldd	r24, Y+23	; 0x17
    501a:	98 8d       	ldd	r25, Y+24	; 0x18
    501c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5020:	dc 01       	movw	r26, r24
    5022:	cb 01       	movw	r24, r22
    5024:	9c 8b       	std	Y+20, r25	; 0x14
    5026:	8b 8b       	std	Y+19, r24	; 0x13
    5028:	8b 89       	ldd	r24, Y+19	; 0x13
    502a:	9c 89       	ldd	r25, Y+20	; 0x14
    502c:	98 8b       	std	Y+16, r25	; 0x10
    502e:	8f 87       	std	Y+15, r24	; 0x0f
    5030:	8f 85       	ldd	r24, Y+15	; 0x0f
    5032:	98 89       	ldd	r25, Y+16	; 0x10
    5034:	01 97       	sbiw	r24, 0x01	; 1
    5036:	f1 f7       	brne	.-4      	; 0x5034 <LCD_voidInit+0xaf6>
    5038:	98 8b       	std	Y+16, r25	; 0x10
    503a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    503c:	86 e0       	ldi	r24, 0x06	; 6
    503e:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_voidSendCommand>
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	a0 e8       	ldi	r26, 0x80	; 128
    5048:	bf e3       	ldi	r27, 0x3F	; 63
    504a:	8b 87       	std	Y+11, r24	; 0x0b
    504c:	9c 87       	std	Y+12, r25	; 0x0c
    504e:	ad 87       	std	Y+13, r26	; 0x0d
    5050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5052:	6b 85       	ldd	r22, Y+11	; 0x0b
    5054:	7c 85       	ldd	r23, Y+12	; 0x0c
    5056:	8d 85       	ldd	r24, Y+13	; 0x0d
    5058:	9e 85       	ldd	r25, Y+14	; 0x0e
    505a:	20 e0       	ldi	r18, 0x00	; 0
    505c:	30 e0       	ldi	r19, 0x00	; 0
    505e:	4a e7       	ldi	r20, 0x7A	; 122
    5060:	55 e4       	ldi	r21, 0x45	; 69
    5062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5066:	dc 01       	movw	r26, r24
    5068:	cb 01       	movw	r24, r22
    506a:	8f 83       	std	Y+7, r24	; 0x07
    506c:	98 87       	std	Y+8, r25	; 0x08
    506e:	a9 87       	std	Y+9, r26	; 0x09
    5070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5072:	6f 81       	ldd	r22, Y+7	; 0x07
    5074:	78 85       	ldd	r23, Y+8	; 0x08
    5076:	89 85       	ldd	r24, Y+9	; 0x09
    5078:	9a 85       	ldd	r25, Y+10	; 0x0a
    507a:	20 e0       	ldi	r18, 0x00	; 0
    507c:	30 e0       	ldi	r19, 0x00	; 0
    507e:	40 e8       	ldi	r20, 0x80	; 128
    5080:	5f e3       	ldi	r21, 0x3F	; 63
    5082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5086:	88 23       	and	r24, r24
    5088:	2c f4       	brge	.+10     	; 0x5094 <LCD_voidInit+0xb56>
		__ticks = 1;
    508a:	81 e0       	ldi	r24, 0x01	; 1
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	9e 83       	std	Y+6, r25	; 0x06
    5090:	8d 83       	std	Y+5, r24	; 0x05
    5092:	3f c0       	rjmp	.+126    	; 0x5112 <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    5094:	6f 81       	ldd	r22, Y+7	; 0x07
    5096:	78 85       	ldd	r23, Y+8	; 0x08
    5098:	89 85       	ldd	r24, Y+9	; 0x09
    509a:	9a 85       	ldd	r25, Y+10	; 0x0a
    509c:	20 e0       	ldi	r18, 0x00	; 0
    509e:	3f ef       	ldi	r19, 0xFF	; 255
    50a0:	4f e7       	ldi	r20, 0x7F	; 127
    50a2:	57 e4       	ldi	r21, 0x47	; 71
    50a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50a8:	18 16       	cp	r1, r24
    50aa:	4c f5       	brge	.+82     	; 0x50fe <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    50ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    50b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    50b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    50b4:	20 e0       	ldi	r18, 0x00	; 0
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	40 e2       	ldi	r20, 0x20	; 32
    50ba:	51 e4       	ldi	r21, 0x41	; 65
    50bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50c0:	dc 01       	movw	r26, r24
    50c2:	cb 01       	movw	r24, r22
    50c4:	bc 01       	movw	r22, r24
    50c6:	cd 01       	movw	r24, r26
    50c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50cc:	dc 01       	movw	r26, r24
    50ce:	cb 01       	movw	r24, r22
    50d0:	9e 83       	std	Y+6, r25	; 0x06
    50d2:	8d 83       	std	Y+5, r24	; 0x05
    50d4:	0f c0       	rjmp	.+30     	; 0x50f4 <LCD_voidInit+0xbb6>
    50d6:	80 e9       	ldi	r24, 0x90	; 144
    50d8:	91 e0       	ldi	r25, 0x01	; 1
    50da:	9c 83       	std	Y+4, r25	; 0x04
    50dc:	8b 83       	std	Y+3, r24	; 0x03
    50de:	8b 81       	ldd	r24, Y+3	; 0x03
    50e0:	9c 81       	ldd	r25, Y+4	; 0x04
    50e2:	01 97       	sbiw	r24, 0x01	; 1
    50e4:	f1 f7       	brne	.-4      	; 0x50e2 <LCD_voidInit+0xba4>
    50e6:	9c 83       	std	Y+4, r25	; 0x04
    50e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ea:	8d 81       	ldd	r24, Y+5	; 0x05
    50ec:	9e 81       	ldd	r25, Y+6	; 0x06
    50ee:	01 97       	sbiw	r24, 0x01	; 1
    50f0:	9e 83       	std	Y+6, r25	; 0x06
    50f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50f4:	8d 81       	ldd	r24, Y+5	; 0x05
    50f6:	9e 81       	ldd	r25, Y+6	; 0x06
    50f8:	00 97       	sbiw	r24, 0x00	; 0
    50fa:	69 f7       	brne	.-38     	; 0x50d6 <LCD_voidInit+0xb98>
    50fc:	14 c0       	rjmp	.+40     	; 0x5126 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50fe:	6f 81       	ldd	r22, Y+7	; 0x07
    5100:	78 85       	ldd	r23, Y+8	; 0x08
    5102:	89 85       	ldd	r24, Y+9	; 0x09
    5104:	9a 85       	ldd	r25, Y+10	; 0x0a
    5106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    510a:	dc 01       	movw	r26, r24
    510c:	cb 01       	movw	r24, r22
    510e:	9e 83       	std	Y+6, r25	; 0x06
    5110:	8d 83       	std	Y+5, r24	; 0x05
    5112:	8d 81       	ldd	r24, Y+5	; 0x05
    5114:	9e 81       	ldd	r25, Y+6	; 0x06
    5116:	9a 83       	std	Y+2, r25	; 0x02
    5118:	89 83       	std	Y+1, r24	; 0x01
    511a:	89 81       	ldd	r24, Y+1	; 0x01
    511c:	9a 81       	ldd	r25, Y+2	; 0x02
    511e:	01 97       	sbiw	r24, 0x01	; 1
    5120:	f1 f7       	brne	.-4      	; 0x511e <LCD_voidInit+0xbe0>
    5122:	9a 83       	std	Y+2, r25	; 0x02
    5124:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    5126:	c4 57       	subi	r28, 0x74	; 116
    5128:	df 4f       	sbci	r29, 0xFF	; 255
    512a:	0f b6       	in	r0, 0x3f	; 63
    512c:	f8 94       	cli
    512e:	de bf       	out	0x3e, r29	; 62
    5130:	0f be       	out	0x3f, r0	; 63
    5132:	cd bf       	out	0x3d, r28	; 61
    5134:	cf 91       	pop	r28
    5136:	df 91       	pop	r29
    5138:	1f 91       	pop	r17
    513a:	0f 91       	pop	r16
    513c:	08 95       	ret

0000513e <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    513e:	df 93       	push	r29
    5140:	cf 93       	push	r28
    5142:	cd b7       	in	r28, 0x3d	; 61
    5144:	de b7       	in	r29, 0x3e	; 62
    5146:	2f 97       	sbiw	r28, 0x0f	; 15
    5148:	0f b6       	in	r0, 0x3f	; 63
    514a:	f8 94       	cli
    514c:	de bf       	out	0x3e, r29	; 62
    514e:	0f be       	out	0x3f, r0	; 63
    5150:	cd bf       	out	0x3d, r28	; 61
    5152:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	63 e0       	ldi	r22, 0x03	; 3
    5158:	40 e0       	ldi	r20, 0x00	; 0
    515a:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	62 e0       	ldi	r22, 0x02	; 2
    5162:	41 e0       	ldi	r20, 0x01	; 1
    5164:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    5168:	8f 85       	ldd	r24, Y+15	; 0x0f
    516a:	82 95       	swap	r24
    516c:	8f 70       	andi	r24, 0x0F	; 15
    516e:	98 2f       	mov	r25, r24
    5170:	91 70       	andi	r25, 0x01	; 1
    5172:	82 e0       	ldi	r24, 0x02	; 2
    5174:	60 e0       	ldi	r22, 0x00	; 0
    5176:	49 2f       	mov	r20, r25
    5178:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    517c:	8f 85       	ldd	r24, Y+15	; 0x0f
    517e:	82 95       	swap	r24
    5180:	86 95       	lsr	r24
    5182:	87 70       	andi	r24, 0x07	; 7
    5184:	98 2f       	mov	r25, r24
    5186:	91 70       	andi	r25, 0x01	; 1
    5188:	82 e0       	ldi	r24, 0x02	; 2
    518a:	61 e0       	ldi	r22, 0x01	; 1
    518c:	49 2f       	mov	r20, r25
    518e:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    5192:	8f 85       	ldd	r24, Y+15	; 0x0f
    5194:	82 95       	swap	r24
    5196:	86 95       	lsr	r24
    5198:	86 95       	lsr	r24
    519a:	83 70       	andi	r24, 0x03	; 3
    519c:	98 2f       	mov	r25, r24
    519e:	91 70       	andi	r25, 0x01	; 1
    51a0:	82 e0       	ldi	r24, 0x02	; 2
    51a2:	62 e0       	ldi	r22, 0x02	; 2
    51a4:	49 2f       	mov	r20, r25
    51a6:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    51aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    51ac:	98 2f       	mov	r25, r24
    51ae:	99 1f       	adc	r25, r25
    51b0:	99 27       	eor	r25, r25
    51b2:	99 1f       	adc	r25, r25
    51b4:	82 e0       	ldi	r24, 0x02	; 2
    51b6:	64 e0       	ldi	r22, 0x04	; 4
    51b8:	49 2f       	mov	r20, r25
    51ba:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    51be:	81 e0       	ldi	r24, 0x01	; 1
    51c0:	62 e0       	ldi	r22, 0x02	; 2
    51c2:	40 e0       	ldi	r20, 0x00	; 0
    51c4:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    51c8:	81 e0       	ldi	r24, 0x01	; 1
    51ca:	62 e0       	ldi	r22, 0x02	; 2
    51cc:	41 e0       	ldi	r20, 0x01	; 1
    51ce:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    51d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    51d4:	98 2f       	mov	r25, r24
    51d6:	91 70       	andi	r25, 0x01	; 1
    51d8:	82 e0       	ldi	r24, 0x02	; 2
    51da:	60 e0       	ldi	r22, 0x00	; 0
    51dc:	49 2f       	mov	r20, r25
    51de:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    51e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    51e4:	86 95       	lsr	r24
    51e6:	98 2f       	mov	r25, r24
    51e8:	91 70       	andi	r25, 0x01	; 1
    51ea:	82 e0       	ldi	r24, 0x02	; 2
    51ec:	61 e0       	ldi	r22, 0x01	; 1
    51ee:	49 2f       	mov	r20, r25
    51f0:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    51f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    51f6:	86 95       	lsr	r24
    51f8:	86 95       	lsr	r24
    51fa:	98 2f       	mov	r25, r24
    51fc:	91 70       	andi	r25, 0x01	; 1
    51fe:	82 e0       	ldi	r24, 0x02	; 2
    5200:	62 e0       	ldi	r22, 0x02	; 2
    5202:	49 2f       	mov	r20, r25
    5204:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    5208:	8f 85       	ldd	r24, Y+15	; 0x0f
    520a:	86 95       	lsr	r24
    520c:	86 95       	lsr	r24
    520e:	86 95       	lsr	r24
    5210:	98 2f       	mov	r25, r24
    5212:	91 70       	andi	r25, 0x01	; 1
    5214:	82 e0       	ldi	r24, 0x02	; 2
    5216:	64 e0       	ldi	r22, 0x04	; 4
    5218:	49 2f       	mov	r20, r25
    521a:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    521e:	81 e0       	ldi	r24, 0x01	; 1
    5220:	62 e0       	ldi	r22, 0x02	; 2
    5222:	40 e0       	ldi	r20, 0x00	; 0
    5224:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
    5228:	80 e0       	ldi	r24, 0x00	; 0
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	a0 ea       	ldi	r26, 0xA0	; 160
    522e:	b0 e4       	ldi	r27, 0x40	; 64
    5230:	8b 87       	std	Y+11, r24	; 0x0b
    5232:	9c 87       	std	Y+12, r25	; 0x0c
    5234:	ad 87       	std	Y+13, r26	; 0x0d
    5236:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5238:	6b 85       	ldd	r22, Y+11	; 0x0b
    523a:	7c 85       	ldd	r23, Y+12	; 0x0c
    523c:	8d 85       	ldd	r24, Y+13	; 0x0d
    523e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5240:	20 e0       	ldi	r18, 0x00	; 0
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	4a e7       	ldi	r20, 0x7A	; 122
    5246:	55 e4       	ldi	r21, 0x45	; 69
    5248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    524c:	dc 01       	movw	r26, r24
    524e:	cb 01       	movw	r24, r22
    5250:	8f 83       	std	Y+7, r24	; 0x07
    5252:	98 87       	std	Y+8, r25	; 0x08
    5254:	a9 87       	std	Y+9, r26	; 0x09
    5256:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5258:	6f 81       	ldd	r22, Y+7	; 0x07
    525a:	78 85       	ldd	r23, Y+8	; 0x08
    525c:	89 85       	ldd	r24, Y+9	; 0x09
    525e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5260:	20 e0       	ldi	r18, 0x00	; 0
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	40 e8       	ldi	r20, 0x80	; 128
    5266:	5f e3       	ldi	r21, 0x3F	; 63
    5268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    526c:	88 23       	and	r24, r24
    526e:	2c f4       	brge	.+10     	; 0x527a <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    5270:	81 e0       	ldi	r24, 0x01	; 1
    5272:	90 e0       	ldi	r25, 0x00	; 0
    5274:	9e 83       	std	Y+6, r25	; 0x06
    5276:	8d 83       	std	Y+5, r24	; 0x05
    5278:	3f c0       	rjmp	.+126    	; 0x52f8 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    527a:	6f 81       	ldd	r22, Y+7	; 0x07
    527c:	78 85       	ldd	r23, Y+8	; 0x08
    527e:	89 85       	ldd	r24, Y+9	; 0x09
    5280:	9a 85       	ldd	r25, Y+10	; 0x0a
    5282:	20 e0       	ldi	r18, 0x00	; 0
    5284:	3f ef       	ldi	r19, 0xFF	; 255
    5286:	4f e7       	ldi	r20, 0x7F	; 127
    5288:	57 e4       	ldi	r21, 0x47	; 71
    528a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    528e:	18 16       	cp	r1, r24
    5290:	4c f5       	brge	.+82     	; 0x52e4 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5292:	6b 85       	ldd	r22, Y+11	; 0x0b
    5294:	7c 85       	ldd	r23, Y+12	; 0x0c
    5296:	8d 85       	ldd	r24, Y+13	; 0x0d
    5298:	9e 85       	ldd	r25, Y+14	; 0x0e
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	40 e2       	ldi	r20, 0x20	; 32
    52a0:	51 e4       	ldi	r21, 0x41	; 65
    52a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a6:	dc 01       	movw	r26, r24
    52a8:	cb 01       	movw	r24, r22
    52aa:	bc 01       	movw	r22, r24
    52ac:	cd 01       	movw	r24, r26
    52ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b2:	dc 01       	movw	r26, r24
    52b4:	cb 01       	movw	r24, r22
    52b6:	9e 83       	std	Y+6, r25	; 0x06
    52b8:	8d 83       	std	Y+5, r24	; 0x05
    52ba:	0f c0       	rjmp	.+30     	; 0x52da <LCD_voidSendCommand+0x19c>
    52bc:	80 e9       	ldi	r24, 0x90	; 144
    52be:	91 e0       	ldi	r25, 0x01	; 1
    52c0:	9c 83       	std	Y+4, r25	; 0x04
    52c2:	8b 83       	std	Y+3, r24	; 0x03
    52c4:	8b 81       	ldd	r24, Y+3	; 0x03
    52c6:	9c 81       	ldd	r25, Y+4	; 0x04
    52c8:	01 97       	sbiw	r24, 0x01	; 1
    52ca:	f1 f7       	brne	.-4      	; 0x52c8 <LCD_voidSendCommand+0x18a>
    52cc:	9c 83       	std	Y+4, r25	; 0x04
    52ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52d0:	8d 81       	ldd	r24, Y+5	; 0x05
    52d2:	9e 81       	ldd	r25, Y+6	; 0x06
    52d4:	01 97       	sbiw	r24, 0x01	; 1
    52d6:	9e 83       	std	Y+6, r25	; 0x06
    52d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52da:	8d 81       	ldd	r24, Y+5	; 0x05
    52dc:	9e 81       	ldd	r25, Y+6	; 0x06
    52de:	00 97       	sbiw	r24, 0x00	; 0
    52e0:	69 f7       	brne	.-38     	; 0x52bc <LCD_voidSendCommand+0x17e>
    52e2:	14 c0       	rjmp	.+40     	; 0x530c <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52e4:	6f 81       	ldd	r22, Y+7	; 0x07
    52e6:	78 85       	ldd	r23, Y+8	; 0x08
    52e8:	89 85       	ldd	r24, Y+9	; 0x09
    52ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    52ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52f0:	dc 01       	movw	r26, r24
    52f2:	cb 01       	movw	r24, r22
    52f4:	9e 83       	std	Y+6, r25	; 0x06
    52f6:	8d 83       	std	Y+5, r24	; 0x05
    52f8:	8d 81       	ldd	r24, Y+5	; 0x05
    52fa:	9e 81       	ldd	r25, Y+6	; 0x06
    52fc:	9a 83       	std	Y+2, r25	; 0x02
    52fe:	89 83       	std	Y+1, r24	; 0x01
    5300:	89 81       	ldd	r24, Y+1	; 0x01
    5302:	9a 81       	ldd	r25, Y+2	; 0x02
    5304:	01 97       	sbiw	r24, 0x01	; 1
    5306:	f1 f7       	brne	.-4      	; 0x5304 <LCD_voidSendCommand+0x1c6>
    5308:	9a 83       	std	Y+2, r25	; 0x02
    530a:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    530c:	2f 96       	adiw	r28, 0x0f	; 15
    530e:	0f b6       	in	r0, 0x3f	; 63
    5310:	f8 94       	cli
    5312:	de bf       	out	0x3e, r29	; 62
    5314:	0f be       	out	0x3f, r0	; 63
    5316:	cd bf       	out	0x3d, r28	; 61
    5318:	cf 91       	pop	r28
    531a:	df 91       	pop	r29
    531c:	08 95       	ret

0000531e <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    531e:	df 93       	push	r29
    5320:	cf 93       	push	r28
    5322:	cd b7       	in	r28, 0x3d	; 61
    5324:	de b7       	in	r29, 0x3e	; 62
    5326:	2f 97       	sbiw	r28, 0x0f	; 15
    5328:	0f b6       	in	r0, 0x3f	; 63
    532a:	f8 94       	cli
    532c:	de bf       	out	0x3e, r29	; 62
    532e:	0f be       	out	0x3f, r0	; 63
    5330:	cd bf       	out	0x3d, r28	; 61
    5332:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    5334:	81 e0       	ldi	r24, 0x01	; 1
    5336:	63 e0       	ldi	r22, 0x03	; 3
    5338:	40 e0       	ldi	r20, 0x00	; 0
    533a:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    533e:	81 e0       	ldi	r24, 0x01	; 1
    5340:	62 e0       	ldi	r22, 0x02	; 2
    5342:	41 e0       	ldi	r20, 0x01	; 1
    5344:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    5348:	8f 85       	ldd	r24, Y+15	; 0x0f
    534a:	82 95       	swap	r24
    534c:	8f 70       	andi	r24, 0x0F	; 15
    534e:	98 2f       	mov	r25, r24
    5350:	91 70       	andi	r25, 0x01	; 1
    5352:	82 e0       	ldi	r24, 0x02	; 2
    5354:	60 e0       	ldi	r22, 0x00	; 0
    5356:	49 2f       	mov	r20, r25
    5358:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    535c:	8f 85       	ldd	r24, Y+15	; 0x0f
    535e:	82 95       	swap	r24
    5360:	86 95       	lsr	r24
    5362:	87 70       	andi	r24, 0x07	; 7
    5364:	98 2f       	mov	r25, r24
    5366:	91 70       	andi	r25, 0x01	; 1
    5368:	82 e0       	ldi	r24, 0x02	; 2
    536a:	61 e0       	ldi	r22, 0x01	; 1
    536c:	49 2f       	mov	r20, r25
    536e:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    5372:	8f 85       	ldd	r24, Y+15	; 0x0f
    5374:	82 95       	swap	r24
    5376:	86 95       	lsr	r24
    5378:	86 95       	lsr	r24
    537a:	83 70       	andi	r24, 0x03	; 3
    537c:	98 2f       	mov	r25, r24
    537e:	91 70       	andi	r25, 0x01	; 1
    5380:	82 e0       	ldi	r24, 0x02	; 2
    5382:	62 e0       	ldi	r22, 0x02	; 2
    5384:	49 2f       	mov	r20, r25
    5386:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    538a:	8f 85       	ldd	r24, Y+15	; 0x0f
    538c:	98 2f       	mov	r25, r24
    538e:	99 1f       	adc	r25, r25
    5390:	99 27       	eor	r25, r25
    5392:	99 1f       	adc	r25, r25
    5394:	82 e0       	ldi	r24, 0x02	; 2
    5396:	64 e0       	ldi	r22, 0x04	; 4
    5398:	49 2f       	mov	r20, r25
    539a:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    539e:	81 e0       	ldi	r24, 0x01	; 1
    53a0:	62 e0       	ldi	r22, 0x02	; 2
    53a2:	40 e0       	ldi	r20, 0x00	; 0
    53a4:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	a0 ea       	ldi	r26, 0xA0	; 160
    53ae:	b0 e4       	ldi	r27, 0x40	; 64
    53b0:	8b 87       	std	Y+11, r24	; 0x0b
    53b2:	9c 87       	std	Y+12, r25	; 0x0c
    53b4:	ad 87       	std	Y+13, r26	; 0x0d
    53b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    53bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    53be:	9e 85       	ldd	r25, Y+14	; 0x0e
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	4a e7       	ldi	r20, 0x7A	; 122
    53c6:	55 e4       	ldi	r21, 0x45	; 69
    53c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	8f 83       	std	Y+7, r24	; 0x07
    53d2:	98 87       	std	Y+8, r25	; 0x08
    53d4:	a9 87       	std	Y+9, r26	; 0x09
    53d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53d8:	6f 81       	ldd	r22, Y+7	; 0x07
    53da:	78 85       	ldd	r23, Y+8	; 0x08
    53dc:	89 85       	ldd	r24, Y+9	; 0x09
    53de:	9a 85       	ldd	r25, Y+10	; 0x0a
    53e0:	20 e0       	ldi	r18, 0x00	; 0
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	40 e8       	ldi	r20, 0x80	; 128
    53e6:	5f e3       	ldi	r21, 0x3F	; 63
    53e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53ec:	88 23       	and	r24, r24
    53ee:	2c f4       	brge	.+10     	; 0x53fa <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	9e 83       	std	Y+6, r25	; 0x06
    53f6:	8d 83       	std	Y+5, r24	; 0x05
    53f8:	3f c0       	rjmp	.+126    	; 0x5478 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    53fa:	6f 81       	ldd	r22, Y+7	; 0x07
    53fc:	78 85       	ldd	r23, Y+8	; 0x08
    53fe:	89 85       	ldd	r24, Y+9	; 0x09
    5400:	9a 85       	ldd	r25, Y+10	; 0x0a
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	3f ef       	ldi	r19, 0xFF	; 255
    5406:	4f e7       	ldi	r20, 0x7F	; 127
    5408:	57 e4       	ldi	r21, 0x47	; 71
    540a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    540e:	18 16       	cp	r1, r24
    5410:	4c f5       	brge	.+82     	; 0x5464 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5412:	6b 85       	ldd	r22, Y+11	; 0x0b
    5414:	7c 85       	ldd	r23, Y+12	; 0x0c
    5416:	8d 85       	ldd	r24, Y+13	; 0x0d
    5418:	9e 85       	ldd	r25, Y+14	; 0x0e
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	40 e2       	ldi	r20, 0x20	; 32
    5420:	51 e4       	ldi	r21, 0x41	; 65
    5422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	bc 01       	movw	r22, r24
    542c:	cd 01       	movw	r24, r26
    542e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5432:	dc 01       	movw	r26, r24
    5434:	cb 01       	movw	r24, r22
    5436:	9e 83       	std	Y+6, r25	; 0x06
    5438:	8d 83       	std	Y+5, r24	; 0x05
    543a:	0f c0       	rjmp	.+30     	; 0x545a <LCD_voidSendInitCommand+0x13c>
    543c:	80 e9       	ldi	r24, 0x90	; 144
    543e:	91 e0       	ldi	r25, 0x01	; 1
    5440:	9c 83       	std	Y+4, r25	; 0x04
    5442:	8b 83       	std	Y+3, r24	; 0x03
    5444:	8b 81       	ldd	r24, Y+3	; 0x03
    5446:	9c 81       	ldd	r25, Y+4	; 0x04
    5448:	01 97       	sbiw	r24, 0x01	; 1
    544a:	f1 f7       	brne	.-4      	; 0x5448 <LCD_voidSendInitCommand+0x12a>
    544c:	9c 83       	std	Y+4, r25	; 0x04
    544e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5450:	8d 81       	ldd	r24, Y+5	; 0x05
    5452:	9e 81       	ldd	r25, Y+6	; 0x06
    5454:	01 97       	sbiw	r24, 0x01	; 1
    5456:	9e 83       	std	Y+6, r25	; 0x06
    5458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    545a:	8d 81       	ldd	r24, Y+5	; 0x05
    545c:	9e 81       	ldd	r25, Y+6	; 0x06
    545e:	00 97       	sbiw	r24, 0x00	; 0
    5460:	69 f7       	brne	.-38     	; 0x543c <LCD_voidSendInitCommand+0x11e>
    5462:	14 c0       	rjmp	.+40     	; 0x548c <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5464:	6f 81       	ldd	r22, Y+7	; 0x07
    5466:	78 85       	ldd	r23, Y+8	; 0x08
    5468:	89 85       	ldd	r24, Y+9	; 0x09
    546a:	9a 85       	ldd	r25, Y+10	; 0x0a
    546c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5470:	dc 01       	movw	r26, r24
    5472:	cb 01       	movw	r24, r22
    5474:	9e 83       	std	Y+6, r25	; 0x06
    5476:	8d 83       	std	Y+5, r24	; 0x05
    5478:	8d 81       	ldd	r24, Y+5	; 0x05
    547a:	9e 81       	ldd	r25, Y+6	; 0x06
    547c:	9a 83       	std	Y+2, r25	; 0x02
    547e:	89 83       	std	Y+1, r24	; 0x01
    5480:	89 81       	ldd	r24, Y+1	; 0x01
    5482:	9a 81       	ldd	r25, Y+2	; 0x02
    5484:	01 97       	sbiw	r24, 0x01	; 1
    5486:	f1 f7       	brne	.-4      	; 0x5484 <LCD_voidSendInitCommand+0x166>
    5488:	9a 83       	std	Y+2, r25	; 0x02
    548a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    548c:	2f 96       	adiw	r28, 0x0f	; 15
    548e:	0f b6       	in	r0, 0x3f	; 63
    5490:	f8 94       	cli
    5492:	de bf       	out	0x3e, r29	; 62
    5494:	0f be       	out	0x3f, r0	; 63
    5496:	cd bf       	out	0x3d, r28	; 61
    5498:	cf 91       	pop	r28
    549a:	df 91       	pop	r29
    549c:	08 95       	ret

0000549e <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    549e:	df 93       	push	r29
    54a0:	cf 93       	push	r28
    54a2:	cd b7       	in	r28, 0x3d	; 61
    54a4:	de b7       	in	r29, 0x3e	; 62
    54a6:	2f 97       	sbiw	r28, 0x0f	; 15
    54a8:	0f b6       	in	r0, 0x3f	; 63
    54aa:	f8 94       	cli
    54ac:	de bf       	out	0x3e, r29	; 62
    54ae:	0f be       	out	0x3f, r0	; 63
    54b0:	cd bf       	out	0x3d, r28	; 61
    54b2:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
    54b4:	81 e0       	ldi	r24, 0x01	; 1
    54b6:	63 e0       	ldi	r22, 0x03	; 3
    54b8:	41 e0       	ldi	r20, 0x01	; 1
    54ba:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	62 e0       	ldi	r22, 0x02	; 2
    54c2:	41 e0       	ldi	r20, 0x01	; 1
    54c4:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    54c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    54ca:	82 95       	swap	r24
    54cc:	8f 70       	andi	r24, 0x0F	; 15
    54ce:	98 2f       	mov	r25, r24
    54d0:	91 70       	andi	r25, 0x01	; 1
    54d2:	82 e0       	ldi	r24, 0x02	; 2
    54d4:	60 e0       	ldi	r22, 0x00	; 0
    54d6:	49 2f       	mov	r20, r25
    54d8:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    54dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    54de:	82 95       	swap	r24
    54e0:	86 95       	lsr	r24
    54e2:	87 70       	andi	r24, 0x07	; 7
    54e4:	98 2f       	mov	r25, r24
    54e6:	91 70       	andi	r25, 0x01	; 1
    54e8:	82 e0       	ldi	r24, 0x02	; 2
    54ea:	61 e0       	ldi	r22, 0x01	; 1
    54ec:	49 2f       	mov	r20, r25
    54ee:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    54f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    54f4:	82 95       	swap	r24
    54f6:	86 95       	lsr	r24
    54f8:	86 95       	lsr	r24
    54fa:	83 70       	andi	r24, 0x03	; 3
    54fc:	98 2f       	mov	r25, r24
    54fe:	91 70       	andi	r25, 0x01	; 1
    5500:	82 e0       	ldi	r24, 0x02	; 2
    5502:	62 e0       	ldi	r22, 0x02	; 2
    5504:	49 2f       	mov	r20, r25
    5506:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    550a:	8f 85       	ldd	r24, Y+15	; 0x0f
    550c:	98 2f       	mov	r25, r24
    550e:	99 1f       	adc	r25, r25
    5510:	99 27       	eor	r25, r25
    5512:	99 1f       	adc	r25, r25
    5514:	82 e0       	ldi	r24, 0x02	; 2
    5516:	64 e0       	ldi	r22, 0x04	; 4
    5518:	49 2f       	mov	r20, r25
    551a:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	62 e0       	ldi	r22, 0x02	; 2
    5522:	40 e0       	ldi	r20, 0x00	; 0
    5524:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    5528:	81 e0       	ldi	r24, 0x01	; 1
    552a:	62 e0       	ldi	r22, 0x02	; 2
    552c:	41 e0       	ldi	r20, 0x01	; 1
    552e:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    5532:	8f 85       	ldd	r24, Y+15	; 0x0f
    5534:	98 2f       	mov	r25, r24
    5536:	91 70       	andi	r25, 0x01	; 1
    5538:	82 e0       	ldi	r24, 0x02	; 2
    553a:	60 e0       	ldi	r22, 0x00	; 0
    553c:	49 2f       	mov	r20, r25
    553e:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    5542:	8f 85       	ldd	r24, Y+15	; 0x0f
    5544:	86 95       	lsr	r24
    5546:	98 2f       	mov	r25, r24
    5548:	91 70       	andi	r25, 0x01	; 1
    554a:	82 e0       	ldi	r24, 0x02	; 2
    554c:	61 e0       	ldi	r22, 0x01	; 1
    554e:	49 2f       	mov	r20, r25
    5550:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    5554:	8f 85       	ldd	r24, Y+15	; 0x0f
    5556:	86 95       	lsr	r24
    5558:	86 95       	lsr	r24
    555a:	98 2f       	mov	r25, r24
    555c:	91 70       	andi	r25, 0x01	; 1
    555e:	82 e0       	ldi	r24, 0x02	; 2
    5560:	62 e0       	ldi	r22, 0x02	; 2
    5562:	49 2f       	mov	r20, r25
    5564:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    5568:	8f 85       	ldd	r24, Y+15	; 0x0f
    556a:	86 95       	lsr	r24
    556c:	86 95       	lsr	r24
    556e:	86 95       	lsr	r24
    5570:	98 2f       	mov	r25, r24
    5572:	91 70       	andi	r25, 0x01	; 1
    5574:	82 e0       	ldi	r24, 0x02	; 2
    5576:	64 e0       	ldi	r22, 0x04	; 4
    5578:	49 2f       	mov	r20, r25
    557a:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	62 e0       	ldi	r22, 0x02	; 2
    5582:	40 e0       	ldi	r20, 0x00	; 0
    5584:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
    5588:	80 e0       	ldi	r24, 0x00	; 0
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	a0 ea       	ldi	r26, 0xA0	; 160
    558e:	b0 e4       	ldi	r27, 0x40	; 64
    5590:	8b 87       	std	Y+11, r24	; 0x0b
    5592:	9c 87       	std	Y+12, r25	; 0x0c
    5594:	ad 87       	std	Y+13, r26	; 0x0d
    5596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5598:	6b 85       	ldd	r22, Y+11	; 0x0b
    559a:	7c 85       	ldd	r23, Y+12	; 0x0c
    559c:	8d 85       	ldd	r24, Y+13	; 0x0d
    559e:	9e 85       	ldd	r25, Y+14	; 0x0e
    55a0:	20 e0       	ldi	r18, 0x00	; 0
    55a2:	30 e0       	ldi	r19, 0x00	; 0
    55a4:	4a e7       	ldi	r20, 0x7A	; 122
    55a6:	55 e4       	ldi	r21, 0x45	; 69
    55a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ac:	dc 01       	movw	r26, r24
    55ae:	cb 01       	movw	r24, r22
    55b0:	8f 83       	std	Y+7, r24	; 0x07
    55b2:	98 87       	std	Y+8, r25	; 0x08
    55b4:	a9 87       	std	Y+9, r26	; 0x09
    55b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    55b8:	6f 81       	ldd	r22, Y+7	; 0x07
    55ba:	78 85       	ldd	r23, Y+8	; 0x08
    55bc:	89 85       	ldd	r24, Y+9	; 0x09
    55be:	9a 85       	ldd	r25, Y+10	; 0x0a
    55c0:	20 e0       	ldi	r18, 0x00	; 0
    55c2:	30 e0       	ldi	r19, 0x00	; 0
    55c4:	40 e8       	ldi	r20, 0x80	; 128
    55c6:	5f e3       	ldi	r21, 0x3F	; 63
    55c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55cc:	88 23       	and	r24, r24
    55ce:	2c f4       	brge	.+10     	; 0x55da <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    55d0:	81 e0       	ldi	r24, 0x01	; 1
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	9e 83       	std	Y+6, r25	; 0x06
    55d6:	8d 83       	std	Y+5, r24	; 0x05
    55d8:	3f c0       	rjmp	.+126    	; 0x5658 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    55da:	6f 81       	ldd	r22, Y+7	; 0x07
    55dc:	78 85       	ldd	r23, Y+8	; 0x08
    55de:	89 85       	ldd	r24, Y+9	; 0x09
    55e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	3f ef       	ldi	r19, 0xFF	; 255
    55e6:	4f e7       	ldi	r20, 0x7F	; 127
    55e8:	57 e4       	ldi	r21, 0x47	; 71
    55ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55ee:	18 16       	cp	r1, r24
    55f0:	4c f5       	brge	.+82     	; 0x5644 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    55f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    55f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    55f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    55fa:	20 e0       	ldi	r18, 0x00	; 0
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	40 e2       	ldi	r20, 0x20	; 32
    5600:	51 e4       	ldi	r21, 0x41	; 65
    5602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5606:	dc 01       	movw	r26, r24
    5608:	cb 01       	movw	r24, r22
    560a:	bc 01       	movw	r22, r24
    560c:	cd 01       	movw	r24, r26
    560e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5612:	dc 01       	movw	r26, r24
    5614:	cb 01       	movw	r24, r22
    5616:	9e 83       	std	Y+6, r25	; 0x06
    5618:	8d 83       	std	Y+5, r24	; 0x05
    561a:	0f c0       	rjmp	.+30     	; 0x563a <LCD_voidWriteChar+0x19c>
    561c:	80 e9       	ldi	r24, 0x90	; 144
    561e:	91 e0       	ldi	r25, 0x01	; 1
    5620:	9c 83       	std	Y+4, r25	; 0x04
    5622:	8b 83       	std	Y+3, r24	; 0x03
    5624:	8b 81       	ldd	r24, Y+3	; 0x03
    5626:	9c 81       	ldd	r25, Y+4	; 0x04
    5628:	01 97       	sbiw	r24, 0x01	; 1
    562a:	f1 f7       	brne	.-4      	; 0x5628 <LCD_voidWriteChar+0x18a>
    562c:	9c 83       	std	Y+4, r25	; 0x04
    562e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5630:	8d 81       	ldd	r24, Y+5	; 0x05
    5632:	9e 81       	ldd	r25, Y+6	; 0x06
    5634:	01 97       	sbiw	r24, 0x01	; 1
    5636:	9e 83       	std	Y+6, r25	; 0x06
    5638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    563a:	8d 81       	ldd	r24, Y+5	; 0x05
    563c:	9e 81       	ldd	r25, Y+6	; 0x06
    563e:	00 97       	sbiw	r24, 0x00	; 0
    5640:	69 f7       	brne	.-38     	; 0x561c <LCD_voidWriteChar+0x17e>
    5642:	14 c0       	rjmp	.+40     	; 0x566c <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5644:	6f 81       	ldd	r22, Y+7	; 0x07
    5646:	78 85       	ldd	r23, Y+8	; 0x08
    5648:	89 85       	ldd	r24, Y+9	; 0x09
    564a:	9a 85       	ldd	r25, Y+10	; 0x0a
    564c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5650:	dc 01       	movw	r26, r24
    5652:	cb 01       	movw	r24, r22
    5654:	9e 83       	std	Y+6, r25	; 0x06
    5656:	8d 83       	std	Y+5, r24	; 0x05
    5658:	8d 81       	ldd	r24, Y+5	; 0x05
    565a:	9e 81       	ldd	r25, Y+6	; 0x06
    565c:	9a 83       	std	Y+2, r25	; 0x02
    565e:	89 83       	std	Y+1, r24	; 0x01
    5660:	89 81       	ldd	r24, Y+1	; 0x01
    5662:	9a 81       	ldd	r25, Y+2	; 0x02
    5664:	01 97       	sbiw	r24, 0x01	; 1
    5666:	f1 f7       	brne	.-4      	; 0x5664 <LCD_voidWriteChar+0x1c6>
    5668:	9a 83       	std	Y+2, r25	; 0x02
    566a:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    566c:	2f 96       	adiw	r28, 0x0f	; 15
    566e:	0f b6       	in	r0, 0x3f	; 63
    5670:	f8 94       	cli
    5672:	de bf       	out	0x3e, r29	; 62
    5674:	0f be       	out	0x3f, r0	; 63
    5676:	cd bf       	out	0x3d, r28	; 61
    5678:	cf 91       	pop	r28
    567a:	df 91       	pop	r29
    567c:	08 95       	ret

0000567e <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    567e:	df 93       	push	r29
    5680:	cf 93       	push	r28
    5682:	00 d0       	rcall	.+0      	; 0x5684 <LCD_voidWriteString+0x6>
    5684:	0f 92       	push	r0
    5686:	cd b7       	in	r28, 0x3d	; 61
    5688:	de b7       	in	r29, 0x3e	; 62
    568a:	9b 83       	std	Y+3, r25	; 0x03
    568c:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    568e:	19 82       	std	Y+1, r1	; 0x01
    5690:	0e c0       	rjmp	.+28     	; 0x56ae <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    5692:	89 81       	ldd	r24, Y+1	; 0x01
    5694:	28 2f       	mov	r18, r24
    5696:	30 e0       	ldi	r19, 0x00	; 0
    5698:	8a 81       	ldd	r24, Y+2	; 0x02
    569a:	9b 81       	ldd	r25, Y+3	; 0x03
    569c:	fc 01       	movw	r30, r24
    569e:	e2 0f       	add	r30, r18
    56a0:	f3 1f       	adc	r31, r19
    56a2:	80 81       	ld	r24, Z
    56a4:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		index++;
    56a8:	89 81       	ldd	r24, Y+1	; 0x01
    56aa:	8f 5f       	subi	r24, 0xFF	; 255
    56ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    56ae:	89 81       	ldd	r24, Y+1	; 0x01
    56b0:	28 2f       	mov	r18, r24
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	8a 81       	ldd	r24, Y+2	; 0x02
    56b6:	9b 81       	ldd	r25, Y+3	; 0x03
    56b8:	fc 01       	movw	r30, r24
    56ba:	e2 0f       	add	r30, r18
    56bc:	f3 1f       	adc	r31, r19
    56be:	80 81       	ld	r24, Z
    56c0:	88 23       	and	r24, r24
    56c2:	39 f7       	brne	.-50     	; 0x5692 <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    56c4:	0f 90       	pop	r0
    56c6:	0f 90       	pop	r0
    56c8:	0f 90       	pop	r0
    56ca:	cf 91       	pop	r28
    56cc:	df 91       	pop	r29
    56ce:	08 95       	ret

000056d0 <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    56d0:	0f 93       	push	r16
    56d2:	1f 93       	push	r17
    56d4:	df 93       	push	r29
    56d6:	cf 93       	push	r28
    56d8:	cd b7       	in	r28, 0x3d	; 61
    56da:	de b7       	in	r29, 0x3e	; 62
    56dc:	2e 97       	sbiw	r28, 0x0e	; 14
    56de:	0f b6       	in	r0, 0x3f	; 63
    56e0:	f8 94       	cli
    56e2:	de bf       	out	0x3e, r29	; 62
    56e4:	0f be       	out	0x3f, r0	; 63
    56e6:	cd bf       	out	0x3d, r28	; 61
    56e8:	69 87       	std	Y+9, r22	; 0x09
    56ea:	7a 87       	std	Y+10, r23	; 0x0a
    56ec:	8b 87       	std	Y+11, r24	; 0x0b
    56ee:	9c 87       	std	Y+12, r25	; 0x0c
    56f0:	5e 87       	std	Y+14, r21	; 0x0e
    56f2:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    56f4:	1d 82       	std	Y+5, r1	; 0x05
    56f6:	1e 82       	std	Y+6, r1	; 0x06
    56f8:	1f 82       	std	Y+7, r1	; 0x07
    56fa:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    56fc:	83 e1       	ldi	r24, 0x13	; 19
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	a0 e0       	ldi	r26, 0x00	; 0
    5702:	b0 e0       	ldi	r27, 0x00	; 0
    5704:	89 83       	std	Y+1, r24	; 0x01
    5706:	9a 83       	std	Y+2, r25	; 0x02
    5708:	ab 83       	std	Y+3, r26	; 0x03
    570a:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    570c:	29 81       	ldd	r18, Y+1	; 0x01
    570e:	3a 81       	ldd	r19, Y+2	; 0x02
    5710:	8d 85       	ldd	r24, Y+13	; 0x0d
    5712:	9e 85       	ldd	r25, Y+14	; 0x0e
    5714:	fc 01       	movw	r30, r24
    5716:	e2 0f       	add	r30, r18
    5718:	f3 1f       	adc	r31, r19
    571a:	10 82       	st	Z, r1
    571c:	89 81       	ldd	r24, Y+1	; 0x01
    571e:	9a 81       	ldd	r25, Y+2	; 0x02
    5720:	ab 81       	ldd	r26, Y+3	; 0x03
    5722:	bc 81       	ldd	r27, Y+4	; 0x04
    5724:	01 97       	sbiw	r24, 0x01	; 1
    5726:	a1 09       	sbc	r26, r1
    5728:	b1 09       	sbc	r27, r1
    572a:	89 83       	std	Y+1, r24	; 0x01
    572c:	9a 83       	std	Y+2, r25	; 0x02
    572e:	ab 83       	std	Y+3, r26	; 0x03
    5730:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    5732:	89 85       	ldd	r24, Y+9	; 0x09
    5734:	9a 85       	ldd	r25, Y+10	; 0x0a
    5736:	ab 85       	ldd	r26, Y+11	; 0x0b
    5738:	bc 85       	ldd	r27, Y+12	; 0x0c
    573a:	bb 23       	and	r27, r27
    573c:	0c f0       	brlt	.+2      	; 0x5740 <IntToString+0x70>
    573e:	4d c0       	rjmp	.+154    	; 0x57da <IntToString+0x10a>
		flag = 1;
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	90 e0       	ldi	r25, 0x00	; 0
    5744:	a0 e0       	ldi	r26, 0x00	; 0
    5746:	b0 e0       	ldi	r27, 0x00	; 0
    5748:	8d 83       	std	Y+5, r24	; 0x05
    574a:	9e 83       	std	Y+6, r25	; 0x06
    574c:	af 83       	std	Y+7, r26	; 0x07
    574e:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    5750:	89 85       	ldd	r24, Y+9	; 0x09
    5752:	9a 85       	ldd	r25, Y+10	; 0x0a
    5754:	ab 85       	ldd	r26, Y+11	; 0x0b
    5756:	bc 85       	ldd	r27, Y+12	; 0x0c
    5758:	b0 95       	com	r27
    575a:	a0 95       	com	r26
    575c:	90 95       	com	r25
    575e:	81 95       	neg	r24
    5760:	9f 4f       	sbci	r25, 0xFF	; 255
    5762:	af 4f       	sbci	r26, 0xFF	; 255
    5764:	bf 4f       	sbci	r27, 0xFF	; 255
    5766:	89 87       	std	Y+9, r24	; 0x09
    5768:	9a 87       	std	Y+10, r25	; 0x0a
    576a:	ab 87       	std	Y+11, r26	; 0x0b
    576c:	bc 87       	std	Y+12, r27	; 0x0c
    576e:	35 c0       	rjmp	.+106    	; 0x57da <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    5770:	29 81       	ldd	r18, Y+1	; 0x01
    5772:	3a 81       	ldd	r19, Y+2	; 0x02
    5774:	8d 85       	ldd	r24, Y+13	; 0x0d
    5776:	9e 85       	ldd	r25, Y+14	; 0x0e
    5778:	8c 01       	movw	r16, r24
    577a:	02 0f       	add	r16, r18
    577c:	13 1f       	adc	r17, r19
    577e:	89 85       	ldd	r24, Y+9	; 0x09
    5780:	9a 85       	ldd	r25, Y+10	; 0x0a
    5782:	ab 85       	ldd	r26, Y+11	; 0x0b
    5784:	bc 85       	ldd	r27, Y+12	; 0x0c
    5786:	2a e0       	ldi	r18, 0x0A	; 10
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	40 e0       	ldi	r20, 0x00	; 0
    578c:	50 e0       	ldi	r21, 0x00	; 0
    578e:	bc 01       	movw	r22, r24
    5790:	cd 01       	movw	r24, r26
    5792:	0e 94 6d 30 	call	0x60da	; 0x60da <__divmodsi4>
    5796:	dc 01       	movw	r26, r24
    5798:	cb 01       	movw	r24, r22
    579a:	80 5d       	subi	r24, 0xD0	; 208
    579c:	f8 01       	movw	r30, r16
    579e:	80 83       	st	Z, r24
    57a0:	89 81       	ldd	r24, Y+1	; 0x01
    57a2:	9a 81       	ldd	r25, Y+2	; 0x02
    57a4:	ab 81       	ldd	r26, Y+3	; 0x03
    57a6:	bc 81       	ldd	r27, Y+4	; 0x04
    57a8:	01 97       	sbiw	r24, 0x01	; 1
    57aa:	a1 09       	sbc	r26, r1
    57ac:	b1 09       	sbc	r27, r1
    57ae:	89 83       	std	Y+1, r24	; 0x01
    57b0:	9a 83       	std	Y+2, r25	; 0x02
    57b2:	ab 83       	std	Y+3, r26	; 0x03
    57b4:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    57b6:	89 85       	ldd	r24, Y+9	; 0x09
    57b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    57bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    57be:	2a e0       	ldi	r18, 0x0A	; 10
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	40 e0       	ldi	r20, 0x00	; 0
    57c4:	50 e0       	ldi	r21, 0x00	; 0
    57c6:	bc 01       	movw	r22, r24
    57c8:	cd 01       	movw	r24, r26
    57ca:	0e 94 6d 30 	call	0x60da	; 0x60da <__divmodsi4>
    57ce:	da 01       	movw	r26, r20
    57d0:	c9 01       	movw	r24, r18
    57d2:	89 87       	std	Y+9, r24	; 0x09
    57d4:	9a 87       	std	Y+10, r25	; 0x0a
    57d6:	ab 87       	std	Y+11, r26	; 0x0b
    57d8:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    57da:	89 85       	ldd	r24, Y+9	; 0x09
    57dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    57de:	ab 85       	ldd	r26, Y+11	; 0x0b
    57e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    57e2:	00 97       	sbiw	r24, 0x00	; 0
    57e4:	a1 05       	cpc	r26, r1
    57e6:	b1 05       	cpc	r27, r1
    57e8:	19 f6       	brne	.-122    	; 0x5770 <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    57ea:	8d 81       	ldd	r24, Y+5	; 0x05
    57ec:	9e 81       	ldd	r25, Y+6	; 0x06
    57ee:	af 81       	ldd	r26, Y+7	; 0x07
    57f0:	b8 85       	ldd	r27, Y+8	; 0x08
    57f2:	00 97       	sbiw	r24, 0x00	; 0
    57f4:	a1 05       	cpc	r26, r1
    57f6:	b1 05       	cpc	r27, r1
    57f8:	a1 f0       	breq	.+40     	; 0x5822 <IntToString+0x152>
		str[i--] = '-';
    57fa:	29 81       	ldd	r18, Y+1	; 0x01
    57fc:	3a 81       	ldd	r19, Y+2	; 0x02
    57fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5800:	9e 85       	ldd	r25, Y+14	; 0x0e
    5802:	fc 01       	movw	r30, r24
    5804:	e2 0f       	add	r30, r18
    5806:	f3 1f       	adc	r31, r19
    5808:	8d e2       	ldi	r24, 0x2D	; 45
    580a:	80 83       	st	Z, r24
    580c:	89 81       	ldd	r24, Y+1	; 0x01
    580e:	9a 81       	ldd	r25, Y+2	; 0x02
    5810:	ab 81       	ldd	r26, Y+3	; 0x03
    5812:	bc 81       	ldd	r27, Y+4	; 0x04
    5814:	01 97       	sbiw	r24, 0x01	; 1
    5816:	a1 09       	sbc	r26, r1
    5818:	b1 09       	sbc	r27, r1
    581a:	89 83       	std	Y+1, r24	; 0x01
    581c:	9a 83       	std	Y+2, r25	; 0x02
    581e:	ab 83       	std	Y+3, r26	; 0x03
    5820:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    5822:	89 81       	ldd	r24, Y+1	; 0x01
    5824:	9a 81       	ldd	r25, Y+2	; 0x02
    5826:	ab 81       	ldd	r26, Y+3	; 0x03
    5828:	bc 81       	ldd	r27, Y+4	; 0x04
    582a:	01 96       	adiw	r24, 0x01	; 1
    582c:	a1 1d       	adc	r26, r1
    582e:	b1 1d       	adc	r27, r1
    5830:	89 83       	std	Y+1, r24	; 0x01
    5832:	9a 83       	std	Y+2, r25	; 0x02
    5834:	ab 83       	std	Y+3, r26	; 0x03
    5836:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    5838:	29 81       	ldd	r18, Y+1	; 0x01
    583a:	3a 81       	ldd	r19, Y+2	; 0x02
    583c:	8d 85       	ldd	r24, Y+13	; 0x0d
    583e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5840:	82 0f       	add	r24, r18
    5842:	93 1f       	adc	r25, r19

}
    5844:	2e 96       	adiw	r28, 0x0e	; 14
    5846:	0f b6       	in	r0, 0x3f	; 63
    5848:	f8 94       	cli
    584a:	de bf       	out	0x3e, r29	; 62
    584c:	0f be       	out	0x3f, r0	; 63
    584e:	cd bf       	out	0x3d, r28	; 61
    5850:	cf 91       	pop	r28
    5852:	df 91       	pop	r29
    5854:	1f 91       	pop	r17
    5856:	0f 91       	pop	r16
    5858:	08 95       	ret

0000585a <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    585a:	df 93       	push	r29
    585c:	cf 93       	push	r28
    585e:	cd b7       	in	r28, 0x3d	; 61
    5860:	de b7       	in	r29, 0x3e	; 62
    5862:	6a 97       	sbiw	r28, 0x1a	; 26
    5864:	0f b6       	in	r0, 0x3f	; 63
    5866:	f8 94       	cli
    5868:	de bf       	out	0x3e, r29	; 62
    586a:	0f be       	out	0x3f, r0	; 63
    586c:	cd bf       	out	0x3d, r28	; 61
    586e:	6f 8b       	std	Y+23, r22	; 0x17
    5870:	78 8f       	std	Y+24, r23	; 0x18
    5872:	89 8f       	std	Y+25, r24	; 0x19
    5874:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    5876:	8f 89       	ldd	r24, Y+23	; 0x17
    5878:	98 8d       	ldd	r25, Y+24	; 0x18
    587a:	a9 8d       	ldd	r26, Y+25	; 0x19
    587c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    587e:	00 97       	sbiw	r24, 0x00	; 0
    5880:	a1 05       	cpc	r26, r1
    5882:	b1 05       	cpc	r27, r1
    5884:	99 f0       	breq	.+38     	; 0x58ac <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    5886:	8f 89       	ldd	r24, Y+23	; 0x17
    5888:	98 8d       	ldd	r25, Y+24	; 0x18
    588a:	a9 8d       	ldd	r26, Y+25	; 0x19
    588c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    588e:	9e 01       	movw	r18, r28
    5890:	2d 5f       	subi	r18, 0xFD	; 253
    5892:	3f 4f       	sbci	r19, 0xFF	; 255
    5894:	bc 01       	movw	r22, r24
    5896:	cd 01       	movw	r24, r26
    5898:	a9 01       	movw	r20, r18
    589a:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <IntToString>
    589e:	9a 83       	std	Y+2, r25	; 0x02
    58a0:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    58a2:	89 81       	ldd	r24, Y+1	; 0x01
    58a4:	9a 81       	ldd	r25, Y+2	; 0x02
    58a6:	0e 94 3f 2b 	call	0x567e	; 0x567e <LCD_voidWriteString>
    58aa:	03 c0       	rjmp	.+6      	; 0x58b2 <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    58ac:	80 e3       	ldi	r24, 0x30	; 48
    58ae:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
	}
}
    58b2:	6a 96       	adiw	r28, 0x1a	; 26
    58b4:	0f b6       	in	r0, 0x3f	; 63
    58b6:	f8 94       	cli
    58b8:	de bf       	out	0x3e, r29	; 62
    58ba:	0f be       	out	0x3f, r0	; 63
    58bc:	cd bf       	out	0x3d, r28	; 61
    58be:	cf 91       	pop	r28
    58c0:	df 91       	pop	r29
    58c2:	08 95       	ret

000058c4 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    58c4:	df 93       	push	r29
    58c6:	cf 93       	push	r28
    58c8:	cd b7       	in	r28, 0x3d	; 61
    58ca:	de b7       	in	r29, 0x3e	; 62
    58cc:	a6 97       	sbiw	r28, 0x26	; 38
    58ce:	0f b6       	in	r0, 0x3f	; 63
    58d0:	f8 94       	cli
    58d2:	de bf       	out	0x3e, r29	; 62
    58d4:	0f be       	out	0x3f, r0	; 63
    58d6:	cd bf       	out	0x3d, r28	; 61
    58d8:	6b a3       	std	Y+35, r22	; 0x23
    58da:	7c a3       	std	Y+36, r23	; 0x24
    58dc:	8d a3       	std	Y+37, r24	; 0x25
    58de:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    58e0:	6b a1       	ldd	r22, Y+35	; 0x23
    58e2:	7c a1       	ldd	r23, Y+36	; 0x24
    58e4:	8d a1       	ldd	r24, Y+37	; 0x25
    58e6:	9e a1       	ldd	r25, Y+38	; 0x26
    58e8:	20 e0       	ldi	r18, 0x00	; 0
    58ea:	30 e0       	ldi	r19, 0x00	; 0
    58ec:	48 ec       	ldi	r20, 0xC8	; 200
    58ee:	52 e4       	ldi	r21, 0x42	; 66
    58f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58f4:	dc 01       	movw	r26, r24
    58f6:	cb 01       	movw	r24, r22
    58f8:	bc 01       	movw	r22, r24
    58fa:	cd 01       	movw	r24, r26
    58fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    5900:	dc 01       	movw	r26, r24
    5902:	cb 01       	movw	r24, r22
    5904:	8b 87       	std	Y+11, r24	; 0x0b
    5906:	9c 87       	std	Y+12, r25	; 0x0c
    5908:	ad 87       	std	Y+13, r26	; 0x0d
    590a:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    590c:	8b 85       	ldd	r24, Y+11	; 0x0b
    590e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5910:	ad 85       	ldd	r26, Y+13	; 0x0d
    5912:	be 85       	ldd	r27, Y+14	; 0x0e
    5914:	9e 01       	movw	r18, r28
    5916:	21 5f       	subi	r18, 0xF1	; 241
    5918:	3f 4f       	sbci	r19, 0xFF	; 255
    591a:	bc 01       	movw	r22, r24
    591c:	cd 01       	movw	r24, r26
    591e:	a9 01       	movw	r20, r18
    5920:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <IntToString>
    5924:	9a 87       	std	Y+10, r25	; 0x0a
    5926:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    5928:	1d 82       	std	Y+5, r1	; 0x05
    592a:	1e 82       	std	Y+6, r1	; 0x06
    592c:	1f 82       	std	Y+7, r1	; 0x07
    592e:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    5930:	19 82       	std	Y+1, r1	; 0x01
    5932:	1a 82       	std	Y+2, r1	; 0x02
    5934:	1b 82       	std	Y+3, r1	; 0x03
    5936:	1c 82       	std	Y+4, r1	; 0x04
    5938:	0b c0       	rjmp	.+22     	; 0x5950 <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    593a:	8d 81       	ldd	r24, Y+5	; 0x05
    593c:	9e 81       	ldd	r25, Y+6	; 0x06
    593e:	af 81       	ldd	r26, Y+7	; 0x07
    5940:	b8 85       	ldd	r27, Y+8	; 0x08
    5942:	01 96       	adiw	r24, 0x01	; 1
    5944:	a1 1d       	adc	r26, r1
    5946:	b1 1d       	adc	r27, r1
    5948:	8d 83       	std	Y+5, r24	; 0x05
    594a:	9e 83       	std	Y+6, r25	; 0x06
    594c:	af 83       	std	Y+7, r26	; 0x07
    594e:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    5950:	2d 81       	ldd	r18, Y+5	; 0x05
    5952:	3e 81       	ldd	r19, Y+6	; 0x06
    5954:	89 85       	ldd	r24, Y+9	; 0x09
    5956:	9a 85       	ldd	r25, Y+10	; 0x0a
    5958:	fc 01       	movw	r30, r24
    595a:	e2 0f       	add	r30, r18
    595c:	f3 1f       	adc	r31, r19
    595e:	80 81       	ld	r24, Z
    5960:	88 23       	and	r24, r24
    5962:	59 f7       	brne	.-42     	; 0x593a <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    5964:	8d 81       	ldd	r24, Y+5	; 0x05
    5966:	9e 81       	ldd	r25, Y+6	; 0x06
    5968:	af 81       	ldd	r26, Y+7	; 0x07
    596a:	b8 85       	ldd	r27, Y+8	; 0x08
    596c:	02 97       	sbiw	r24, 0x02	; 2
    596e:	a1 09       	sbc	r26, r1
    5970:	b1 09       	sbc	r27, r1
    5972:	8d 83       	std	Y+5, r24	; 0x05
    5974:	9e 83       	std	Y+6, r25	; 0x06
    5976:	af 83       	std	Y+7, r26	; 0x07
    5978:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    597a:	8d 81       	ldd	r24, Y+5	; 0x05
    597c:	9e 81       	ldd	r25, Y+6	; 0x06
    597e:	af 81       	ldd	r26, Y+7	; 0x07
    5980:	b8 85       	ldd	r27, Y+8	; 0x08
    5982:	00 97       	sbiw	r24, 0x00	; 0
    5984:	a1 05       	cpc	r26, r1
    5986:	b1 05       	cpc	r27, r1
    5988:	49 f5       	brne	.+82     	; 0x59dc <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    598a:	80 e3       	ldi	r24, 0x30	; 48
    598c:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
    5990:	25 c0       	rjmp	.+74     	; 0x59dc <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    5992:	29 81       	ldd	r18, Y+1	; 0x01
    5994:	3a 81       	ldd	r19, Y+2	; 0x02
    5996:	4b 81       	ldd	r20, Y+3	; 0x03
    5998:	5c 81       	ldd	r21, Y+4	; 0x04
    599a:	8d 81       	ldd	r24, Y+5	; 0x05
    599c:	9e 81       	ldd	r25, Y+6	; 0x06
    599e:	af 81       	ldd	r26, Y+7	; 0x07
    59a0:	b8 85       	ldd	r27, Y+8	; 0x08
    59a2:	28 17       	cp	r18, r24
    59a4:	39 07       	cpc	r19, r25
    59a6:	4a 07       	cpc	r20, r26
    59a8:	5b 07       	cpc	r21, r27
    59aa:	19 f4       	brne	.+6      	; 0x59b2 <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    59ac:	8e e2       	ldi	r24, 0x2E	; 46
    59ae:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    59b2:	29 81       	ldd	r18, Y+1	; 0x01
    59b4:	3a 81       	ldd	r19, Y+2	; 0x02
    59b6:	89 85       	ldd	r24, Y+9	; 0x09
    59b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    59ba:	fc 01       	movw	r30, r24
    59bc:	e2 0f       	add	r30, r18
    59be:	f3 1f       	adc	r31, r19
    59c0:	80 81       	ld	r24, Z
    59c2:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		counter2++;
    59c6:	89 81       	ldd	r24, Y+1	; 0x01
    59c8:	9a 81       	ldd	r25, Y+2	; 0x02
    59ca:	ab 81       	ldd	r26, Y+3	; 0x03
    59cc:	bc 81       	ldd	r27, Y+4	; 0x04
    59ce:	01 96       	adiw	r24, 0x01	; 1
    59d0:	a1 1d       	adc	r26, r1
    59d2:	b1 1d       	adc	r27, r1
    59d4:	89 83       	std	Y+1, r24	; 0x01
    59d6:	9a 83       	std	Y+2, r25	; 0x02
    59d8:	ab 83       	std	Y+3, r26	; 0x03
    59da:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    59dc:	29 81       	ldd	r18, Y+1	; 0x01
    59de:	3a 81       	ldd	r19, Y+2	; 0x02
    59e0:	89 85       	ldd	r24, Y+9	; 0x09
    59e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59e4:	fc 01       	movw	r30, r24
    59e6:	e2 0f       	add	r30, r18
    59e8:	f3 1f       	adc	r31, r19
    59ea:	80 81       	ld	r24, Z
    59ec:	88 23       	and	r24, r24
    59ee:	89 f6       	brne	.-94     	; 0x5992 <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    59f0:	a6 96       	adiw	r28, 0x26	; 38
    59f2:	0f b6       	in	r0, 0x3f	; 63
    59f4:	f8 94       	cli
    59f6:	de bf       	out	0x3e, r29	; 62
    59f8:	0f be       	out	0x3f, r0	; 63
    59fa:	cd bf       	out	0x3d, r28	; 61
    59fc:	cf 91       	pop	r28
    59fe:	df 91       	pop	r29
    5a00:	08 95       	ret

00005a02 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    5a02:	df 93       	push	r29
    5a04:	cf 93       	push	r28
    5a06:	00 d0       	rcall	.+0      	; 0x5a08 <LCD_voidGoToPosition+0x6>
    5a08:	0f 92       	push	r0
    5a0a:	cd b7       	in	r28, 0x3d	; 61
    5a0c:	de b7       	in	r29, 0x3e	; 62
    5a0e:	8a 83       	std	Y+2, r24	; 0x02
    5a10:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    5a12:	80 e8       	ldi	r24, 0x80	; 128
    5a14:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    5a16:	8a 81       	ldd	r24, Y+2	; 0x02
    5a18:	88 23       	and	r24, r24
    5a1a:	21 f4       	brne	.+8      	; 0x5a24 <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    5a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a1e:	80 58       	subi	r24, 0x80	; 128
    5a20:	89 83       	std	Y+1, r24	; 0x01
    5a22:	14 c0       	rjmp	.+40     	; 0x5a4c <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    5a24:	8a 81       	ldd	r24, Y+2	; 0x02
    5a26:	81 30       	cpi	r24, 0x01	; 1
    5a28:	21 f4       	brne	.+8      	; 0x5a32 <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    5a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    5a2c:	80 54       	subi	r24, 0x40	; 64
    5a2e:	89 83       	std	Y+1, r24	; 0x01
    5a30:	0d c0       	rjmp	.+26     	; 0x5a4c <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    5a32:	8a 81       	ldd	r24, Y+2	; 0x02
    5a34:	82 30       	cpi	r24, 0x02	; 2
    5a36:	21 f4       	brne	.+8      	; 0x5a40 <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    5a38:	8b 81       	ldd	r24, Y+3	; 0x03
    5a3a:	8c 56       	subi	r24, 0x6C	; 108
    5a3c:	89 83       	std	Y+1, r24	; 0x01
    5a3e:	06 c0       	rjmp	.+12     	; 0x5a4c <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    5a40:	8a 81       	ldd	r24, Y+2	; 0x02
    5a42:	83 30       	cpi	r24, 0x03	; 3
    5a44:	19 f4       	brne	.+6      	; 0x5a4c <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    5a46:	8b 81       	ldd	r24, Y+3	; 0x03
    5a48:	8c 52       	subi	r24, 0x2C	; 44
    5a4a:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    5a4c:	89 81       	ldd	r24, Y+1	; 0x01
    5a4e:	80 68       	ori	r24, 0x80	; 128
    5a50:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    5a52:	89 81       	ldd	r24, Y+1	; 0x01
    5a54:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_voidSendCommand>
}
    5a58:	0f 90       	pop	r0
    5a5a:	0f 90       	pop	r0
    5a5c:	0f 90       	pop	r0
    5a5e:	cf 91       	pop	r28
    5a60:	df 91       	pop	r29
    5a62:	08 95       	ret

00005a64 <LCD_voidClearPosition>:

void LCD_voidClearPosition(u8 X_Position, u8 Y_Position){
    5a64:	df 93       	push	r29
    5a66:	cf 93       	push	r28
    5a68:	00 d0       	rcall	.+0      	; 0x5a6a <LCD_voidClearPosition+0x6>
    5a6a:	cd b7       	in	r28, 0x3d	; 61
    5a6c:	de b7       	in	r29, 0x3e	; 62
    5a6e:	89 83       	std	Y+1, r24	; 0x01
    5a70:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position, Y_Position);
    5a72:	89 81       	ldd	r24, Y+1	; 0x01
    5a74:	6a 81       	ldd	r22, Y+2	; 0x02
    5a76:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    5a7a:	80 e2       	ldi	r24, 0x20	; 32
    5a7c:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
}
    5a80:	0f 90       	pop	r0
    5a82:	0f 90       	pop	r0
    5a84:	cf 91       	pop	r28
    5a86:	df 91       	pop	r29
    5a88:	08 95       	ret

00005a8a <LCD_voidClearLine>:

void LCD_voidClearLine(u8 X_Position){
    5a8a:	df 93       	push	r29
    5a8c:	cf 93       	push	r28
    5a8e:	00 d0       	rcall	.+0      	; 0x5a90 <LCD_voidClearLine+0x6>
    5a90:	cd b7       	in	r28, 0x3d	; 61
    5a92:	de b7       	in	r29, 0x3e	; 62
    5a94:	8a 83       	std	Y+2, r24	; 0x02
	u8 Y_Position = 0;
    5a96:	19 82       	std	Y+1, r1	; 0x01
    5a98:	07 c0       	rjmp	.+14     	; 0x5aa8 <LCD_voidClearLine+0x1e>
	while(Y_Position <20){
		LCD_voidClearPosition(X_Position,Y_Position);
    5a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a9c:	69 81       	ldd	r22, Y+1	; 0x01
    5a9e:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <LCD_voidClearPosition>
		Y_Position++;
    5aa2:	89 81       	ldd	r24, Y+1	; 0x01
    5aa4:	8f 5f       	subi	r24, 0xFF	; 255
    5aa6:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteChar(' ');
}

void LCD_voidClearLine(u8 X_Position){
	u8 Y_Position = 0;
	while(Y_Position <20){
    5aa8:	89 81       	ldd	r24, Y+1	; 0x01
    5aaa:	84 31       	cpi	r24, 0x14	; 20
    5aac:	b0 f3       	brcs	.-20     	; 0x5a9a <LCD_voidClearLine+0x10>
		LCD_voidClearPosition(X_Position,Y_Position);
		Y_Position++;
	}
}
    5aae:	0f 90       	pop	r0
    5ab0:	0f 90       	pop	r0
    5ab2:	cf 91       	pop	r28
    5ab4:	df 91       	pop	r29
    5ab6:	08 95       	ret

00005ab8 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    5ab8:	df 93       	push	r29
    5aba:	cf 93       	push	r28
    5abc:	cd b7       	in	r28, 0x3d	; 61
    5abe:	de b7       	in	r29, 0x3e	; 62
    5ac0:	27 97       	sbiw	r28, 0x07	; 7
    5ac2:	0f b6       	in	r0, 0x3f	; 63
    5ac4:	f8 94       	cli
    5ac6:	de bf       	out	0x3e, r29	; 62
    5ac8:	0f be       	out	0x3f, r0	; 63
    5aca:	cd bf       	out	0x3d, r28	; 61
    5acc:	9c 83       	std	Y+4, r25	; 0x04
    5ace:	8b 83       	std	Y+3, r24	; 0x03
    5ad0:	6d 83       	std	Y+5, r22	; 0x05
    5ad2:	4e 83       	std	Y+6, r20	; 0x06
    5ad4:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    5ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    5ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    5ada:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    5ade:	8d 81       	ldd	r24, Y+5	; 0x05
    5ae0:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
	u8 address = 0;
    5ae4:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    5ae6:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    5ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    5aea:	88 30       	cpi	r24, 0x08	; 8
    5aec:	30 f5       	brcc	.+76     	; 0x5b3a <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    5aee:	8d 81       	ldd	r24, Y+5	; 0x05
    5af0:	88 2f       	mov	r24, r24
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	88 0f       	add	r24, r24
    5af6:	99 1f       	adc	r25, r25
    5af8:	88 0f       	add	r24, r24
    5afa:	99 1f       	adc	r25, r25
    5afc:	88 0f       	add	r24, r24
    5afe:	99 1f       	adc	r25, r25
    5b00:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    5b02:	8a 81       	ldd	r24, Y+2	; 0x02
    5b04:	80 64       	ori	r24, 0x40	; 64
    5b06:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    5b08:	8a 81       	ldd	r24, Y+2	; 0x02
    5b0a:	8f 77       	andi	r24, 0x7F	; 127
    5b0c:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    5b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b10:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    5b14:	19 82       	std	Y+1, r1	; 0x01
    5b16:	0e c0       	rjmp	.+28     	; 0x5b34 <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    5b18:	89 81       	ldd	r24, Y+1	; 0x01
    5b1a:	28 2f       	mov	r18, r24
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b20:	9c 81       	ldd	r25, Y+4	; 0x04
    5b22:	fc 01       	movw	r30, r24
    5b24:	e2 0f       	add	r30, r18
    5b26:	f3 1f       	adc	r31, r19
    5b28:	80 81       	ld	r24, Z
    5b2a:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    5b2e:	89 81       	ldd	r24, Y+1	; 0x01
    5b30:	8f 5f       	subi	r24, 0xFF	; 255
    5b32:	89 83       	std	Y+1, r24	; 0x01
    5b34:	89 81       	ldd	r24, Y+1	; 0x01
    5b36:	88 30       	cpi	r24, 0x08	; 8
    5b38:	78 f3       	brcs	.-34     	; 0x5b18 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    5b3a:	82 e0       	ldi	r24, 0x02	; 2
    5b3c:	0e 94 9f 28 	call	0x513e	; 0x513e <LCD_voidSendCommand>
}
    5b40:	27 96       	adiw	r28, 0x07	; 7
    5b42:	0f b6       	in	r0, 0x3f	; 63
    5b44:	f8 94       	cli
    5b46:	de bf       	out	0x3e, r29	; 62
    5b48:	0f be       	out	0x3f, r0	; 63
    5b4a:	cd bf       	out	0x3d, r28	; 61
    5b4c:	cf 91       	pop	r28
    5b4e:	df 91       	pop	r29
    5b50:	08 95       	ret

00005b52 <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    5b52:	df 93       	push	r29
    5b54:	cf 93       	push	r28
    5b56:	cd b7       	in	r28, 0x3d	; 61
    5b58:	de b7       	in	r29, 0x3e	; 62
    5b5a:	a1 97       	sbiw	r28, 0x21	; 33
    5b5c:	0f b6       	in	r0, 0x3f	; 63
    5b5e:	f8 94       	cli
    5b60:	de bf       	out	0x3e, r29	; 62
    5b62:	0f be       	out	0x3f, r0	; 63
    5b64:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    5b66:	8f ef       	ldi	r24, 0xFF	; 255
    5b68:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    5b6a:	ce 01       	movw	r24, r28
    5b6c:	04 96       	adiw	r24, 0x04	; 4
    5b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    5b70:	8d 8f       	std	Y+29, r24	; 0x1d
    5b72:	e8 ed       	ldi	r30, 0xD8	; 216
    5b74:	f1 e0       	ldi	r31, 0x01	; 1
    5b76:	f8 a3       	std	Y+32, r31	; 0x20
    5b78:	ef 8f       	std	Y+31, r30	; 0x1f
    5b7a:	f0 e1       	ldi	r31, 0x10	; 16
    5b7c:	f9 a3       	std	Y+33, r31	; 0x21
    5b7e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    5b80:	f8 a1       	ldd	r31, Y+32	; 0x20
    5b82:	00 80       	ld	r0, Z
    5b84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5b86:	98 a1       	ldd	r25, Y+32	; 0x20
    5b88:	01 96       	adiw	r24, 0x01	; 1
    5b8a:	98 a3       	std	Y+32, r25	; 0x20
    5b8c:	8f 8f       	std	Y+31, r24	; 0x1f
    5b8e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    5b90:	fe 8d       	ldd	r31, Y+30	; 0x1e
    5b92:	00 82       	st	Z, r0
    5b94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b96:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b98:	01 96       	adiw	r24, 0x01	; 1
    5b9a:	9e 8f       	std	Y+30, r25	; 0x1e
    5b9c:	8d 8f       	std	Y+29, r24	; 0x1d
    5b9e:	99 a1       	ldd	r25, Y+33	; 0x21
    5ba0:	91 50       	subi	r25, 0x01	; 1
    5ba2:	99 a3       	std	Y+33, r25	; 0x21
    5ba4:	e9 a1       	ldd	r30, Y+33	; 0x21
    5ba6:	ee 23       	and	r30, r30
    5ba8:	51 f7       	brne	.-44     	; 0x5b7e <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    5baa:	87 e0       	ldi	r24, 0x07	; 7
    5bac:	8c 8b       	std	Y+20, r24	; 0x14
    5bae:	86 e0       	ldi	r24, 0x06	; 6
    5bb0:	8d 8b       	std	Y+21, r24	; 0x15
    5bb2:	85 e0       	ldi	r24, 0x05	; 5
    5bb4:	8e 8b       	std	Y+22, r24	; 0x16
    5bb6:	83 e0       	ldi	r24, 0x03	; 3
    5bb8:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    5bba:	85 e0       	ldi	r24, 0x05	; 5
    5bbc:	88 8f       	std	Y+24, r24	; 0x18
    5bbe:	84 e0       	ldi	r24, 0x04	; 4
    5bc0:	89 8f       	std	Y+25, r24	; 0x19
    5bc2:	83 e0       	ldi	r24, 0x03	; 3
    5bc4:	8a 8f       	std	Y+26, r24	; 0x1a
    5bc6:	82 e0       	ldi	r24, 0x02	; 2
    5bc8:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    5bca:	1a 82       	std	Y+2, r1	; 0x02
    5bcc:	6b c0       	rjmp	.+214    	; 0x5ca4 <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    5bce:	8a 81       	ldd	r24, Y+2	; 0x02
    5bd0:	28 2f       	mov	r18, r24
    5bd2:	30 e0       	ldi	r19, 0x00	; 0
    5bd4:	ce 01       	movw	r24, r28
    5bd6:	44 96       	adiw	r24, 0x14	; 20
    5bd8:	fc 01       	movw	r30, r24
    5bda:	e2 0f       	add	r30, r18
    5bdc:	f3 1f       	adc	r31, r19
    5bde:	90 81       	ld	r25, Z
    5be0:	84 e0       	ldi	r24, 0x04	; 4
    5be2:	69 2f       	mov	r22, r25
    5be4:	40 e0       	ldi	r20, 0x00	; 0
    5be6:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    5bea:	19 82       	std	Y+1, r1	; 0x01
    5bec:	46 c0       	rjmp	.+140    	; 0x5c7a <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    5bee:	89 81       	ldd	r24, Y+1	; 0x01
    5bf0:	28 2f       	mov	r18, r24
    5bf2:	30 e0       	ldi	r19, 0x00	; 0
    5bf4:	ce 01       	movw	r24, r28
    5bf6:	48 96       	adiw	r24, 0x18	; 24
    5bf8:	fc 01       	movw	r30, r24
    5bfa:	e2 0f       	add	r30, r18
    5bfc:	f3 1f       	adc	r31, r19
    5bfe:	90 81       	ld	r25, Z
    5c00:	83 e0       	ldi	r24, 0x03	; 3
    5c02:	69 2f       	mov	r22, r25
    5c04:	0e 94 1b 13 	call	0x2636	; 0x2636 <DIO_u8GetPinValue>
    5c08:	88 23       	and	r24, r24
    5c0a:	a1 f5       	brne	.+104    	; 0x5c74 <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    5c0c:	89 81       	ldd	r24, Y+1	; 0x01
    5c0e:	28 2f       	mov	r18, r24
    5c10:	30 e0       	ldi	r19, 0x00	; 0
    5c12:	8a 81       	ldd	r24, Y+2	; 0x02
    5c14:	48 2f       	mov	r20, r24
    5c16:	50 e0       	ldi	r21, 0x00	; 0
    5c18:	22 0f       	add	r18, r18
    5c1a:	33 1f       	adc	r19, r19
    5c1c:	22 0f       	add	r18, r18
    5c1e:	33 1f       	adc	r19, r19
    5c20:	ce 01       	movw	r24, r28
    5c22:	01 96       	adiw	r24, 0x01	; 1
    5c24:	82 0f       	add	r24, r18
    5c26:	93 1f       	adc	r25, r19
    5c28:	84 0f       	add	r24, r20
    5c2a:	95 1f       	adc	r25, r21
    5c2c:	fc 01       	movw	r30, r24
    5c2e:	33 96       	adiw	r30, 0x03	; 3
    5c30:	80 81       	ld	r24, Z
    5c32:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    5c34:	89 81       	ldd	r24, Y+1	; 0x01
    5c36:	28 2f       	mov	r18, r24
    5c38:	30 e0       	ldi	r19, 0x00	; 0
    5c3a:	ce 01       	movw	r24, r28
    5c3c:	48 96       	adiw	r24, 0x18	; 24
    5c3e:	fc 01       	movw	r30, r24
    5c40:	e2 0f       	add	r30, r18
    5c42:	f3 1f       	adc	r31, r19
    5c44:	90 81       	ld	r25, Z
    5c46:	83 e0       	ldi	r24, 0x03	; 3
    5c48:	69 2f       	mov	r22, r25
    5c4a:	0e 94 1b 13 	call	0x2636	; 0x2636 <DIO_u8GetPinValue>
    5c4e:	88 23       	and	r24, r24
    5c50:	89 f3       	breq	.-30     	; 0x5c34 <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    5c52:	8a 81       	ldd	r24, Y+2	; 0x02
    5c54:	28 2f       	mov	r18, r24
    5c56:	30 e0       	ldi	r19, 0x00	; 0
    5c58:	ce 01       	movw	r24, r28
    5c5a:	44 96       	adiw	r24, 0x14	; 20
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	e2 0f       	add	r30, r18
    5c60:	f3 1f       	adc	r31, r19
    5c62:	90 81       	ld	r25, Z
    5c64:	84 e0       	ldi	r24, 0x04	; 4
    5c66:	69 2f       	mov	r22, r25
    5c68:	41 e0       	ldi	r20, 0x01	; 1
    5c6a:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    5c6e:	fb 81       	ldd	r31, Y+3	; 0x03
    5c70:	fc 8f       	std	Y+28, r31	; 0x1c
    5c72:	1e c0       	rjmp	.+60     	; 0x5cb0 <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    5c74:	89 81       	ldd	r24, Y+1	; 0x01
    5c76:	8f 5f       	subi	r24, 0xFF	; 255
    5c78:	89 83       	std	Y+1, r24	; 0x01
    5c7a:	89 81       	ldd	r24, Y+1	; 0x01
    5c7c:	84 30       	cpi	r24, 0x04	; 4
    5c7e:	08 f4       	brcc	.+2      	; 0x5c82 <KPD_u8GetPressedKey+0x130>
    5c80:	b6 cf       	rjmp	.-148    	; 0x5bee <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    5c82:	8a 81       	ldd	r24, Y+2	; 0x02
    5c84:	28 2f       	mov	r18, r24
    5c86:	30 e0       	ldi	r19, 0x00	; 0
    5c88:	ce 01       	movw	r24, r28
    5c8a:	44 96       	adiw	r24, 0x14	; 20
    5c8c:	fc 01       	movw	r30, r24
    5c8e:	e2 0f       	add	r30, r18
    5c90:	f3 1f       	adc	r31, r19
    5c92:	90 81       	ld	r25, Z
    5c94:	84 e0       	ldi	r24, 0x04	; 4
    5c96:	69 2f       	mov	r22, r25
    5c98:	41 e0       	ldi	r20, 0x01	; 1
    5c9a:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    5c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5ca0:	8f 5f       	subi	r24, 0xFF	; 255
    5ca2:	8a 83       	std	Y+2, r24	; 0x02
    5ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ca6:	84 30       	cpi	r24, 0x04	; 4
    5ca8:	08 f4       	brcc	.+2      	; 0x5cac <KPD_u8GetPressedKey+0x15a>
    5caa:	91 cf       	rjmp	.-222    	; 0x5bce <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    5cac:	8b 81       	ldd	r24, Y+3	; 0x03
    5cae:	8c 8f       	std	Y+28, r24	; 0x1c
    5cb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    5cb2:	a1 96       	adiw	r28, 0x21	; 33
    5cb4:	0f b6       	in	r0, 0x3f	; 63
    5cb6:	f8 94       	cli
    5cb8:	de bf       	out	0x3e, r29	; 62
    5cba:	0f be       	out	0x3f, r0	; 63
    5cbc:	cd bf       	out	0x3d, r28	; 61
    5cbe:	cf 91       	pop	r28
    5cc0:	df 91       	pop	r29
    5cc2:	08 95       	ret

00005cc4 <main>:
void RTC_Calendar_Write(u8 _day, u8 _date, u8 _month, u8 _year);
void RTC_Read_Clock();
void RTC_Read_Calendar();
u8 ConvertToRTC(u8 num);
u8 ConvertFromRTC(u8 num);
int main(){
    5cc4:	df 93       	push	r29
    5cc6:	cf 93       	push	r28
    5cc8:	cd b7       	in	r28, 0x3d	; 61
    5cca:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    5ccc:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <DIO_voidInit>
	DIO_voidSetPinValue(DIO_PortC,DIO_PIN0, High);
    5cd0:	83 e0       	ldi	r24, 0x03	; 3
    5cd2:	60 e0       	ldi	r22, 0x00	; 0
    5cd4:	41 e0       	ldi	r20, 0x01	; 1
    5cd6:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PortC,DIO_PIN1, High);
    5cda:	83 e0       	ldi	r24, 0x03	; 3
    5cdc:	61 e0       	ldi	r22, 0x01	; 1
    5cde:	41 e0       	ldi	r20, 0x01	; 1
    5ce0:	0e 94 0d 12 	call	0x241a	; 0x241a <DIO_voidSetPinValue>
	LCD_voidInit();
    5ce4:	0e 94 9f 22 	call	0x453e	; 0x453e <LCD_voidInit>
	I2C_Master_voidInit();
    5ce8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <I2C_Master_voidInit>

	minute =ConvertToRTC(minute);
    5cec:	80 91 92 01 	lds	r24, 0x0192
    5cf0:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <ConvertToRTC>
    5cf4:	80 93 92 01 	sts	0x0192, r24
	second = ConvertToRTC(second);
    5cf8:	80 91 00 02 	lds	r24, 0x0200
    5cfc:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <ConvertToRTC>
    5d00:	80 93 00 02 	sts	0x0200, r24
	hour = ConvertToRTC(hour);
    5d04:	80 91 93 01 	lds	r24, 0x0193
    5d08:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <ConvertToRTC>
    5d0c:	80 93 93 01 	sts	0x0193, r24

	RTC_Clock_Write(hour, minute, second);
    5d10:	80 91 93 01 	lds	r24, 0x0193
    5d14:	90 91 92 01 	lds	r25, 0x0192
    5d18:	20 91 00 02 	lds	r18, 0x0200
    5d1c:	69 2f       	mov	r22, r25
    5d1e:	42 2f       	mov	r20, r18
    5d20:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <RTC_Clock_Write>

	date = ConvertToRTC(date);
    5d24:	80 91 95 01 	lds	r24, 0x0195
    5d28:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <ConvertToRTC>
    5d2c:	80 93 95 01 	sts	0x0195, r24
	month = ConvertToRTC(month);
    5d30:	80 91 96 01 	lds	r24, 0x0196
    5d34:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <ConvertToRTC>
    5d38:	80 93 96 01 	sts	0x0196, r24
	year = ConvertToRTC(year);
    5d3c:	80 91 97 01 	lds	r24, 0x0197
    5d40:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <ConvertToRTC>
    5d44:	80 93 97 01 	sts	0x0197, r24

	RTC_Calendar_Write(day, date, month, year);
    5d48:	80 91 94 01 	lds	r24, 0x0194
    5d4c:	90 91 95 01 	lds	r25, 0x0195
    5d50:	20 91 96 01 	lds	r18, 0x0196
    5d54:	30 91 97 01 	lds	r19, 0x0197
    5d58:	69 2f       	mov	r22, r25
    5d5a:	42 2f       	mov	r20, r18
    5d5c:	23 2f       	mov	r18, r19
    5d5e:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <RTC_Calendar_Write>

	while(1){
		RTC_Read_Clock();	/* Read clock with second add. i.e location is 0 */
    5d62:	0e 94 ad 2f 	call	0x5f5a	; 0x5f5a <RTC_Read_Clock>
		second = ConvertFromRTC(second);
    5d66:	80 91 00 02 	lds	r24, 0x0200
    5d6a:	0e 94 18 30 	call	0x6030	; 0x6030 <ConvertFromRTC>
    5d6e:	80 93 00 02 	sts	0x0200, r24
		minute = ConvertFromRTC(minute);
    5d72:	80 91 92 01 	lds	r24, 0x0192
    5d76:	0e 94 18 30 	call	0x6030	; 0x6030 <ConvertFromRTC>
    5d7a:	80 93 92 01 	sts	0x0192, r24
		hour = ConvertFromRTC(hour);
    5d7e:	80 91 93 01 	lds	r24, 0x0193
    5d82:	0e 94 18 30 	call	0x6030	; 0x6030 <ConvertFromRTC>
    5d86:	80 93 93 01 	sts	0x0193, r24

		LCD_voidGoToPosition(0,0);
    5d8a:	80 e0       	ldi	r24, 0x00	; 0
    5d8c:	60 e0       	ldi	r22, 0x00	; 0
    5d8e:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <LCD_voidGoToPosition>
		if(hour < 10){
    5d92:	80 91 93 01 	lds	r24, 0x0193
    5d96:	8a 30       	cpi	r24, 0x0A	; 10
    5d98:	18 f4       	brcc	.+6      	; 0x5da0 <main+0xdc>
			LCD_voidWriteChar('0');
    5d9a:	80 e3       	ldi	r24, 0x30	; 48
    5d9c:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		}
		LCD_voidWriteIntData(hour);
    5da0:	80 91 93 01 	lds	r24, 0x0193
    5da4:	88 2f       	mov	r24, r24
    5da6:	90 e0       	ldi	r25, 0x00	; 0
    5da8:	a0 e0       	ldi	r26, 0x00	; 0
    5daa:	b0 e0       	ldi	r27, 0x00	; 0
    5dac:	bc 01       	movw	r22, r24
    5dae:	cd 01       	movw	r24, r26
    5db0:	0e 94 2d 2c 	call	0x585a	; 0x585a <LCD_voidWriteIntData>
		LCD_voidWriteChar(':');
    5db4:	8a e3       	ldi	r24, 0x3A	; 58
    5db6:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		if(minute < 10){
    5dba:	80 91 92 01 	lds	r24, 0x0192
    5dbe:	8a 30       	cpi	r24, 0x0A	; 10
    5dc0:	18 f4       	brcc	.+6      	; 0x5dc8 <main+0x104>
			LCD_voidWriteChar('0');
    5dc2:	80 e3       	ldi	r24, 0x30	; 48
    5dc4:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		}
		LCD_voidWriteIntData(minute);
    5dc8:	80 91 92 01 	lds	r24, 0x0192
    5dcc:	88 2f       	mov	r24, r24
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	a0 e0       	ldi	r26, 0x00	; 0
    5dd2:	b0 e0       	ldi	r27, 0x00	; 0
    5dd4:	bc 01       	movw	r22, r24
    5dd6:	cd 01       	movw	r24, r26
    5dd8:	0e 94 2d 2c 	call	0x585a	; 0x585a <LCD_voidWriteIntData>
		LCD_voidWriteChar(':');
    5ddc:	8a e3       	ldi	r24, 0x3A	; 58
    5dde:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		if(second < 10){
    5de2:	80 91 00 02 	lds	r24, 0x0200
    5de6:	8a 30       	cpi	r24, 0x0A	; 10
    5de8:	18 f4       	brcc	.+6      	; 0x5df0 <main+0x12c>
			LCD_voidWriteChar('0');
    5dea:	80 e3       	ldi	r24, 0x30	; 48
    5dec:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		}
		LCD_voidWriteIntData(second);
    5df0:	80 91 00 02 	lds	r24, 0x0200
    5df4:	88 2f       	mov	r24, r24
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	a0 e0       	ldi	r26, 0x00	; 0
    5dfa:	b0 e0       	ldi	r27, 0x00	; 0
    5dfc:	bc 01       	movw	r22, r24
    5dfe:	cd 01       	movw	r24, r26
    5e00:	0e 94 2d 2c 	call	0x585a	; 0x585a <LCD_voidWriteIntData>

		RTC_Read_Calendar();	/* Read calendar with day address i.e location is 3 */
    5e04:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <RTC_Read_Calendar>
		date = ConvertFromRTC(date);
    5e08:	80 91 95 01 	lds	r24, 0x0195
    5e0c:	0e 94 18 30 	call	0x6030	; 0x6030 <ConvertFromRTC>
    5e10:	80 93 95 01 	sts	0x0195, r24
		month = ConvertFromRTC(month);
    5e14:	80 91 96 01 	lds	r24, 0x0196
    5e18:	0e 94 18 30 	call	0x6030	; 0x6030 <ConvertFromRTC>
    5e1c:	80 93 96 01 	sts	0x0196, r24
		year = ConvertFromRTC(year);
    5e20:	80 91 97 01 	lds	r24, 0x0197
    5e24:	0e 94 18 30 	call	0x6030	; 0x6030 <ConvertFromRTC>
    5e28:	80 93 97 01 	sts	0x0197, r24

		LCD_voidGoToPosition(1,0);
    5e2c:	81 e0       	ldi	r24, 0x01	; 1
    5e2e:	60 e0       	ldi	r22, 0x00	; 0
    5e30:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <LCD_voidGoToPosition>
		if(date < 10){
    5e34:	80 91 95 01 	lds	r24, 0x0195
    5e38:	8a 30       	cpi	r24, 0x0A	; 10
    5e3a:	18 f4       	brcc	.+6      	; 0x5e42 <main+0x17e>
			LCD_voidWriteChar('0');
    5e3c:	80 e3       	ldi	r24, 0x30	; 48
    5e3e:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		}
		LCD_voidWriteIntData(date);
    5e42:	80 91 95 01 	lds	r24, 0x0195
    5e46:	88 2f       	mov	r24, r24
    5e48:	90 e0       	ldi	r25, 0x00	; 0
    5e4a:	a0 e0       	ldi	r26, 0x00	; 0
    5e4c:	b0 e0       	ldi	r27, 0x00	; 0
    5e4e:	bc 01       	movw	r22, r24
    5e50:	cd 01       	movw	r24, r26
    5e52:	0e 94 2d 2c 	call	0x585a	; 0x585a <LCD_voidWriteIntData>
		LCD_voidWriteChar('/');
    5e56:	8f e2       	ldi	r24, 0x2F	; 47
    5e58:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		if(month < 10){
    5e5c:	80 91 96 01 	lds	r24, 0x0196
    5e60:	8a 30       	cpi	r24, 0x0A	; 10
    5e62:	18 f4       	brcc	.+6      	; 0x5e6a <main+0x1a6>
			LCD_voidWriteChar('0');
    5e64:	80 e3       	ldi	r24, 0x30	; 48
    5e66:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		}
		LCD_voidWriteIntData(month);
    5e6a:	80 91 96 01 	lds	r24, 0x0196
    5e6e:	88 2f       	mov	r24, r24
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	a0 e0       	ldi	r26, 0x00	; 0
    5e74:	b0 e0       	ldi	r27, 0x00	; 0
    5e76:	bc 01       	movw	r22, r24
    5e78:	cd 01       	movw	r24, r26
    5e7a:	0e 94 2d 2c 	call	0x585a	; 0x585a <LCD_voidWriteIntData>
		LCD_voidWriteChar('/');
    5e7e:	8f e2       	ldi	r24, 0x2F	; 47
    5e80:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		if(year < 10){
    5e84:	80 91 97 01 	lds	r24, 0x0197
    5e88:	8a 30       	cpi	r24, 0x0A	; 10
    5e8a:	18 f4       	brcc	.+6      	; 0x5e92 <main+0x1ce>
			LCD_voidWriteChar('0');
    5e8c:	80 e3       	ldi	r24, 0x30	; 48
    5e8e:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		}
		LCD_voidWriteIntData(year);
    5e92:	80 91 97 01 	lds	r24, 0x0197
    5e96:	88 2f       	mov	r24, r24
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	a0 e0       	ldi	r26, 0x00	; 0
    5e9c:	b0 e0       	ldi	r27, 0x00	; 0
    5e9e:	bc 01       	movw	r22, r24
    5ea0:	cd 01       	movw	r24, r26
    5ea2:	0e 94 2d 2c 	call	0x585a	; 0x585a <LCD_voidWriteIntData>
		LCD_voidWriteChar(' ');
    5ea6:	80 e2       	ldi	r24, 0x20	; 32
    5ea8:	0e 94 4f 2a 	call	0x549e	; 0x549e <LCD_voidWriteChar>
		LCD_voidWriteString(days[day]);
    5eac:	80 91 94 01 	lds	r24, 0x0194
    5eb0:	88 2f       	mov	r24, r24
    5eb2:	90 e0       	ldi	r25, 0x00	; 0
    5eb4:	88 0f       	add	r24, r24
    5eb6:	99 1f       	adc	r25, r25
    5eb8:	fc 01       	movw	r30, r24
    5eba:	e8 56       	subi	r30, 0x68	; 104
    5ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    5ebe:	80 81       	ld	r24, Z
    5ec0:	91 81       	ldd	r25, Z+1	; 0x01
    5ec2:	0e 94 3f 2b 	call	0x567e	; 0x567e <LCD_voidWriteString>
    5ec6:	4d cf       	rjmp	.-358    	; 0x5d62 <main+0x9e>

00005ec8 <RTC_Clock_Write>:
	return 0;
}


/* function for clock */
void RTC_Clock_Write(u8 _hour, u8 _minute, u8 _second){
    5ec8:	df 93       	push	r29
    5eca:	cf 93       	push	r28
    5ecc:	00 d0       	rcall	.+0      	; 0x5ece <RTC_Clock_Write+0x6>
    5ece:	0f 92       	push	r0
    5ed0:	cd b7       	in	r28, 0x3d	; 61
    5ed2:	de b7       	in	r29, 0x3e	; 62
    5ed4:	89 83       	std	Y+1, r24	; 0x01
    5ed6:	6a 83       	std	Y+2, r22	; 0x02
    5ed8:	4b 83       	std	Y+3, r20	; 0x03
	I2C_Master_enuSendStartCond();
    5eda:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(SLAVE_ADDRESS);
    5ede:	80 ed       	ldi	r24, 0xD0	; 208
    5ee0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(TIME_REGISTER_ADDRESS);
    5ee4:	80 e0       	ldi	r24, 0x00	; 0
    5ee6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_second);
    5eea:	8b 81       	ldd	r24, Y+3	; 0x03
    5eec:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_minute);
    5ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ef2:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_hour);
    5ef6:	89 81       	ldd	r24, Y+1	; 0x01
    5ef8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendStopCond();
    5efc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <I2C_Master_enuSendStopCond>
}
    5f00:	0f 90       	pop	r0
    5f02:	0f 90       	pop	r0
    5f04:	0f 90       	pop	r0
    5f06:	cf 91       	pop	r28
    5f08:	df 91       	pop	r29
    5f0a:	08 95       	ret

00005f0c <RTC_Calendar_Write>:

/* function for calendar */
void RTC_Calendar_Write(u8 _day, u8 _date, u8 _month, u8 _year){
    5f0c:	df 93       	push	r29
    5f0e:	cf 93       	push	r28
    5f10:	00 d0       	rcall	.+0      	; 0x5f12 <RTC_Calendar_Write+0x6>
    5f12:	00 d0       	rcall	.+0      	; 0x5f14 <RTC_Calendar_Write+0x8>
    5f14:	cd b7       	in	r28, 0x3d	; 61
    5f16:	de b7       	in	r29, 0x3e	; 62
    5f18:	89 83       	std	Y+1, r24	; 0x01
    5f1a:	6a 83       	std	Y+2, r22	; 0x02
    5f1c:	4b 83       	std	Y+3, r20	; 0x03
    5f1e:	2c 83       	std	Y+4, r18	; 0x04
	I2C_Master_enuSendStartCond();
    5f20:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(SLAVE_ADDRESS);
    5f24:	80 ed       	ldi	r24, 0xD0	; 208
    5f26:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(CALENDAR_REGISTER_ADDRESS);
    5f2a:	83 e0       	ldi	r24, 0x03	; 3
    5f2c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_day);
    5f30:	89 81       	ldd	r24, Y+1	; 0x01
    5f32:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_date);
    5f36:	8a 81       	ldd	r24, Y+2	; 0x02
    5f38:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_month);
    5f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    5f3e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendu8Data(_year);
    5f42:	8c 81       	ldd	r24, Y+4	; 0x04
    5f44:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendStopCond();
    5f48:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <I2C_Master_enuSendStopCond>
}
    5f4c:	0f 90       	pop	r0
    5f4e:	0f 90       	pop	r0
    5f50:	0f 90       	pop	r0
    5f52:	0f 90       	pop	r0
    5f54:	cf 91       	pop	r28
    5f56:	df 91       	pop	r29
    5f58:	08 95       	ret

00005f5a <RTC_Read_Clock>:

void RTC_Read_Clock(){
    5f5a:	df 93       	push	r29
    5f5c:	cf 93       	push	r28
    5f5e:	cd b7       	in	r28, 0x3d	; 61
    5f60:	de b7       	in	r29, 0x3e	; 62
	I2C_Master_enuSendStartCond();
    5f62:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(SLAVE_ADDRESS);
    5f66:	80 ed       	ldi	r24, 0xD0	; 208
    5f68:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(TIME_REGISTER_ADDRESS);
    5f6c:	80 e0       	ldi	r24, 0x00	; 0
    5f6e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendRepeatedStartCond();
    5f72:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <I2C_Master_enuSendRepeatedStartCond>
	I2C_Master_enuSendSlaveAddressWithRead(SLAVE_ADDRESS);
    5f76:	80 ed       	ldi	r24, 0xD0	; 208
    5f78:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <I2C_Master_enuSendSlaveAddressWithRead>
	I2C_Master_enuReadu8Data(&second);
    5f7c:	80 e0       	ldi	r24, 0x00	; 0
    5f7e:	92 e0       	ldi	r25, 0x02	; 2
    5f80:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&minute);
    5f84:	82 e9       	ldi	r24, 0x92	; 146
    5f86:	91 e0       	ldi	r25, 0x01	; 1
    5f88:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&hour);
    5f8c:	83 e9       	ldi	r24, 0x93	; 147
    5f8e:	91 e0       	ldi	r25, 0x01	; 1
    5f90:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <I2C_Master_enuReadu8Data>
	I2C_Master_voidFlush();
    5f94:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <I2C_Master_voidFlush>
	I2C_Master_enuSendStopCond();
    5f98:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <I2C_Master_enuSendStopCond>
}
    5f9c:	cf 91       	pop	r28
    5f9e:	df 91       	pop	r29
    5fa0:	08 95       	ret

00005fa2 <RTC_Read_Calendar>:

void RTC_Read_Calendar(){
    5fa2:	df 93       	push	r29
    5fa4:	cf 93       	push	r28
    5fa6:	cd b7       	in	r28, 0x3d	; 61
    5fa8:	de b7       	in	r29, 0x3e	; 62
	I2C_Master_enuSendStartCond();
    5faa:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <I2C_Master_enuSendStartCond>
	I2C_Master_enuSendSlaveAddressWithWrite(SLAVE_ADDRESS);
    5fae:	80 ed       	ldi	r24, 0xD0	; 208
    5fb0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <I2C_Master_enuSendSlaveAddressWithWrite>
	I2C_Master_enuSendu8Data(CALENDAR_REGISTER_ADDRESS);
    5fb4:	83 e0       	ldi	r24, 0x03	; 3
    5fb6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <I2C_Master_enuSendu8Data>
	I2C_Master_enuSendRepeatedStartCond();
    5fba:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <I2C_Master_enuSendRepeatedStartCond>
	I2C_Master_enuSendSlaveAddressWithRead(SLAVE_ADDRESS);
    5fbe:	80 ed       	ldi	r24, 0xD0	; 208
    5fc0:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <I2C_Master_enuSendSlaveAddressWithRead>
	I2C_Master_enuReadu8Data(&day);
    5fc4:	84 e9       	ldi	r24, 0x94	; 148
    5fc6:	91 e0       	ldi	r25, 0x01	; 1
    5fc8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&date);
    5fcc:	85 e9       	ldi	r24, 0x95	; 149
    5fce:	91 e0       	ldi	r25, 0x01	; 1
    5fd0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&month);
    5fd4:	86 e9       	ldi	r24, 0x96	; 150
    5fd6:	91 e0       	ldi	r25, 0x01	; 1
    5fd8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <I2C_Master_enuReadu8Data>
	I2C_Master_enuReadu8Data(&year);
    5fdc:	87 e9       	ldi	r24, 0x97	; 151
    5fde:	91 e0       	ldi	r25, 0x01	; 1
    5fe0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <I2C_Master_enuReadu8Data>
	I2C_Master_voidFlush();
    5fe4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <I2C_Master_voidFlush>
	I2C_Master_enuSendStopCond();
    5fe8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <I2C_Master_enuSendStopCond>
}
    5fec:	cf 91       	pop	r28
    5fee:	df 91       	pop	r29
    5ff0:	08 95       	ret

00005ff2 <ConvertToRTC>:

u8 ConvertToRTC(u8 num){
    5ff2:	df 93       	push	r29
    5ff4:	cf 93       	push	r28
    5ff6:	00 d0       	rcall	.+0      	; 0x5ff8 <ConvertToRTC+0x6>
    5ff8:	0f 92       	push	r0
    5ffa:	cd b7       	in	r28, 0x3d	; 61
    5ffc:	de b7       	in	r29, 0x3e	; 62
    5ffe:	8b 83       	std	Y+3, r24	; 0x03
	u8 _L = num%10;
    6000:	8b 81       	ldd	r24, Y+3	; 0x03
    6002:	9a e0       	ldi	r25, 0x0A	; 10
    6004:	69 2f       	mov	r22, r25
    6006:	0e 94 54 30 	call	0x60a8	; 0x60a8 <__udivmodqi4>
    600a:	89 2f       	mov	r24, r25
    600c:	8a 83       	std	Y+2, r24	; 0x02
	u8 _H = (num/10)<<4;
    600e:	8b 81       	ldd	r24, Y+3	; 0x03
    6010:	9a e0       	ldi	r25, 0x0A	; 10
    6012:	69 2f       	mov	r22, r25
    6014:	0e 94 54 30 	call	0x60a8	; 0x60a8 <__udivmodqi4>
    6018:	82 95       	swap	r24
    601a:	80 7f       	andi	r24, 0xF0	; 240
    601c:	89 83       	std	Y+1, r24	; 0x01
	return (_H | _L);
    601e:	99 81       	ldd	r25, Y+1	; 0x01
    6020:	8a 81       	ldd	r24, Y+2	; 0x02
    6022:	89 2b       	or	r24, r25
}
    6024:	0f 90       	pop	r0
    6026:	0f 90       	pop	r0
    6028:	0f 90       	pop	r0
    602a:	cf 91       	pop	r28
    602c:	df 91       	pop	r29
    602e:	08 95       	ret

00006030 <ConvertFromRTC>:

u8 ConvertFromRTC(u8 num){
    6030:	df 93       	push	r29
    6032:	cf 93       	push	r28
    6034:	0f 92       	push	r0
    6036:	cd b7       	in	r28, 0x3d	; 61
    6038:	de b7       	in	r29, 0x3e	; 62
    603a:	89 83       	std	Y+1, r24	; 0x01
	return ((num>>4) * 10 + (num&0x0F));
    603c:	89 81       	ldd	r24, Y+1	; 0x01
    603e:	82 95       	swap	r24
    6040:	8f 70       	andi	r24, 0x0F	; 15
    6042:	88 2f       	mov	r24, r24
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	9c 01       	movw	r18, r24
    6048:	22 0f       	add	r18, r18
    604a:	33 1f       	adc	r19, r19
    604c:	c9 01       	movw	r24, r18
    604e:	88 0f       	add	r24, r24
    6050:	99 1f       	adc	r25, r25
    6052:	88 0f       	add	r24, r24
    6054:	99 1f       	adc	r25, r25
    6056:	82 0f       	add	r24, r18
    6058:	93 1f       	adc	r25, r19
    605a:	98 2f       	mov	r25, r24
    605c:	89 81       	ldd	r24, Y+1	; 0x01
    605e:	8f 70       	andi	r24, 0x0F	; 15
    6060:	89 0f       	add	r24, r25
}
    6062:	0f 90       	pop	r0
    6064:	cf 91       	pop	r28
    6066:	df 91       	pop	r29
    6068:	08 95       	ret

0000606a <__mulsi3>:
    606a:	62 9f       	mul	r22, r18
    606c:	d0 01       	movw	r26, r0
    606e:	73 9f       	mul	r23, r19
    6070:	f0 01       	movw	r30, r0
    6072:	82 9f       	mul	r24, r18
    6074:	e0 0d       	add	r30, r0
    6076:	f1 1d       	adc	r31, r1
    6078:	64 9f       	mul	r22, r20
    607a:	e0 0d       	add	r30, r0
    607c:	f1 1d       	adc	r31, r1
    607e:	92 9f       	mul	r25, r18
    6080:	f0 0d       	add	r31, r0
    6082:	83 9f       	mul	r24, r19
    6084:	f0 0d       	add	r31, r0
    6086:	74 9f       	mul	r23, r20
    6088:	f0 0d       	add	r31, r0
    608a:	65 9f       	mul	r22, r21
    608c:	f0 0d       	add	r31, r0
    608e:	99 27       	eor	r25, r25
    6090:	72 9f       	mul	r23, r18
    6092:	b0 0d       	add	r27, r0
    6094:	e1 1d       	adc	r30, r1
    6096:	f9 1f       	adc	r31, r25
    6098:	63 9f       	mul	r22, r19
    609a:	b0 0d       	add	r27, r0
    609c:	e1 1d       	adc	r30, r1
    609e:	f9 1f       	adc	r31, r25
    60a0:	bd 01       	movw	r22, r26
    60a2:	cf 01       	movw	r24, r30
    60a4:	11 24       	eor	r1, r1
    60a6:	08 95       	ret

000060a8 <__udivmodqi4>:
    60a8:	99 1b       	sub	r25, r25
    60aa:	79 e0       	ldi	r23, 0x09	; 9
    60ac:	04 c0       	rjmp	.+8      	; 0x60b6 <__udivmodqi4_ep>

000060ae <__udivmodqi4_loop>:
    60ae:	99 1f       	adc	r25, r25
    60b0:	96 17       	cp	r25, r22
    60b2:	08 f0       	brcs	.+2      	; 0x60b6 <__udivmodqi4_ep>
    60b4:	96 1b       	sub	r25, r22

000060b6 <__udivmodqi4_ep>:
    60b6:	88 1f       	adc	r24, r24
    60b8:	7a 95       	dec	r23
    60ba:	c9 f7       	brne	.-14     	; 0x60ae <__udivmodqi4_loop>
    60bc:	80 95       	com	r24
    60be:	08 95       	ret

000060c0 <__divmodqi4>:
    60c0:	87 fb       	bst	r24, 7
    60c2:	08 2e       	mov	r0, r24
    60c4:	06 26       	eor	r0, r22
    60c6:	87 fd       	sbrc	r24, 7
    60c8:	81 95       	neg	r24
    60ca:	67 fd       	sbrc	r22, 7
    60cc:	61 95       	neg	r22
    60ce:	ec df       	rcall	.-40     	; 0x60a8 <__udivmodqi4>
    60d0:	0e f4       	brtc	.+2      	; 0x60d4 <__divmodqi4_1>
    60d2:	91 95       	neg	r25

000060d4 <__divmodqi4_1>:
    60d4:	07 fc       	sbrc	r0, 7
    60d6:	81 95       	neg	r24

000060d8 <__divmodqi4_exit>:
    60d8:	08 95       	ret

000060da <__divmodsi4>:
    60da:	97 fb       	bst	r25, 7
    60dc:	09 2e       	mov	r0, r25
    60de:	05 26       	eor	r0, r21
    60e0:	0e d0       	rcall	.+28     	; 0x60fe <__divmodsi4_neg1>
    60e2:	57 fd       	sbrc	r21, 7
    60e4:	04 d0       	rcall	.+8      	; 0x60ee <__divmodsi4_neg2>
    60e6:	14 d0       	rcall	.+40     	; 0x6110 <__udivmodsi4>
    60e8:	0a d0       	rcall	.+20     	; 0x60fe <__divmodsi4_neg1>
    60ea:	00 1c       	adc	r0, r0
    60ec:	38 f4       	brcc	.+14     	; 0x60fc <__divmodsi4_exit>

000060ee <__divmodsi4_neg2>:
    60ee:	50 95       	com	r21
    60f0:	40 95       	com	r20
    60f2:	30 95       	com	r19
    60f4:	21 95       	neg	r18
    60f6:	3f 4f       	sbci	r19, 0xFF	; 255
    60f8:	4f 4f       	sbci	r20, 0xFF	; 255
    60fa:	5f 4f       	sbci	r21, 0xFF	; 255

000060fc <__divmodsi4_exit>:
    60fc:	08 95       	ret

000060fe <__divmodsi4_neg1>:
    60fe:	f6 f7       	brtc	.-4      	; 0x60fc <__divmodsi4_exit>
    6100:	90 95       	com	r25
    6102:	80 95       	com	r24
    6104:	70 95       	com	r23
    6106:	61 95       	neg	r22
    6108:	7f 4f       	sbci	r23, 0xFF	; 255
    610a:	8f 4f       	sbci	r24, 0xFF	; 255
    610c:	9f 4f       	sbci	r25, 0xFF	; 255
    610e:	08 95       	ret

00006110 <__udivmodsi4>:
    6110:	a1 e2       	ldi	r26, 0x21	; 33
    6112:	1a 2e       	mov	r1, r26
    6114:	aa 1b       	sub	r26, r26
    6116:	bb 1b       	sub	r27, r27
    6118:	fd 01       	movw	r30, r26
    611a:	0d c0       	rjmp	.+26     	; 0x6136 <__udivmodsi4_ep>

0000611c <__udivmodsi4_loop>:
    611c:	aa 1f       	adc	r26, r26
    611e:	bb 1f       	adc	r27, r27
    6120:	ee 1f       	adc	r30, r30
    6122:	ff 1f       	adc	r31, r31
    6124:	a2 17       	cp	r26, r18
    6126:	b3 07       	cpc	r27, r19
    6128:	e4 07       	cpc	r30, r20
    612a:	f5 07       	cpc	r31, r21
    612c:	20 f0       	brcs	.+8      	; 0x6136 <__udivmodsi4_ep>
    612e:	a2 1b       	sub	r26, r18
    6130:	b3 0b       	sbc	r27, r19
    6132:	e4 0b       	sbc	r30, r20
    6134:	f5 0b       	sbc	r31, r21

00006136 <__udivmodsi4_ep>:
    6136:	66 1f       	adc	r22, r22
    6138:	77 1f       	adc	r23, r23
    613a:	88 1f       	adc	r24, r24
    613c:	99 1f       	adc	r25, r25
    613e:	1a 94       	dec	r1
    6140:	69 f7       	brne	.-38     	; 0x611c <__udivmodsi4_loop>
    6142:	60 95       	com	r22
    6144:	70 95       	com	r23
    6146:	80 95       	com	r24
    6148:	90 95       	com	r25
    614a:	9b 01       	movw	r18, r22
    614c:	ac 01       	movw	r20, r24
    614e:	bd 01       	movw	r22, r26
    6150:	cf 01       	movw	r24, r30
    6152:	08 95       	ret

00006154 <__prologue_saves__>:
    6154:	2f 92       	push	r2
    6156:	3f 92       	push	r3
    6158:	4f 92       	push	r4
    615a:	5f 92       	push	r5
    615c:	6f 92       	push	r6
    615e:	7f 92       	push	r7
    6160:	8f 92       	push	r8
    6162:	9f 92       	push	r9
    6164:	af 92       	push	r10
    6166:	bf 92       	push	r11
    6168:	cf 92       	push	r12
    616a:	df 92       	push	r13
    616c:	ef 92       	push	r14
    616e:	ff 92       	push	r15
    6170:	0f 93       	push	r16
    6172:	1f 93       	push	r17
    6174:	cf 93       	push	r28
    6176:	df 93       	push	r29
    6178:	cd b7       	in	r28, 0x3d	; 61
    617a:	de b7       	in	r29, 0x3e	; 62
    617c:	ca 1b       	sub	r28, r26
    617e:	db 0b       	sbc	r29, r27
    6180:	0f b6       	in	r0, 0x3f	; 63
    6182:	f8 94       	cli
    6184:	de bf       	out	0x3e, r29	; 62
    6186:	0f be       	out	0x3f, r0	; 63
    6188:	cd bf       	out	0x3d, r28	; 61
    618a:	09 94       	ijmp

0000618c <__epilogue_restores__>:
    618c:	2a 88       	ldd	r2, Y+18	; 0x12
    618e:	39 88       	ldd	r3, Y+17	; 0x11
    6190:	48 88       	ldd	r4, Y+16	; 0x10
    6192:	5f 84       	ldd	r5, Y+15	; 0x0f
    6194:	6e 84       	ldd	r6, Y+14	; 0x0e
    6196:	7d 84       	ldd	r7, Y+13	; 0x0d
    6198:	8c 84       	ldd	r8, Y+12	; 0x0c
    619a:	9b 84       	ldd	r9, Y+11	; 0x0b
    619c:	aa 84       	ldd	r10, Y+10	; 0x0a
    619e:	b9 84       	ldd	r11, Y+9	; 0x09
    61a0:	c8 84       	ldd	r12, Y+8	; 0x08
    61a2:	df 80       	ldd	r13, Y+7	; 0x07
    61a4:	ee 80       	ldd	r14, Y+6	; 0x06
    61a6:	fd 80       	ldd	r15, Y+5	; 0x05
    61a8:	0c 81       	ldd	r16, Y+4	; 0x04
    61aa:	1b 81       	ldd	r17, Y+3	; 0x03
    61ac:	aa 81       	ldd	r26, Y+2	; 0x02
    61ae:	b9 81       	ldd	r27, Y+1	; 0x01
    61b0:	ce 0f       	add	r28, r30
    61b2:	d1 1d       	adc	r29, r1
    61b4:	0f b6       	in	r0, 0x3f	; 63
    61b6:	f8 94       	cli
    61b8:	de bf       	out	0x3e, r29	; 62
    61ba:	0f be       	out	0x3f, r0	; 63
    61bc:	cd bf       	out	0x3d, r28	; 61
    61be:	ed 01       	movw	r28, r26
    61c0:	08 95       	ret

000061c2 <_exit>:
    61c2:	f8 94       	cli

000061c4 <__stop_program>:
    61c4:	ff cf       	rjmp	.-2      	; 0x61c4 <__stop_program>
